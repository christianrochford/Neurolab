%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 112.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Jora
%%CreationDate: 12/25/2012
%%BoundingBox: 0 0 701 702
%%HiResBoundingBox: 0 0 700.0005 701.0323
%%CropBox: 0 0 700.0005 701.0323
%%LanguageLevel: 3
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.0 x399 R agm 4.5188 ct 5.1874%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 128 8%%BeginData: 33397 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FFA8A8A8FFA8A8A8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8A8A8FFA8A8A8FFFD28A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8
%A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FF
%A8A8A8FFFD28A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFD04
%A87DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FF7DA8A8FFA8
%A8A8FFA8A8A8FFFD58A827F8A852527DFD04A87D7DFD09A87D7DFD05A827
%7DFD07A8527D7DFD07A8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFF8277D52272727A82752F82752275227F87D52272752F87DA8FFA8FFF8
%27277DF85227275252522727277DFFFD1CA8FFA8A8A8FFA8A8A8FFA8A8A8
%FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8
%A8A8FFA8A8A8FFA8A8A8FFA8A852272752275252F852277D52527D27A852
%F8522752A87D527DFD04A8277D2752277D52F8272752F87D277D7DA8FFA8
%A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA852527D27522752F8A852
%52527D527D52272752F8527DA827A8A8FFA8A8F87DF87D27A8F852275252
%277D527DFD2FA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8
%A8FFA8A8A8FFA8A8A8FFFD04A827A87D525252F85252277D7D275252A827
%27277D27277D2752A8A8A87D2727527D527D7D2752527D27A8527D7DA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8A8A8FFA8FFA8FFA8A8A8FFFD05A8FFA8FFA8FFFD05A8FFA8FFA8A8A8FF
%FD18A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8
%A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FF
%A8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFFD06A87DA87D
%A8A8275252F852FD0CA8FFA8A8A8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA87DF852272752527D
%A8527D275252FD04A8FFA8A8A8FFFD24A8FFA8A8A8FFA8A8A8FFA8A8A8FF
%A8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8
%A8FFA8A8A8FFA8A8A8FFA8A8A8FFFD0CA827275227277DF87DA8525227F8
%527DFD09A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF527D277D7D7DA8FF7DA8
%7D7D7DFFA8FFA8FFA8FFA8FFFD10A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8
%A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FF
%A8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8
%A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A87D7DFD14A8FFA8A8A8FFA8A8A8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFFD20A8FF
%A8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8
%A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FF
%A8A8A8FFA8A8A8FFFD1EA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFD0EA8FFA8A8A8FFA8A8A8FF
%A8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8
%A8FFFD10A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8A8A8FFFD18A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FF
%A8A8A8FFA8A8A8FFA8FF5252A8FF5227A8A827FF52FD04A8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8
%A8A8FFFD18A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA85252FFA8FFA8FFA852F8FFA8
%7D27FF7D277DF87DFFF8275227A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFFD08A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8
%A8A8FFA8A8A8FFA8A8A8FFA8FFA8FFA8FF52FFA8FF2727F87DA8FFA8FF52
%7DA8FFA87DA8FF27FFF8FFA8527D7DF8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8
%FFA8A8A8FFA8A8A8FFFD08A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7DF87DFFA87D5227A8FFA8
%FFA827A8FFA8FF52FFA827A87D52FF52FFA87DA8FFA8FFA8FF7DF87DFFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFD14A8FFA8A8A8FFA8A8A8FFA8
%A8A8FFA8A8A8FFA8A8A8FFF82752FF527D27A8F8F82727A8FF27525252A8
%FF27A8A852527DA8FF27FFA8FFA8FFA82752FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFFD12A8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8527D7D527D7D277DA8F85227A8A8FF52FFA8A827FFA85252
%FFA8527DFFA852A8FF52FFA8FFA8FF7D27A8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFFD06A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FFA8
%FFA8FFFD0727F85227A827A852527D52277DFF7DA8A87DA8FFA8A827FF52
%5227FFA827A87DF8A8A87DA8FFA8FFA8A827A8A8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFFD
%06A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA827A87D7DFFA8FF7DA8A852A852A87D527D52FFA82727FF27A8A8
%FFA87DA87D52527DFF7D52A852A8FF52FFA8FFA8FFA87DA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFFD10A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FF27
%FF27275227527D7DFF27FFA827A8FFA87DA8FFA827A8FF27A8A8FF52FF52
%7DA827A8FF527D27FFA852A827F87D52FF27A8A8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFFD10A8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA87D277D527D7D27A87D527DF8
%7D5227A852A8FF27FFFFFF52FFFFFF5252FFA827FFFF7DA87D7DFF527DFF
%FF2752FFFF27FFA8A8A85252A8277D7D5227FFA8FF7D7DA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFD
%04A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FF5227527D52
%2727FF527DA8FFA8FF27FF27FFA827A8FFA87D527DFD0452A87D27FF52FF
%527DA8FF27FFA82727FFA827277D5227F87D27FF527D2752A852F827F8A8
%A8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8
%A8FFFD04A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FF2727A87D52FFA8FFA827A852A8FF27FFA8FFA8FFA8FF527D
%527DFF7D2752FF7D52FFFF27A8FF2727A8FFA87D527D527DA8A8277D527D
%A8FFA8527DA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFFD0AA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8F8
%27FFA8FFA8FFA82727FF527DA8FFA8FF27FF52FFA827A8FF27FD04A8FF27
%7D5252A8FFA8FF527DA8FF27FFA82727A82752527D527D52277DA8A8FF7D
%27527DA85252FFA8FF7DA8A8FFA8FFA8FFA8A8A8FFA8A8A8FFA8A8A8FFFD
%0EA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FF5227527D52
%7DA8FF2752A87D52FFA8FFA827A87DA8FF27FFA82727A8F87DFFFF27A852
%52A8FFFF7D52FFFF27A8FF277D27A8FFFFA8FFFFFFA85227FFA8FFFF27F8
%A8A852527D522727FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FF
%F827A8FFA87D527D277DA82727FF527DA8FFA8A8F8A852FFA827A8FF27A8
%275227FFA8FF27FF27FFA87D27A8A8FF27FFA8275227A8FFA8FFA8FFA8FF
%A852A8FF52FFA87DA8FFA8FFA8FF7DA8A852A8FFA8FFA8FFA8FFA8FFA8FF
%A8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8A8275252FFA8527D527D7D52FF2752277D52FFA8FFA8FFA8
%7DFFFF27FFFF27A852FF527DFFFF52A852522752FFFFFFA852FFFF277DF8
%27277D7D525252FFFF52FF7DF8F85227272752FD0627F8A8A8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFD08A8FFA8A8A8FF
%A8A8A8FFA8A87DF8527DA8A8F87DF852527DA827A8A8F852527D527D52A8
%52FFA827A8FF27FF27FFA827A8A8F87D272727FFA8FFA8FF27FFA827527D
%7D27F87D52FFF87D527D27A87DFFA8FFA8FFA8FF7D7D527D5252F852A8FF
%A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFFD08A8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FF277D52FFA87DA87DA87D52FF5252A8277D7D527D
%7D52527DFFFF27FFFF27A852A8FF7D52FFA8A852A8FF5252FD0427FFFF27
%52A8FF27277D7DA87D7D5227A8525227522752527D7D7D527D7D7DA8527D
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFD04A8
%FFA8A8A8FFA8A8A8FFA8A87D52A8FF7D527D52A8FF52FF52A8527DA8FF27
%FF27FFA87DF87D527D52FFA827A8A8F8A8A852A8FF27A8A8FF27FFA87DA8
%FFA8FFA8FFA8277D52A827A8FF52FF5227A8A8FD0B277DA8FFA8FFA8FFA8
%A8A8FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFFFA8FF
%A8FFA8FFA8FFA8FFA8FFA852F8A8A827A8FF27A8A87DA8A827FF27FFA827
%A827A8FFA827A87D7DA827FF7D52A852A8FF27A8FFA827FFFF527DFF52A8
%7DF8272752A827FF27FF27FFA852FFA8277D7D7D527D7D7D527D527DA8FF
%527DA8FFA8FFA87DF8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFFD06A8FFA8A8A8FFA8A827FFA87D27FF27FFA8A827FF52A8A852
%527D527DF87D27A8A8FF27FF7D52A87D27FF7D27A8FFA8FF27FFA85252FF
%A8277DFF277D52FFA87D522752277D2752A827FFA8FF7D7D527D527DA8FF
%A8FF2752A8FF5252527D527D5227A8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FF
%A8A8A8FFFD06A8FFA8FFA8FFA8FFA8FFA8FF52277DFFA852A8A827FFA87D
%52A827FFA852A852A8A8FFA827FFFF27A8FF7D52A8A827FF7D527DA8FF52
%7DFFFF27A8FFFF527DFF27A8FFFF527D2727527D27277D52FF527DFFA827
%527D7D7D527D7DFF5252FFFFA8FFFFFFA8FFA87D27FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FFA8A8A8FFA8A8A8FFA8A87D27A8
%FFA827A827A8FFA827A87D52FFA827A827A8FFA87D27FF5252A8FF7D7DA8
%A827A8A8FF277DA827A8FF7D52A8FFA8277DFF277DA827F82752FF52FFA8
%FF27FFF87DA8A8F852527D527D525227A82752527D5252527D527D2727A8
%FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8FFA8FFA8FFA8FF
%A8FF7DFFA8FF7D52A8FF527DA827A8FFA852A8527DFF527D527DA87DFF52
%7DFF5252A8FF7DFFA8A827FFA8FF27A8527DFFFF277D7D7DA852A8FF27FF
%A8A8277DFF7DA8FF52A8527D5227A8A87D7D5252272752A82727A8FFA87D
%F87DA8FFA8FF27A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%FD04A8FFA8A8A8FFA827F87D27A8527DA8FFF8FF5252A8FF527DA852A8FF
%27FF5252F87DA827A8FF52FFA827A8FFA827A8FFA8FF27A827FFA8FF527D
%277D527DA827A8FFA82752FF52FF52527D27A87D275227A8A8FF52A8A87D
%27A8A8FFA8A8277D52272727F8F87DFFA8FFA8FFA8FFA8A8A8FFA8A8A8FF
%A8A8A8FFFD04A8FFA8FFA8FFA8FFA8527DA8A852A8FF27A8A8A852FF27A8
%A8FF27FF7DFFA852FFFFA87DFFFF27FFFF52A8FF7D52A8FF27FFA827A87D
%52A852FD04FFFD047DFF27FFFFFF2752FF7D7D52FF52FFFFFF277DFFFFFF
%A8F8277D27FF527DA8A827A8527D7D27A8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFFD04A8FFA8A8A87DF852A8FF7D52A8A8277D
%A8527DA827FFA827A87DA8FF27FFF85252A8A827A8FF5252A8FFA827A827
%A852F8A8527DA852A8FFA8FFA87D2752A827A827522727FF5227A8FF52A8
%27FFA8FFA8FFA8FF7DFFA87D52FF52FF27A87D52A8A8F852A8FFA8FF7D52
%A8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFA8A8A8FFFFA8FFA8FFA8FFA8A827
%FFA8FF27A8A852F8FFA827A87D52FF27FF52FFFF27A8277D7D527D52FFA8
%FF5252A8FF7D7D27FF52FFA87D7DFF52FFFFFFA8FF7D2752FF7D52F8A827
%27A85227FFA87D7D27527D7D7D527D7D7D527D7D7DA87D27A87D52FFFFA8
%FF5252A8FFA852F8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FF
%A8A8A8FFA8A8A87D27A8A8F827FFA8A8A8FF27FFA827A82727A8A8FF7D52
%A8FF527D27FFA8FF527D2752A87D5227A87DA8FF27A8A852A8FFA8FFA827
%5252A8FF2727A82727FF2727A8FF52FFA8FFA852FD0A275227A87DA8A852
%7D527D2752A87D7D27A8FFA8FFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8FF
%A8FFA8FFA8FFA8FFA8527DFFA8FFA8FFA8FFA852A8FF527D277DA8FFFFFF
%52A8FF7D5252FFFFFF7DFD04FF7D7D27FF7DFF7D52FFFF27FFFFA827FFFF
%FF7D52A85227FF2752FF5227FFFF7DFD04FF27FD09FFA8FF27FF52FF7D7D
%A8FFFF7DA8FFF85227FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8
%FFA8A8A8FFA87DA8FFA8FD092752FFA87D522752FFA8FFA87D52FF527D27
%FFA8FF52FFA8A8A87D5227A87DA852A8A8F8522727F8F8A8FFA8FFA827F8
%27A82727FF2727A8FF5252A8FF27A8A8FFA8FFA8FFA8FFA8FFA827A87DA8
%7D527DF827F87D7D525227A8FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFA8
%A8FFA8FFA8FFA8FF277DA8FFA8FFA8FFA8FFA8FF27277DFF527D2752A8FF
%A8FF7D7DA87D52A827A8FF5252FFF827F87D27FF52FF7DFFA827A852A8FF
%A8FFFFA87DFF27F827FF2752FF27F852FF7DF827277DA8FFFFA8277D7D7D
%527D7D7D52A827FFFD047DA8A87DF8277D27FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFFD04A8FFA8A8A87D277DA8FFA8FFA8FFA8FF277D527DA8
%7D52277D27A8FFA87D52FFF827A8A827A8A852A87D7DFFA827A87DA87DA8
%FF52A8F85252272727F8F8A8277D27A82727FF277D527D52A8A8FFA8FFA8
%5227FF7D7D527D527D527D27A85252A8FF52527DFF527D5227A8FFA8FFA8
%FFA8FFA8A8A8FFA8A8A8FFA8A8A8FFFFA8FFA8FFA8FF52FF27A8A87D527D
%527D527DA87D52FF7D7DA852A827A8FFFF527DA8A8A8FF7D7DFF52A8A852
%A8FF27FF7DFF7DFFFF7DFF7DFF7D7DA87DFFA8FF27FF27FF2752FFFD047D
%A8FD05FF5252FF277D7DFD05FFA8FF527DA8FFFF7DF852FFFF527D27FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFD04A8FFA87DA87DA8A8F85252
%7DA8FFA8A827A8527DA8A827FF27FF27FFA8FFA8522727F852527DA8F827
%A8F87DA827A87D7D27A8A827FF52FF527D27F8A8FFA85227A8527D277D52
%52FD08277DA827A8A87D527D527D527D527DA8FFA8FF5252A8FFA87D5227
%A8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFFFA8FFA852F8A852FFA8
%527DA8FD0527F8A87D52FFA852A827A852FFFFA8FFFFFFA852A87D52FFA8
%FFA827FFFF27FF7DA8F8FF27FFFF7DFF7D52FF52FFFF5227A87D52FFA8FD
%0AFFA87D27FFFFFF52FFFFA8527D7D7D527D7D7D527D52A852FF527D527D
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FFA8A8A852A87DA8FFA8
%FFA8FFA8FFA8FFA8FF527DA8FF5252F8A827FFA87DA8FFA8FFA8FF527DA8
%FFA8FF27FFA827A87DA8A8F852A85252FF527DA87DA8A82727A827A87DF8
%FD082752A8F8F8FFA8FFA87DA8FF27A8A8FFA8FFA8FFA8FFA87D52F8A87D
%52FF27A8A8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFA8A8FFA8FFA8FF52FF52
%7D527D527D527D527D7D7D52527DFFA87DA87DA852FFFFF8277D7D527D7D
%5252FD047D52FFFF27FF7DFFA852A87D52FFFF7D7DFF7DFF27FF277DFFFF
%FFA8FFFFA8FD05FF527D7DA8FD04FF527DA852FFFFFF52527D7D7D527D7D
%FF52FF7D7DA8FF7DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FFA8A8
%A87DA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF27FFA8FF27FFA8A8A8FF
%A8FFA8FFA8FFA8FFA8FFA8FFFF27A87DFFFFA85252FFA8FF527DA87D527D
%A82752FFA8FF2727F8F8A8FFA8FFFFFF2752527D52527D7D5227A8A8F852
%52F87DFF27A8A8FFA852A87D52FFA87DA8FFA8FFA8FFA8FFA8FFA8FFA8A8
%A8FFA8A8FFA8FFA8FF527D527D527D527D527D52FFA8FFA8FFA8FF27A8A8
%FF5252A8FFFFFFA87D27272752272727522727275227FF52FFFF7D52FD04
%FF527D7D7D27FFFF277DA8FFFF7DFFFF52FD06FF7D52FFFFFF527D7D7D27
%FFA827A87D2752A827527D527D52FF527DA8FF52FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFFD04A8FFA8A87DF8527D527DA8FFA85227FFA8FF52A8A8
%277DFFA827A8FFA8FF27F852FFA8FFA8FFA8FFA8FFA8FFA8FFA852A8A827
%FF27A8A85252A8275252FFFF277D7DA8FF52FFA8F8277D527D527DF852A8
%FFA87D527D5252A827A8FF52FF27A8A8FFA8FFA87DA87D52FFA87DA8FFA8
%FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFFFA8FFFD04A827FFA8A8A82752FFA8
%A8527D52F852A8F852A87DF8A8A8FFFF5252FD0DFF7D27A8FF27FF7D277D
%A852FF27FF27FFFF7D52FF27FFFF5252FF52FD06FF7D277D7DFFFD057DFF
%52FFFF7DFFA827FFFFFFA8A87DFFA87DFFA852FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFFD05A8F827527D5227F8A8A827A8FFA8A87DFF7DFFA8A8A8
%FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFA8277DFFFF27A87D27A8
%FF52A8F8A8FF7DA8FF27FFA852FFFFF8F8FD05277DA8FFFFFFA852A85227
%7D527DA87DA8FF52FFA827A8A82727F852A8FF52FF527DA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8A8A8FFFFA8FFA87DA8FFA8FFA87DA85252FFA8FF27F8
%5227527D527D7D7D527D7D7D527D7D27527D7D7D527D7D7D527D52FFFFFF
%A827FF52FFFFFF7D5227A8A87DFFFF7DFFFF27FFFF27A8FD05FF7DFD05FF
%52FF2727527D7DFF52FFFF52A8FF277D52FFA87D52FFFF7DA87D52FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FFA8A8A852527DFD0552FFA8FFFD
%04A8F8FFA8FFA8FFA8FFA8FFA8FFA8FF27FFA8FFA8FFA8FFA8FFA8FFA87D
%2752A8FF27FFF85227FFA8FF277DFFFF52FFFF7D52FFF8FD0427FFA8FD04
%27A8A82752FFA87D527DA827F852277DA8FFA8FFA8FFA8F8272752FF2727
%A8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFA8A8FFA8FF7D2752FFA8A8F87D52
%52A8FFA8FFFFFF5227A8FFA8FF7DFFA8FD06FF52FD0BFF5252FD04FF52FF
%2752A8FFFF527DFFFF27FD04FF52FD05FF7DFD06FF27FF527DFFFF7D7D7D
%FF52527DFF277D7D7D527DFFFF27FFFF7DA8527DFFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8A8FFA8A827A8A8FFA827A82752FFA8FFF8A8F87DA8FF
%A8FF52F8527D277D527D527D277D527D527D27FFFFFFA8A827FFA8FFFFFF
%27FF7DFFFFFF527DFFA827A8FD04FF27FFA852A8FF52A8A8FFFFFFA8A827
%A8F8A8A87D527DA8FFA8FFA8FFA8527DFF52FFA827A8FF52FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8FFA8FFA8FF7DFFA8FF27FF52FFA8FF
%2727A827A8FF7D27527D52A8FF27A8FF7D27A8FD06FF27FD04FF27FFA87D
%527D7D5252F8A8FFFF52FF27F8FFA852FFFFFF27FF52F8A8FFA827272752
%27A8FF7D5227A8FFFD067D527D7D7DF852FF7DA8FF27FF7D27A8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFD04A8FF52F8F8277D27A87DA8A827
%7D27FF52FFA87DF87D527D27FF27FFA8FF27FFA8FFA8FFA8FF27A8F82752
%27A827A8FFA8FFA8277DFFFFFF27FF277DA82727FFA8FF275252A8FFFFA8
%FFFFFFA8FFF827A87D52FF275252FFFD0B27FFA827A852F8A8A8FFA8FFA8
%FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFFFA8FFA8FF7DFFA87D27FF52FF2727
%FF27A87D7D7D527D7D7DA852FF27FFFFFF52FFFF275227277D52FF7DA8FF
%FFA852FD04FF52A8FFFFFF27FFFFFFA852A852FFFFFF5227FFFF7D275227
%522752277D27FF7D7DA827527DFF52FD07FF522727275227FFA8A8FFFFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFD04A8FFA8FFA8A85227A87DA8
%A8A8FF27FF7D7D527D527D27FF27FF27FFA8FF52A8A827A8FF527D27FFA8
%FFFFFF27FFFFFFA87D7DFFFFFF27A8FFFFA827A8FF27FFFFFF27277D5227
%FFA8FFFFFF5252FFFFA87D52FF27A852FF2752277D527DA8FF27FFA8A8A8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFFFA8FFA8FF
%A8FF272727FFA827A8FFA852A8FFA8FFFFFFA87DFF27A8F87DFFA8FF7DFF
%27FFA87D52277D2727FF527DFFFFFF277DFFFFFF27FFFFFFA8527D52FF52
%FFFFA827277DF852FF277DFF527DFFFFFF7D277D7D27FF7DFF2752277D7D
%27FFA827A852F8A8A8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8A8FFA8A8A8FFA87D52277DFF7D27A8FF52FD0427FFA8FF27A827A8
%27FFA8FFA87DA8277DF8277DA8FF7D52A827A8FFA852527DA8FFFF27A8FF
%A827A852F8A827FFFF7DF827FF2727FF27277DA827A8A8FF27527D7D52FF
%52FF27FFA8FFA8277D7DF87D7D27A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8A8A8FFA8A8FFA8FFA8FFA8FFA8A8F87DA8FFA827A8FFFFFFA8
%A827FFA8275227FFFFA852527DA8FF27FF277D7DFD04FF52A8FFFF7D527D
%7DFFFFFF27FFFF527DFFFFFF52277D7DFFFF27FF2752FF52FF7D52FF27FD
%07FF7D7DFF7DFD04FFA85252A8A8FF27FFA8FFFFFFA8FFFFFFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD0527
%A87D27FFA8FF27A8F827A8FFA8FFA827A827527DA8FFFFA827FFFFA827FF
%527DFFFFFF27FFFFFF52A8FFFFFF7D52F8FFFF27FF2727FF27FF7D5227FF
%27FFFFFF277D527DA8FF527D527DA8FFA8A82752A85227527DFFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FF7D277D7D7DFFA827A8277DFFFFFFA87D27FF277D7DFF7D
%7D52FFFFFF27FFFF7D7DA8FFFF7D2727FFA827A8FD04FF7DFFFF27FF2727
%FF52A8F8277DFF27FFFFFF2752F8527D52A87D7DA8527DFFA8FF7D277DFF
%7DF827FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFD04A8FFA8A8
%A8FFA8FFA8FFA8FFA8FFA8FFA8A827A85227A852F8A8A8F8F827272752FF
%A827527DA87DA8FFA8FF27A8FFFF52A82752A827A8A82752A827A8FF7DA8
%52FFFF27A82727FF27FF27FF52FF27FFA8FF27FF52FFA8A8277D5252A852
%27FFA8FFA85227FF7DA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8
%A8FFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFFFFFA87D52FFA8FFFF
%FF52A8FFFFFF7D52FF277D7DFF7DFD04FF52A87D7DFF27FF52A8F8A8FFFF
%27FFA852FF27277DFFFF27FF2752FF27A87DFF7DFF52FFFFFF52FFA8FD06
%7D52FFFFA827FFFFFFA852FFFFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFFD04A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FF2752A827527DFF277DFFFFFF277DFF7DA8A8277DFF
%FF27FFFF277D7D7D5227FF52FFFF27FF27527DF827A8FF27FF27FFA8FF27
%FF277D527D527D52A8527D5252F87DA8FF27FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8A8A8FFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFFFFFA8FFFFFFA8FFFFFFA852A87D52FF277D52FF277DFFFFFF27
%52FF7DFFFF527DFFFF52FD04FF7D527D27FF7DFFFF27FF277DA87D27FFFF
%27A8277DFFFF5252277D52FFFFA8FF27A8527D7D7D52A8FF2727A8FFFFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FFA8A8A8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8F85252A8A8277D52
%527D527D527D2752A87DFFFF277DFFFFF8A8FFA8F8A852527DFF27FFA852
%FF7DF852FF7DA8FF525227A8A8FF27A87D52F852272727A852527DFFA8FF
%277D27F87DFFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFA8A8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFA8F8
%FD057D27FD09FF27FF7DFF522752FFA8277DFF27FF27A852A8FF7D52FF7D
%FF7D7D7DFF7DFFFFFF52A8FFFFFF27FFA87D7D7D5227522752FD04FFA8FF
%52277DFFFFFFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA852A8
%A8A8FFA8FFA8FFA8FFFFFFA8FF527DA87DFFA8527DA8FFA8A8F87DFFFF27
%FF277DA852FF7DFF52A8FFFF7DA8FFFFFFFD04277DFF52FFA8FFA8FFA8A8
%A8FFA8FFA8FFA8FF277DA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8
%A8FFA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8
%FFFFFFA8FFFF7DF8FD042752272727522727527D7DFF52FFFFFFF852FFFF
%A852FFFFFF52FFFFF8527DFF7DFF7D277DFF7DFF7DA8FFFFA8A8FF52277D
%FFFFA8FFFF27F8FF277D527D27A8A8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFFD04A8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA87DA8FFA8FFA8527DFFA8FFA8272752A852
%A8FFFF7D7DFFFFFFA8FFFFFF527DFF7DA87DFF527DFFA8F8277DA827F852
%A852F8FF7D2752FFA87D5252277DA852A8FFA8A8277DA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFFFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFFFFFA8FFFFFFA8FD0DFFF8272727FFFF272752A8F87DFD
%0CFF27FFFFFF7DFFFF5252FF7DFF7DFFA8FF7D7D527DFFFF7D52527D277D
%7DFFFFA852FF7DFFFF52F8FFFFFFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFFD04A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FF52A8FF27A87DFFA8A8FFFFFF
%A8FFFFFFA8FFFFFFA827FFFFA87DFFFF277D27FFA87DFFFFA8527D7D52FF
%A87D277D527DA8FF7D52F8FF275252FFA87DA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8A8A8FFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD06FF2727FF2752F87D
%FD0EFFF87DFFFF7DFF52FFFFA852FF52FFA8277DFF7D7DFFFF7DFFFF7D7D
%FFA852FFFF27A8FF5227A8FFFFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8A8FFA8A8A8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7DFFA8FFA87DA8FFA8FF
%A8FFA8FFA8FFFFFFA8FFFF527DFFFF7DA852FFFFA87DA87DA827A8F8F852
%7DFFA87DA8FF277DA8FFF8FF277DA8FF7DF87DFFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8A8A8FFA8A8A8FFA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FD27FF7DFF27FFFFFF7DFFF8A827FF7D
%A8FFFFA852A8FF277DFFA827A827A8FD04FFA8FFFFFFA8FFFFFFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FFA8A8A8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF7DA827A852A8
%7DA8527DFD0727A8A827A8A8A827A8277DA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD
%1DFF7DFF5252F8A852FFFFFFA8FD06FF5227FFA82727FF2727F8A8FFFFA8
%FFFFFFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFD
%04A8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA827A8FFA8A8A852A8FF27F82727277D525252FFA8FF277DA8
%FFA87DA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8
%A8A8FFA8A8A8FFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FD25FF277DFD04FF7D52FFA87DFD06FF7D7D7DF87DFD08
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFFD04A8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF7D7D527D52522727527D527D52277D
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8A8A8FFA8A8A8FFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD1BFF7DFD07FF
%527D27FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FFA8A8A8FFA8A8A8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%F8F8272727F82727275227A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FD
%27FFA8FFFFFF7D7DFFFF7D7D27FD09FFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FFA8A8A8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA8
%FFA8FFA8FFA8FFA87D52FFA87D52A827A8A8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFA8
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD19FF7D7DA8FF7D7D
%A8FF27FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFD04A8FFA8A8A8FFA8A8A8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A87D52FFA8277D52F8A852FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFFD04A8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FD25FF7D7DFF527DFF5252FF7DFD04FFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFD04A8FFA8
%A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA852275252FFA87D27FF52FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFA8
%A8A8FFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF272727FFA8527D27A87DFFFF
%A8FFFFFFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A827A8
%FF27FF27FF52FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8A8A8FFA8A8A8FFA8A8A8FFFD06A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FD21FFF87DFF7DFF7DA87DFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FFA8A8A8FF
%A8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8527DFF27FF52FF52FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFA8A8A8FF
%A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF27A87D272727527D
%FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFFD04A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF27
%FFA8FF52FFA87DA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8
%FFA8A8A8FFA8A8A8FFFD08A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FD17FFA8FFFFFFA8FFFF52A8FFFF7DA8FF527DA8FFFFFFA8FFFFFFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFD
%04A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8F87DA8FF27FFA8FF52277D
%A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFA8
%A8A8FFA8A8A8FFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA852A8FF
%A87D52FFA8FFA827F8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFFD06A8FFA8A8A8FFA8A8A8FFA8A8A8FF
%A8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FF522752FFA8FFA87DA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8
%A8FFA8A8A8FFA8A8A8FFFD0AA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFA8277DFF5227527DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FFA8A8A8FFA8A8A8
%FFA8A8A8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8A8F852A8FFA8FFA82752FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA87DA8FFA8FFA8FF52F8
%7DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFFD0CA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF7DFF
%A8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFFD0CA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFFD04A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFA8A8A8FF
%A8A8A8FFA8A8A8FFFD04A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFD0EA8FFA8A8A8FFA8A8A8FF
%A8A8A8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8
%A8FFFD0EA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFFD06A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8
%A8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FF
%A8A8A8FFA8A8A8FFA8A8A8FFFD06A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFD10A8FFA8A8A8FF
%A8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFFD14
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFFD08A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8
%A8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FF
%A8A8A8FFFD08A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFFD18A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8
%A8FFA8A8A8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8
%A8FFA8A8A8FFA8A8A8FFFD15A8A8
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=100 RasterRes=1200 GradRes=300 Text=0 Stroke=0 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:CreateDate>2012-12-25T17:09:34+02:00</xmp:CreateDate>
         <xmp:ModifyDate>2012-12-25T17:09:34+02:00</xmp:ModifyDate>
         <xmp:MetadataDate>2012-12-25T17:09:34+02:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7aBirYGKrgMVbAxVcBir&#xA;YGKtgYq3TFW6Yq3TFW6Yq3TFXUxV1MVbpirqYq6mKupirVMVdTFUFrOrafo+lXeq6jL6NjYxPPcy&#xA;0J4pGORoBUk+AHXFUmP5geXH0vRtTtpJLu01y6t7KzaJQGWS65cDKrlGUDgQ3ceGKshjkjljWSM8&#xA;kYVU+OKqP1+xN+2ni4jN+sQuGtQw9UQsxRZCnUKWUgHxBxVXpiq2mKoa1v7G7e4S1uI52tJTb3Qj&#xA;YN6cwVXMb06MFdTT3xVBeZvMNl5e0eTVb1JJLeKSCFkhCs/K5nS3SgZkFA8oJ36YqmCSJIpZDyUE&#xA;gn3BocVbIxVB2eo2156oiEiNFLJAVljeIs0J4sUDheaeDLUHscVRaD94vzH68VcBiq4DFVwGKtgY&#xA;quAxVsDFW6YqupirdMVbpirqYq3TFW6Yq6mKupirqYq6mKupirqYq1TFWBfm1BrGp2Wk+XNLhDHV&#xA;LxZr6eZJGto7SwH1p1naPcCV0SOlRyqRirynU9C8wWukHy/q2m3c1tbeY7a+ro8c3x2N8slyyWv7&#xA;dYnMqmjVFQPCqqhf2SP5e1t9LuL2y8spqFlPpFhcQX0lvcTwW8r3cTwxj6wls7+mC3TmPoxVFWun&#xA;2za7bapf6Jcaffaj5ahFnxWaVYr2H1FaNnoSj/VinEPvtvv1VUdZsL2x8p+XtJks7uZ9Q0hr+6vr&#xA;iC91CUahNZwj6usUMkPpPRQsbOaRhdhWuKphpk9vcXdg/wCYEd/cwvpGkrpUxju5445mhrf8hAp4&#xA;3Rm415LyA+WKsl/L3RdH0jz15ntfq8trfvqMlxb3RV/SksZ4IWj4TEGNv3yvyFa1xVkH512Vxffl&#xA;xqNnb29xdTTz2IWC0UtOwW+gd/T49CEUmvbFXlF3pbS2PmCHykmqWmiH9EJHAwuI5V1BdRUTNCk1&#xA;ZOcduFMjAdRviq7zlFqNp5iay0q0ubWXRLjTo9JuY7e9uJp4PUBnk+ueoIYY05MknJXZz19lUx/Q&#xA;F7rGtWdlqUV22mz+ZNcmuSpmjV4Esw8JZ14/unkQDwbpirOvykt9RsdPuNPuPXW2g1LUIrGK45kr&#xA;axXNIPTMnxFOB+E16Yqz8DFVwGKrgMVbAxVcBirYGKrgMVbAxVsDFW6Yq3TFW6Yq6mKt0xV1MVdT&#xA;FXUxV1MVapirqYq0ygggioPUHFVpRTSoBpuPYjFVoijBqFANKVoK08MVaEMQUqEUK32loKH54q16&#xA;SAEBQARQinYbYq0IowCAgAIoRQUpirxiT87taWa9I8u28Wlw3aW1pdXE5hjUi/Wyb6w3BhGaN6lQ&#xA;CFpQ1xVM9F/N7WLvVNOsr/TrS0hnuriwubxJzLE9xC1I1gKioDoGPJ+6lNmxVF+c/MHmDRtR8wPa&#xA;3yLbQ6Vb3VmrwRsto8sk0UsoYDk4HpeoeZI9qVxVMvy/1W9vjq9jd3f6TtrC/lgsr6RU9SSNYYJf&#xA;jaNY43ZJLho+SqPs+OKswMafyjv28euKuRFEiGg2IA9hiq4DFVwGKrgMVbAxVcBirYGKrgMVbAxV&#xA;umKt0xVumKt0xVumKupirqYq3TFWqYq6mKupirVMVdTFWqYq0RirRGKraYq0RiqQaz5G8s6s3qXF&#xA;lFHO1xb3c1xCiJJK9rKs0Ylbiea8kFQe2Kq1v5S8t26WwTTLUPZp6dtIIUVowa1EZA+ANUkhcVRs&#xA;lhZSOXeCNnZBGzFQSYxWiE03X4jt74qp2Ol6dp8QhsLWK1hWoWKFFjQVNTxVQANzXbFUQRirkH7x&#xA;fmMVbAxVcBiq4DFWwMVXAYquAxVsDFW6YqupirdMVbpirqYqgtX1zRtGgjuNWvYbGCaVLeKS4dY1&#xA;aWQ0RAWPU/24qs17zHoPl+yW+1u/h0+0eRIVmnYIpkkNFUV+/wBhUnYHFVV9a0dNTt9Ke9hXUruJ&#xA;p7azMi+rJElOTolakCv+dDiq+y1TS76zN7ZXcNzZguDcwyK8VYmKv8akr8JUg4qiVKsoZTVSKgjc&#xA;EHFW6Yq1TFXUxVqmKtUxVojFWiMVaIxVaRirRGKrSMVWkYq0Riq0jFWkHxr8xiq4DFVwGKtgYquA&#xA;xVcBiq4DFWwMVXAYq2BirEPN3ni98u+aPL2nyWcA0TVmnW+1i5uUt0t2iTko+OgJPz37YqhfzF0w&#xA;69B5WudP1m4tLddXtZVlsZR6dxG4YirIfiXYUoaUr9CqE8sefLnQ9EiX8xdZs21e/wBUvrLS0s4J&#xA;ecy21w8ARYY1d2PNCFovQoDVzuqjfMenaR58vNK0u40iW50ywuk1C/n1C0mtVAjVxFDEtzHG7tJJ&#xA;TnxHHgGDHcAqqHnTVPJ3mXRrTT3tX1O0bVdNSGVrC5ezNNQhicpcmH6uVZCycg/FgSKmuKpjrege&#xA;W3/MPQb++sLdriTT9Qsbe5kjBq5NuyQhiKcvR+scV/l5074qxP8AwnoWhflf5r8hPbfVZILLUL+N&#xA;omaP63CS0kVwjA8m9OkcUisTSgBqjLyVTnT/AMv9F0P8wvLD2V1eiPT9CvbS1tJLmR4itvLbICUJ&#xA;+Ilbliw+zVVIA4jFXolMVYlqfnXUYvPWn+WdM0WbU7WRWOtarEwENiSnOJJCfh5stGKkg8SCK1xV&#xA;llMVa6io3HjirqYqtpirVMVaIxVaRirRGKrSMVWkYqtIxVaRirkHxr8xirYGKrgMVXAYquAxVcBi&#xA;q4DFWwMVXAYq8o1P8yPNmnaPo+r3M9qINc1JtOtoLbSLq7aE+tJEhkdb+LkaR9FTk37K4qmOpeYP&#xA;Mt7aaxp2j+dvLq61ZB7d0+pyRPDcFaqC0l9OqkE05em4BqCCQRirdpoV9bx6Xot1qUUkmqj9I2V9&#xA;ZqBDbataqs0zwxFuL21wSzsm2/OlOY4KtLoVxqupme10/Tn1bRbxprrTtTEjxWl7MvqG6sJkUt6d&#xA;yH9QqVpyo1FkDVVUNC/L361578z3vmN5ZL3ULOxkmtLPULxbJopDPFwZB6LMP9HNUfklGIA3IxVF&#xA;6DqnnLzD5Z1ay1TQ7bStb0LU7drTSIJgFlt7OeG7gVWI4qJUj9NJPsEgmi0ICrMOOjebPL2/N7O6&#xA;H+VFPDNE/wBDxTQyp81YYqxHXLV9f8saTb6tIZLo6tcaRNfQqIZWjEtzYSutKhGmiSrKPhqelNsV&#xA;TaKK+17TXsrmVbXzh5dmBS7UUT1+B9K4CDrb3UTEOnarJXktQqk9zJfa/wCdvKOpxaneaULNr+31&#xA;fQEdTH9ZhiBaOWg+P7QIYghkKsnGtSqnkOtaZoZ86avqcwgsLG/Sa5mIJ4qul2R6CpJPYDriqtY+&#xA;afJvnLSWtNK1uKb9J2rlVtLhY7xI5FoXVAfVjdOXdfhOKoP8o9KtdL/LnQrK3upbsR2ymd5pPVdJ&#xA;23mh/wAj0pCycP2aUO+KsvIxVojFVpGKtEYqtIxVojFVpGKrSMVWkYqtIxVyD41+YxVsDFVwGKrg&#xA;MVXAYquAxVLPM3mXRfLOiXOt6zcC20+0UGWShYksQqqqipZmYgAYqlPmzy3Z+f8AyrZx2OtXen2d&#xA;xJbahbX+nOY3kjUiRRvvQg8h4NQ9qYqoa5ot1olnZ3trrWpSyLqOmQMlxcCRHjuNQgt5VdSoryjk&#xA;YYqlehj/AJ0vyt/22z/1F3GKsyt/JXlG3vLy8i0azW61CX172b0Iy0klKcmJB+fzqepOKsS8vWpW&#xA;LyFMihYI7nUIABtRnguGUAeHGFsVZB5bH/O6+b/+Mth/1CLiq/0bu/1CfzF5e1mxW0ubaK0nM9s9&#xA;0gNlNcEkPHc23Ehp2VlINOOKpPqyeZdP8wW13PPbDVZ1W30+9hjltrK8VSWOnXqPJc+lIWZmt5g3&#xA;UkU6rIqjbW4mF/Lrfl+2kleaQQ+ZfLhaKK4ScKAsyiR0iWZRxDVYLLHxZWPFeSqHltL220fRFvLd&#xA;rWebzHJcm3dkZ0S6vbieMMY2kTlwkFeLHFU61uBbfzR5ev4CY7i7nl027IpSW2+qXF0qsPFJoFZD&#xA;2qw/aOKsZtpI4/zKujIwUHV7ndthtoOnsfwGKrby4gu9T1OfR9Q1K70nVJPVvl0zT7e6t5HFtHal&#xA;UubmOWKVSkA5BQw6gnFUju9HmPmaw1LVNa1+x8t2Fq0EVvc2MNvDbXA2huBLaxJFCIx+20dNuLN6&#xA;bMhVT1dP1Q3Ujy6dqcl+6q0+saBcWttZ6hGQBFcPHPPEom4ijAAkfzFOOKrPI+n6TokvmCAeYNQi&#xA;1vV7j1vquvSK01tI4EMTRIW9OdS5ADxsytRUrUYqpeWtP86P59gm8w+aJlnsrSZZPLyQxx2t0jMq&#xA;rdQOo/eIDQtUepG1FJ4t8ar0aWaCJo1lkWNpm9OIMwUu9C3Fa9TRSaDFVxGKrSMVWkYq0Riq0jFV&#xA;pGKrSMVaUfGvzGKtgYquAxVcBiq4DFWPeffPGneStAOt6jbXN1bCeK3MdpH6jgytx5HoFUeJO5ov&#xA;UjFUp/Ly18walpPmC284XsOu20uo3EMEElqI1FsKERvE1dvi+wwJXpU4qxG087eVkj0/6rZ+ZtGt&#xA;dU1mfRrXT4FkSCGSJqM6R0YRpy/3Un2SHAX4DirKZpLseWLmC6u5bwWXmfT4Ip7hg0giTV7QqGYA&#xA;V4164qhJJn8vRaH5a1dBbvBqv1u01Dmptp7b6yzM3I8WjeM3KK6OKb/CzCtFWez675emgkh/S9tH&#xA;6isnqR3ESuvIU5Ka7EdsVYh5Z8rWfljTPJ+kWerS61bRaxdPHezOshpJYXzcAU2otfHrX5Yqnvls&#xA;f87r5v8A+Mth/wBQi4qwvT/Juj6/otp5duXmtdP8x6dqEuprayGJpJ7O9txDN3XmqysGqPiWgaoV&#xA;aKsw8vxWdx5XufK2uxm4m0SFbLUI29SSSaGNK290nEtKTNGgdSpLLIGUHkmKsD0n8yNK/QemeeIY&#xA;76+W0j1azvGELC8uraxcm2EygKkjKhV2f7KEv9n4hirOtEfUfOSaZ5gu45NM0NGS90zS5F43cr0I&#xA;jmuyahFAaqRJ7MzH7OKpp5jH+5jyt/21JP8AumXuKvOfzCa6W080/VLOW/uX1q4iitIAGkdpPKAT&#xA;4QSK05VIG9OgJ2xVP7H8z7+cWUNxpdjot5eSxWkGnarqLW1y109pFdNEkcdrcCircKoqwNaAgMQM&#xA;VTTSPPVxNfR22t2tnpcU/wCkBBOt6ZQX0y7S0lVhLBbAcmfklCdhuBiqjpk+j6N5m1Ky0polgv8A&#xA;T7a80nS45ljhuLkSXf1j6qrN6SswWL1OG3Rm61xVi13p2u/mP5Y08+cvIkltNbXX1mK3F+sDq0Tk&#xA;DYgOFddiD8xTY4qyvVP07qkEcF55WZlhcSQSR6ikMsbqCA0csXCRDQkVVhsSOhxVhev+X9G1HUNO&#xA;n1LTJWvNEuhdW0dx5kaTjKn7LrPLLxHIAniAdutKgqpnov5t+l5hvLDzdcaPplvc3UFroCWl8t5M&#xA;7yR1dZvTHwhWoObKgDHj8WzYq9LIxVaRiq0jFVpGKrSMVWkYq5R8a/MYq2MVXAYq53SNGkkYJGgL&#xA;O7EAADckk9sVYj508z+aU8rWut/l/ZWvmP1Jo5JQsvIPaAn1DBwNHY047Go/lY7Yqr6/ew66dE0e&#xA;CVF0zXV+uNfg1WWG39OdYICR/eTAhqkf3auRuNlUVojnSvMWo6PdUA1OWTU9Lm6CRWCLcQn/AIsi&#xA;eje6MKfZaiqVwpcRaDBq1vEbn9B69q17cWyCsjwm7vreb0wOrpHcGRV6tx4jriqM0afTFm13Tb1V&#xA;vLLURJrFmyJ60d5YXEaCTgq8/UKP8LKAahkP7dAqxX8vNa07zRpvlW81W3lntJ7fV9Oj/SkLOJJl&#xA;ureW3QtKGV2MFuxVqmvBt+QOKpl5q8pSr578pQaPZ6PbaHO9ydYtZdPheSVYowwCvx22NFpx4nc8&#xA;h8OKq+m2ZtEu5NJs1l/w95hububSbYLHKYJbOSLjDH8K8uNyJEU0DAUB3xVGxatBp+qXnmK2njm0&#xA;LzOkAttVIYxWl5Cht0ju0+BljdgF5Eji9UfiaYqhvL3lDzpZeQdNj1WS1ufN+hzy3lg9r8EUlXcm&#xA;2Z34ik8MjRlqALUNSq1xVNdVu0ms9O896Gj3Aggre26LWW405/jmi4f7/gYeoi/a5K0f7ZxVV8wz&#xA;QQSaH5mtIxd6JZmaW7e0HqEW15F/vSiID6iKaM/HfiSwB6YqlfmVNCl8xNqWpWsmp2V/pluugNby&#xA;n0rm5ha5meCJ1kSMSzRyRmPkQHpsfhOKpZ5SvrQaLZeaZvy+1TTbuKJ7ghprVzCOLozqtzdwy7xk&#xA;9Yg1D08VVuoa7pVu2uaz9bjhu7fXbbU9Mt5HVJbiOLRLE3UcUZ3dzZSSgKP2iMVTBNN/Ly684X17&#xA;rkOnSatJrcH6CubgR+tJKmlWjoIWPxPx5clG45UP2qYqhtW0vzdqHkmQ+VYdPk1aDXdTcx6nEsyN&#xA;bjVbn1Ej5fCrOAK1/ZrQhqEKqV/aWMqMul6Fe21vK4e/0i80f63pzTAV9RbVpYVSVWO8kL8HNSee&#xA;zBVBReXr6QH6t5O02SNdix8vWcG/XZbjVYWPzApirv0GsFxFDqugaJosVweEF5eaBatbmYn4Y2e2&#xA;1OfgzV+HnxDHYHlQYqyBLfSvLrLb+ZtN0mLTnoLbWrSzS1s0Y0Ho3EcjzegSx+B+ZRuh4tQMqibn&#xA;WfynuRZCfUdDkXTpvrFgrT2hEM2/7yMcqK3xHcYqpeRvPd75p1fzFb/owQaTpF0ttYarFcRXEV0C&#xA;gc0MZIB4srbE0DAH4gcVZeRiq0jFVpGKrSMVWkYq0o+NfmMVbGKrhirEta89+SJNevPI+petd38l&#xA;pzu7COzubpXgmBDKRBHJX4SOW1N+tcVQvk2DRfKNvYabo/E+TNWIbRrkFiYLmbcwTM/xlZ23jZ/i&#xA;D1jP7AxVVvdFW3vJfLgkNra6lK+oeWb1Vr9T1GKs0sK+xPKZV/aQypsoAxVM6SeavL23+43zBp03&#xA;+sbPUrcfe8Th/b1IX7csVS/TdUe2u49dhgMEGo3cWneZ9K5Bja6mzJbxzp05cnaON6fbQpINgeSq&#xA;290G8s9T/ROl8EmhE2teV3bZYJInRLyxkpuLeb6yAtPsh2oB6aYq7U/PvkvVrrS/KOpR6jpup6+p&#xA;eyims7i1lgngpKrJLJGE9SOQVV05LyXrSlVUYia3q8KESRw+b/K85R+YpaXYli6kDkUiuYmBBX4o&#xA;32+LiQyrer31hJp1j5xiVtMv7W8t7C+d2RaQnUEs7yC5ILRyJEeZVq/CRyUgE1VRHmawj0KO71qz&#xA;hjlsLx1XzBpEorBcpMywvMimqrMFb4tuMi/C2/FlVVp/K11osEV35YluXmsxRtKur24uILmAChgX&#xA;61JIsLgD9060AOzfATiqH8s6vZx6xxtGY6N5heW5sVcMGttRjq19ZyKf7t34tNw68xNXtiq6xa+8&#xA;pXl3pqadd32gTObnSGsoxKbb1CTPaOvJSqK/xxHpxbjtwGKpVaNpdPRt7VpPKms3zaffaHdoYpLK&#xA;+Yl/Ut1/ZjdxyZARxb40INQVUZqOleZNQ0PzJ5Hg1bjeiwjOm63MvOYQXrTxLFcD9t0FsymUbkMG&#xA;pzBLKsP0XyHp58waWnmJIdZ1nSPMUVv+kWiEfIx+WIJdo1+Gglt42APda+OKp3aeXPJCeUPKPmTU&#xA;NCt9Q8w29nYHSSsai5nvDaIkKcx9viF5VeoQLz241CqV65o+rXDW80N9fPB5JmutY1qHRyV+v6pd&#xA;O121hbqTUrF6rA8uR4uF3YsQq64u9P8APF15U81w3mu6dqy2bSjyrpkierwuN1lnYlIoY3G6ySso&#xA;kXjTfbFU4nW9gube2mg8zxzXRZbZH1LSVaRkUuyopvAzEKCTxHTFXNdanaT/AKPl+tOL5TGNC8zt&#xA;bvDehhQpa3tubiNZSAawyluQ6Koq+Kpp5e8seYYdGh+t67qGmsfUkXTkNjcLaxPIzRW/rT208khh&#xA;jKozGRqkbGlMVYpo3mPzRPrGqnVdU1W08trNHF5b1SCKxuZNR5BuRigj09pXFELhkXjx3qR8RVS7&#xA;81Lmxk8nzz3vmDzcYbOaC44W+mm0ZmSVaAyixs1Ub1BaSgahoSACq9esJluLC2nRZVWWJJFW4UpM&#xA;Ayg0kVqFX/mB74qqkYqtIxVaRiq0jFWl+2vzGKtjFWponlgkjSRoXdSqzJxLISKBl5BlqOoqCMVY&#xA;V+XWkX/ly4uPL2vahJrGsBWuLDWrlR6txZMwLwhzyf8A0eZzyQu1OakbNxVVR0/V/LzecNe/LK8j&#xA;lnF0j6rbJ6cgjSG7Iknj9UKvFluGaVHBoOQUMGWmKqvl7TvPmt6TrOj+b7eKxk0+7RfLmswsJJpP&#xA;Qo0N26ii81ZVY/Z51ZSqjqqi49SltrLSfPXpiG11SztT5ktk3RY5UVo7sE/8sxcq57xEk/3ajFVm&#xA;oODc6zbKC1xdeaNJW3iUVLejBp1zLT/UggkkPspxVO/ME507zFo+rTjjp4hutNmuP2YZr2W2a3aQ&#xA;f77Z7f0y3ZmXtUhVj2hT/mfpyafcedJNIubmbVXtIUtbZ/VS3uGYI6T+oqrsNl9IkrTkeVcVZL5V&#xA;WW61TXtY4+nb3V2bS3QmrEacWtZHanTlMj8R/KAe9Aqx7S/OflTS71tHk1jTtW0TWru4ks7i3uIZ&#xA;3jlv5nnkguYlZ6xM8x9OVRxA+FwtAzKqfmaGTR7TVvL1vK0mjmyt7yxt5Pia1P1xY2hjc7mGlOCH&#xA;7HQHjRVVR915Wn8yfmTFr0upXNna+UJvqltp9u7KlzLPax3Ekk2/HjxuETiF34mpoQAqoXUaP5J8&#xA;3ajGf3lhqGoalp1ytCFuNPPqI6kgghZoCj+PxKe+KvRqYq8a82arqOn+ZBp2l3elRrD5qt7y/g1S&#xA;8S1lFtJZW0heFXILK0ssgqoJ5UADb0VT38zdT8w6D+ntR0SaG11G80Ivpt3OnqIk2kPPczR8TVTJ&#xA;JBdM0VaiqNyBGKqOiQ6knmGFNWkin1SPzNGLyaBSkTTjykgkaNWJIUtWlcVRn5dQx3LaNLOvNtP8&#xA;r6M1kH/3S14JxcFR05OttGCfBaDqaqoPy9L+ZccHlJtCstOufLdzpC3esTXlxJDcSX9yqzO/NY5m&#xA;DPJIXrwbkS/Kh44qi4NYj8oQpo0dn5Z0NFUSrZNrLW7EN8IkKtYqzcuFOR60xVj3mifyh5o1LStR&#xA;12Pype3Oju0ln6nmAlPjG6yJ9T4utQG4sOo+dVUTpepeUoL+4hurzytY+WL+HhqGkQanDcQNOpAj&#xA;ljheC2jQsPhk/moh2K/Eqr2t6b/ynp1vqk0p0TSfLtjq+tqjF575ZIZKQszEHh/orNIOVZKhSQvL&#xA;kqmsh0Wzee6826va6ZrOqWzQwW5u47c2Vqw4mK0dmRuVaGSZd2cDoqoqqpF5C1by75QhsPKCeYbf&#xA;XtOnk9HS79bqO4uVllJItp4kZyEr/dyL8P7LBTQuqnH5jebfMGkw2tt5VjsL/Wjd2a3thdz+nJHa&#xA;XdwLdZQi/FxaVgnP9mtaNirMt6Cooe4G++KtHFVhGKrTirS/bX5jFWxiqVeadVv9L0ZrvT4I7m9M&#xA;9rBBBMxjR2ubmOCjOAxX+860NPA4qoqmm+bNMtL2Caeyu7SYvFNHwW6tLmOsc0TLIsqcqFo3VlZS&#xA;Dt2OKrx5Y1P1DKPMupCUrw9T0tM5ca1pX6l0riqC1mG90pIA/mTWLm7u5BDZWNvFpTTzPSpCB7RF&#xA;oqgszMwVQKk4qv0+ezk/L++sba3uLePSbOfTGgvPSaYG1g9P4zA0kTVFN1OKsZ0m9h0+a3ur2sdt&#xA;Y6rZX1zIQaQ2dx5dWyS5f/ir6zyRn6LQk0AJCr0TzNDFceWdVidFlils5wUIDBgYm2p3xVg/mHzb&#xA;pGkeUPIFzrF5xkvrvS+EjcpGdjCC7mlSQOVWbFWUaJetod++hanEYVvb28uNK1AbwXBu55LswE0/&#xA;dzJ6jDg32wvJSfiVVUrtfMGseWvI93psejTan5i8qafbKNOtmHG8iCmKGeByK8X9ByycealSoVvh&#xA;LKpZr02t6tp13r19ol1osL6VbQtDePbs/rPdxylAIZZG+Efzqp9sVTq/muYofNiW0720l3r2nWTX&#xA;ER4yxx3lvpltI0bEHi4SU8W7HfFUJ5r03zIde0XyZo8dnbeRr7Sb+HWYFVvrSW8SRwH0NnHIfWU4&#xA;bGp5cq7Yqx2fUrXz35HbULLzn5k0qzGqJZrIbGFbiWW3mB4xR2VpHO3MDbi3wn7a/Cy4qy3zT+a/&#xA;lHQNOtRqtrqlxBfzxafSTSrxA5n+El/WhhRtq1Ras37KnFWA/mdH5vstH1PSNA0saj5b0a41FZp5&#xA;rijWNrJ5fFI0DAsY0+vSsgqacVjFBxxVm8I/53af/wACwf8AiKLiqTflt5g1G11m3g1XTf0boj+W&#xA;dFSw1ueeJYrh7eN3ZUViDWt0QQKleILfbXFUR5C1j8zjDptlb6DYS+V4tC0yTTtSmvHgeWV7dfUB&#xA;4Q3Jr248BSleR5AYqzPRrEaHpd5qOs3EK3ty732sXnIrCh4gBFZ+P7qCJFjUkCoXkRUnFUsufOeq&#xA;LAdQSysLHSJGItLrWdQbTpZlH+7BCbabgjdV5sGp1VcVS8/mV/y+eV//AAoP+zPFUpv9XfXBr9tZ&#xA;zabf6vr+mxaVaWWk3315YlT6yHurqX0ofRiT64K/CelBVmC4qyFZJdU823l9o0vKK00+fTprtlHo&#xA;C9EyvGkbbmQxUf1aDipou7cgqrGLK01zW5fLOqWvnW7m1SwtIdY1Hy1WxQ3MVzBVY2WKODijv8HK&#xA;QMADUcW3xVjNjDLrHmiHzVrflZ/LvmW5TSUuUmZH58Nbt4hIgDc1JjRVPNFNKUqN8Ve5nFVpxVYc&#xA;VWnFWl+2PmMVbGKvO5fM3mTVrrXdP1PRl0+w0fXdHtrC8EyyGcNfWsvxKOh4Oj+wbj1U4qmvmby/&#xA;51XzVpWreUby1s7W4nVfNNvcpyW4gjWiSKAK+oq1SqlSfgqeK7Kqb+S7r9JalcXHlzQ9Z+t3T3EV&#xA;5fSkTiNwoWNgbK4pwpQUc4qoWGk+b9L87aUdM8p6DpugzQzprF9ZODcKPhZFDfV7Vt2AooVge5Wg&#xA;OKp/5Wtorq18xW0wrDPqd5HIAaVVwqkVHscVYn5e826TH518seWdQcvrSaXq2msRExSYWl5Fbo7M&#xA;F4j1V0+V+PRencVVZj5Dnt7XyNYzXEiQWtrHLykkYJHHFFI4FSaKqoi/IDFVreTbiCWuiXdnFprT&#xA;C8h0++szfQ29zufWs+E9sYeRYsV3Fd141aqqSW1j57tNL0uPzlqFpqOoHzFG1rNZxGJRaszmJWBp&#xA;uOw7CgJY74qnlr5O1+L8xNT8zPr8raTf2ENlFo4ijAieFmZXEhBrxMjsu1auQdgMVYto+h3ujflL&#xA;rFreaveazJ+lLxRc3zh5AsOpmAAHrRvS5nf7TGlBtiqN83W/m+bTfNQ8p21td6tD5h025EN5J6Uf&#xA;p2tpp1wTy+EfaiFasPhrQ1oCqmPl7zjoHmPVLzzXb6jbnQfLlrNps14j/uWuZminvCHcKTFEsEIj&#xA;fiOfJuo44qprFMvl/QJZYXt/rfmOS8jilUpIIru+ubiLmh3VjHKpKncdDviqI8i2OvWOpec38ya8&#xA;dWsrfVQ9ktyiRx2kItYboUb9kIs6jwHDl1Y4qx5NWGqnXLjVYpLXy7d3MF/cacoJvL/6zBFbWFiq&#xA;Aqf36WyySIaFi4jPwhyyresa7pug65plnreqxaV5w1q+k1+OA2k17aR8bA6aLc+k8RakA+3z3dSa&#xA;AELiqgIPKwuBMmqaHZmh5Gy8umNmJ7s0r3B+6mKpxZ66jSW9lb+dooeZWC2jbTo4Y6n4UjUuEQE7&#xA;Ko7nYYqgL3X7aTzz/hGa/k8zearKOO8ttKmhSz06Bj8Yubl0Deo0S8WUUahZSq8viVVP9a0FNI8v&#xA;a15ivHTVfMdtY3FxHqFzEpSJ4ImkRLaFuawRK6g8QSx6uzt8WKt63b6lpSW4PmPWbu7vJfQs7K3i&#xA;0j1ZXCNI3H1bSKMBURmYswFB40GKpfLB5pmjMNwnmiWB/hliEnl2Iuh+0vqQvFKnIbckdWHYg4qm&#xA;1nqt5p9lFZ2Xk/UYLW2QRwW8T6WqqqigVR9dAxV5ytz5X/LS9XzDrWjyHVxougabdyWUPrzCaVrm&#xA;CWrKeA2tUUtX4uKqKmmKst8zWV5qXmYrp4U3Sada3ttFPyiV2tNSjuhG5I5Jz9LjUr8NenbFWU6N&#xA;rFtq1iLmFWidWMVzaygCWCZPtwyqCaMp8NiKFSVIJVRhxVYcVWnFWl+2PmMVbGKvPvOlynl611q9&#xA;1waevl/Ur+1uI7m41C6splmjhto41UW1tM/JZbTmCj9NzQA4qlyaro7AFdT0xg3QjzpqZrXw+DFU&#xA;6m0fU7OIXV7pt3JYpQ3Daf5i1i6uFj7yJA6weoF6lVbkR9kMdiqnth5a8t6hZw3llfahcWk6h4Z4&#xA;9X1JkZT3BFziqmuqeWPLfknVtd0WZL7T7OO7vpJDePcCaeEN6itcytO3JnTh1ND2xVpbiz8o+Uxq&#xA;2qPb3t2JpXW4h9OFGm1a99URRSTPRIjLOo5M/wBkcjiqvF5FstQ8gDyn5ijW4guISl6kDsFDvIZf&#xA;3clEb4HPwsVFabjtiqQadB+UBpo/lvy3Z+YZ9OP1W4hsLS1nMHogrS4ubkxxBvhp8cvJj0rviqYH&#xA;QfLTU5fliDQ1FbbQ9iO/+9WKrxoflz/y2P8A076H/wBlWKr9Xh1C48syaBo/lC702GRkEKK2lw28&#xA;VZ1ldikN21BXkx4qSTiqdaFcW0Go+cJ7iVIreDUke4lkYKiIuk2TMzsdlAXc17YqxvQ4PKSajptr&#xA;Sz0PQb2eS68s+XqJbyahcf3zX0sJofhPxQxU+H4Wb4uCxqsg813MN1q+jaTbsJLu1u4tTvhUBbez&#xA;gD1llY7KHf4EHVjWmysQqx2zlbzNqd1p0CMNH8wXY1m9ZgVZ9Jhtre0gVhT4Vv57Viob7UAetCdl&#xA;Ve+dYvzCNy+0EGrWCzOOim40u7toq/6006L9OKp55jTVrjzTpFjp15HYM9lf3D3LW8dxJ+6ltECI&#xA;XpwVvWPKnWg8MVYb5P8AOUWk+f8Azbo3mrz/AGWoPA1vJZ2E8cdkLZWT4lDtxjLD4QyIzfzGjMQF&#xA;WY3/AJx/LbULOayvde0i4tLhDHPBJeWzI6MKEEF8VY55H0061Hf6pp/mS99KG6m06yuoo7CWQ2du&#xA;1Yo2uLi0luJApc7yOSepqSSVUZqn6TtbjWtGu9TuNUs5dDnuaXaWysr1aMhTbQ2+xX+auKqGl6hY&#xA;2N22pahJxi0fy1pr27sCwj+uPcCYRoKc3mNpCvEfESoA67qsF1Hy7+buq6VZQ64mjX/nN7PVrjTY&#xA;ry2jlht4XutPohDB4vVVSwU0IAoGLbnFU4m0C91KPyxdeWvKflq4tmZ4/NaXlrHbPFPCnCWFVEcz&#xA;R8Zgy7czy49VqSqmuraTqWmWNutt5c0XSLWfVdH+uS2FwxkYJqUHD92tlbhyC23J9qnFU+ZlH5iq&#xA;h+02kEqPELdCv3chiqp5e/46/mj/ALacf/dMssVTs4qsOKrTiq1ftr8xirUgkMTiJgkhB4Ow5ANT&#xA;YlQVr8q4q8tittWXQ38v/mH5t8s3956zTTWuoWyueHqepASDdWnahH7oUG1T1xVEx6zIPN9pqt5+&#xA;Ymiy+XLe0lhutCtRDEkrN9k8WuLlie9a1FOIHxNirLfIlh9WtdQnhtZNP0u8uvW0nTpKp6Ft6ES/&#xA;DASRAJJhJJ6YApy3ANRirHvMekXC+c5Yo/IuhXfl2SzlvNQ1/UDDB/pBar+o4gnb7NS1UNa15ClC&#xA;qgPK/kzTtT/LSPR9M8q6T/hTXUXUGtTq10XLT8ZQzSLZMwePiq7Ntxp2xVP9b8l3WueXrXy7qflX&#xA;RptFsWhe0shqd0iRm3HGMLwsVIAWq+6kjFWQxXHneONY49F0pI0AVEXUrgAACgAA0/YDFUh0aHUv&#xA;LerjRNG8q6PYS6wt3qsxt9QmWNmgkgjlL/6BWpN0vEAUAB6bYqyQXnnv/qz6X/3E7j/vH4quF558&#xA;/wCrPpf/AHFLj/vH4qh7u382XyP+l7u18vaPEvK5bT7h5riRQDyBup4bZbdKdSiF+6umKpZbQeX9&#xA;bOnaD5btVbytbzi+1W9jjYWlyYCGiiSdl43Ty3HCSSRWYFUYO1WGKpUG/L641byz50893dmnmDVx&#xA;HJ5Ut7hykVpG8frJFGCQruvqVeaUf3hXjx+BcVULHTvN2ua5b2traWs3kbVb7VbjzPqvr1uro219&#xA;NBa2xO5MPpRRJQVDRgpVRsyrN/Jz291qPme+hUFJNU+rxSbEmO0tIICgIr8CzLKQPEnoScVSK30y&#xA;ef8AKVtUt+U+u39pD5ikmoC82oxiO+iFOnASRJGi9AgC9sVSz8144tbl0Q6f5tXyoL/TL17LXDIk&#xA;QZGudOmEYZ2iP7xFr8LBtvCoKqY6Pa+Wp9WLab5/F1rt+iRTS2zaE11ci3RmUN6dmXfgvI03oMVR&#xA;uneb7PR9Q1jSdf1Waeazu0WznuIAJHt5LS3lqTbQxRNSWSQVC9qHpiqVebY/KEHkfzH5u0rVLi0/&#xA;0e7ulvLfUb2GFb1UKL+4Eyxc/WVV4FN22piqF1SfzTqXmu91zT4bO68h3XlmZbfVYpuUjyPylXio&#xA;HfwpTjvy5fDiqldywwxJLO6xxJZeTmeRyFVQNXl3JOwxVNrXzp5W1rzXpWpaTqUN9p8ceo6PLdws&#xA;GjS+kltJIoWbt6q27+m32W24k8lqqjxYebbDVNak0y00+W11S5S6hnuLqaN42FpBbtzgS2cPRoOW&#xA;0o5V7Yqw/wA8aF57sb608y3/AJnN35f06S1l1HQ7ayCCQx6hby1iVXlc8QlRyYsOPGtGbFWSwa5Z&#xA;an5705baO7jMOl6jz+tWd1aA87ixpwNzFEH+zvxrTv1GKqH5da3pWrTeZ5bG/jvnTWrhJzGwYrwj&#xA;iiQe68YqKem23TFWXnFVpxVYcVaX7Y+YxVbJGJYnjLModSpZCVYVFKqR0OKvMvy+8wfl35Qk1byX&#xA;b6teXOo6ZdNPqVxfRSvJJLOAa81SjcVCrXvSoqMVQWpeWNOlX80NasdTvCNW0qKeKWK5fgF+ptMr&#xA;R0P2W4gDwUlRRTirPP0npnlHR9O8vxXMmq6ykCQabYSzB767KgqHcncJ8JLykcUAPhTFWN3Nx561&#xA;dPLVlezabcaVqep6rpXmi1kt2ZZ4oHuwqQgkkJ6VqwBJ5cuJNRyGKpknmbSPJWuaV5B0fyvqLaat&#xA;k89vc2EBlt4wr7qzE1ZiSS7k15Mta8qhVCaBD5nvfPGsm78x61YWupJ9a0nS5LO1iSGG29OOUK88&#xA;VypIadfsha9W5HoqmugQeZr7yomryeYdUuLwxzSC1t4tKUyNE7hY09S0Chm4gDk1K4qhPIljrPmz&#xA;RdH8432p61pGpS2k0cFrMNLYrBcyROzClkvJZPq0bKWUGnz3VZYPLes/9TVqn/IrS/8AsixVJ9N/&#xA;Mvy7pWh6AfNmswWmo6w0sNtJccYvVaF2Uu/ELHGKAVY8V5EDuBiq3UNZ8t67qdzqdxcW+oeUfK9v&#xA;9ZmkjK3FvLqMgLAfDySR7aAAqor8Uo/aUUVT+LzPrLxq48p6svIAhWk0sEV8Qb7Y4qwaGyubvW/I&#xA;/le68pWeuWvl+whGt6tOyONMvBahFjSoZHf4eRQFuqN8PwsVWaeZEd7/AETyzZynT7HUfrDXYtP3&#xA;U31e2QMY4nSnpK7uqu6ioBopViGCrENH1yLX9F1D9N6RP5R8keX7h9PGjSoyy6gYyY0QiMCsLclU&#xA;QxcvUf4eTLsyr0XyxrFvrWgWWp21tJZwXCVS1lCq8YVinBghZQRx7HFXnVn5s8zWf5XeWdO8kadH&#xA;rfmwaPpcj2spKwQQPboTJPKSiKzBSEQuGb7QBCnFWbeYNP1+8g0W8sYrX9Kabdrdy2s80iQNztpr&#xA;eVFmSJ32FwSren23GKqct/5+SN3XRNMkZQSI01SfkxA+yOVgq1PuQMVYdqGp+Xdet9Qv9HFvqFtf&#xA;zQ6P5r8uXwoI7y4dLa3eeMcjHLFKyxylahkFQSY1xVS8u+abyz/K5LXztNpuk61c/pHSrCytWWGJ&#xA;2s2lgWGJK8ar6JUBNvs9zTFUVczTaPZ2Oqzw6ddabqml6bYGG/nliPrWouJwFSO1vPU5LKW7U44q&#xA;lEGu+XrbTLzS7XQtCttP1CRpry3gub2JZJXIJkPDTFo4IBVhuCBSlMVSjRtZnk87XcesXDW3lP6n&#xA;GbWS21nXZ5vrXI8hycwsdvtVjAA48STyxVlDzif8qbyVZZ54TeXQtpbt5pJjANVcQcmuCZSPSC8e&#xA;R6UxVG6p5osYPzc0LQXhuTdTaTqDJOsLmD95NbOB6gFNhbNyPQEqOrDFWSaVoOi6OlwmlWMNkt3M&#xA;9zciBFQSTSGryNTqTiqMOKrDiq04qtX7Y+YxVsYqluvXcmkaPqWrWGmNqN/FAZRZ24VZrho1+BOR&#xA;6/ifAE7Yq87/AC8/3N6BrvluYjT9afQ9PsruxlKtNbs9gYA0iKaj+ah3HQ0O2Ksr0fR/K2p+cv8A&#xA;EN5pq2nnnTLb6rdIWYlYpKhZYz8KyxsOQSXjWlVbiwKhVBRnTJLH6jqSazaXdhq+pXtvNY2OoEgz&#xA;XV0EZZYreRHV4Lk9CeuKpzpnl6y1KxhvrHzFq09rcLzikF0RUdCCCgKsDsykVB2O+KpT5V1P1dWs&#xA;XF1Jq0unw+ZrZmDpLO31bVbZY4mNVXn6SoByp2xVM/ye1HUNQ8hWE1/pdzpFwsk6G0uxxkoJnIcA&#xA;0ahB/aA+6hKqB1VZLP8ALbz7o6vyt9Ft9RtrFtwVt5NPW7ii3J2hFz6Sf5KjFUDc3v5Wy+Z7XS/L&#xA;UGmxeYNE1i0i1FbS2jhljD81ZQ6ovIA/C/Emh2bfFVLUtVvPLHl7QTqn5f32t3+m6iI7OeIWU/ov&#xA;cTMvrRGOaaVTwb4eSKOVASpocVZtdM3mDzPFp6g/onQXjutRO4EuoUElrbmmzCAFbhx/N6X+ViqF&#xA;8++f00SO603T1eTVTZXk31lQpjtJIrK4urcy8gQzS/VX4p4Ak7U5KpnqJtvJfk24k0q19drRQUjk&#xA;chpp5pAplnlozMzO/ORqEnfFV0Fpp3le1u9d1i5a81a74Ld3gQtJK1aQ2lpAvJgnJqRQrUkmpLMS&#xA;xVYlbed7P/laGmaF5ttp7fWtQt3u9BtHQGxsxuFQzV4y3kiq3JxVU/u0NWYuqybyVexWH5eQX0qS&#xA;SRWsVzM8cKNLKyxyyMQkaAs7GmyjriryHyP5v83S+QbPVPJVrALsHy5pl1FqyvGCiqtg5j41qrzU&#xA;+L+Qkj4tsVZk17aQTxy6pHq92l5da7NfXdnqmooLSDT9T+rIRawzJyiVZlB9NaqFrxIqQqjtR0jS&#xA;rjXtJ0uz1LUrSxv4heRaoNX1KRbwKef1W1b6w8fJkHNy2/p/3YJ5NGqhPPlp5Y8mQRXek+XpTe+Z&#xA;tf0t9Rm023MjM8N5FOZJePQERNRV6u1aVLHFUHdeVLPX9Q0nTdW8v3Dvp2t6zctqU0CelHbXTXzx&#xA;PFKxavKSWB1FPtAHtiq/WrjzTN+X/kWfy4IG8xzRxPYm5r6PrNod23xfjxrtypXbFUzn1r8ytG8t&#xA;Jq2vRaOZLWOJ9Sjt2uBQEqJSrN8I4gk1O2KoTz55o06Pzp5M0CaTUDb649yfU06S6hjakQ9ItNas&#xA;hZQxqQGoo+JqLviqh5XtbDzJqvmLTdQ0bWbG10K+S1ikvtVvporviqzBvSNwy03V6EMpVl36gKvR&#xA;SBWtNxsD88VWnFVhxVYcVWnFWl+2PmMVcMVXDFUtsfKvlyx1291+00+GDWNRRI729RaSSKm4BP3V&#xA;p1oK1oMVX61oMWpGG5ikNpq1nyNhqCCrRlqckdar6kT0AeMmh7UYKwVQ0tt59SF3j1PS5pFUskR0&#xA;64TmwFQvP68/GvSvE08MVYPon5h29nYr5y1Kzl8p2Gpan+jdU0XVHCB5zIIVvrYkKQy/7vBUKVVm&#xA;6pV1UTbxeTPJv5j6Z5a8s6etnqWr6dqt5HGkUxtmuLiS2kjMkqh+Mf8Aojj4dkAAoKiqqE8v+ZPL&#xA;9zfvpX5ta1pTebbKJZZtEmkjTTLZJNkIWWkUlwy0ZuTMVDfDxBOKsh1K98p6r5b1Tyl5DSwu59Yt&#xA;p4JjpZhFna/WYjCbi6kgDIpC/ZXd3pQCgJVVD6jZWcHni/nhgjjnuNZ0UzyooDORBIAWI3NMVZjq&#xA;mteYP0rc6ToVhaXNzbWkN1JNfXUlugNy80cQCxW9wXobZi269qeyqGZv8JaFaaVYU1HzDqEji3En&#xA;wG6vZKyXF3NQsUiVmMkhH2Voi78RiqR+cvKslt5c03R7eX63q2q3eoCe8l4xtdX11ot+hdv2VqaK&#xA;q9EQBRsoxVNPNfmfy9qvkTUpX1KDSCjRwXA1Q/VzbXXqIyQXKmrIWam4qCp5LyWhKq3zBrEVzbW3&#xA;6ftJ/LupWUy3Gla8n+l6dHcNWJWNzFxpDIsnBxcpFyViBvRgqnum3th5ksbvRtesYV1K2Ai1fSZK&#xA;SoA55JLGWA5wy8OUb07UNHVgFWK6P5bh0/8AMrRm0LzFcyeXrbSdQtX0JJluLZZ7O5gR/UZi7GTn&#xA;dktyPMMoHLjVcVVNaAXWNeAFANV8sAAdAPrtviq/yvX/ABFYUFT/AM7ZQHYV/TsGKsX8jya7rVja&#xA;zeYNGg0rRfM+p3MEejQyM8LRLbzXtvqFqwKPbyM1vuyEByfVVUY1ZV6L5Ivry+8qafc3kpnuSjJJ&#xA;M1Az+nI0YZuIA5ELvQdcVedX+u+fbjzJaadDDr2o6RqFzqwuLvTG0yCK2Wxv5YIIVeWGNx8ES8uc&#xA;6lq/CWPIYqnWp3l3Z2WhWlnouoaUdClRtPW6tn1CKSOO0ltODNpb3roVSetZKVp3xVE6Z5s8xSQT&#xA;Xt1DDqen28zW2qW9lZ3lreWjemkqsbe7/eXCmOVWYKisARxD9MVV7TQoEt49W8kXsENtP+9SwP73&#xA;TJq1qUVfitnJNC0O1ftI5xVLkm1b9MXn1G4k0TzFeg3MuiahElzp928EEcJltp4/SdvhSNTxlBUD&#xA;k8QruqmnkHXPNmtaJJd+aND/AEBqK3M0SWfqiXlEjUSSo+7/ACqchsRirIziqw4qtOKrDirS/bHz&#xA;GKuGKrhiq8YqvGKrhiqD1fQNF1u3it9XsYb+CGZLiKK4RZFWWI1RwG7j9W3TFUf6cZkWQqDIoKq9&#xA;BUBiCQD4HiMVQs9rpdjNd60tkpv2gCTzwxBrmaOGrJECBzfdjxXxOKvMr3zBL+ZukeVrrRn1/wAv&#xA;OuqxT3kKWs8KmCFmEnqXPpmAgFfh/eEdipOwVTXzDc21p5ovru6lSC1t9W0Z57iVgkcaejIOTu1A&#xA;oqepxV2m+dYl/NDWL261vy+nlOfTrS3s7hNRhN080Ekr0ZOdBQ3EnLtThQk8sVRPm3zXpV1cXl9o&#xA;GrW11Pp3lrXZTPZzxzGCStm0TMYy3E1jJWvhiqbxeXLG51nWvL0013Jp31HTbyAzXdxcTQXLT3g9&#xA;eCa4eWSN1NvGy8TQFa064qk2maHo3n61lh81WsWoQ6r5b0C6u6jh++Z76T1I2ShQhmJHE+3TFUw0&#xA;76p5t/Ki6sl1e1S3j+tWB1iJIzbiLTrp4UnaNHjjAaKBXYKyrvtRaYqhbvVL+9k0rWYtV06Y3I9P&#xA;QvM9jC8Nt67tRtO1CN5rljDckBQQ4IkFKLIE5KoD8rfKOneWNa05IdKbRLzU4vMV1dafJIZWX/cl&#xA;ZJEqsWYMqwIlCuxG/fFUz116a5r6AfH+k/K78Tt8DX8C8vvRvuxVgkl/5i1SG/8AM/kvzHZPpHl0&#xA;eaLfVbaNedwsl5fS3McsclaFOCxSoykUCbc+XEKvUPMcFpoy+UVgjaPT9LvxCiJSiodNu7WCMsxC&#xA;jnJJHGpYgciBXfFUB+TWq6nqPkS3fUtIutFube4uYDa3i8XZVmYiQD7VDy47gbg9qEqsQu9d8xwa&#xA;pFZfVNWtfKFo/mPUdX1rTDFT1IdUnaOM/BJKeKow4KVLc60IQ4qj/L2v+Xdc0Wx1a21LzckF9EJY&#xA;0a01CSgPjJDbSxN81cg9jiqJTU9R0eK5l0dbpLa/uuQuNXtbi61C/vPSSP07ayL2Uqxxw29WeQjZ&#xA;SePH48VQ2nQefrbXV1iDTp4Le6b1NUsILKyhS65D+8ZZNZk9Kf8A4sC1P7Yagoq355/MHS9KtNL8&#xA;5LaXl7p+lNdxahbW8LNPbzSRqgiuENPQYM2/qED51FVXoNjeR31jb3saSRx3USTJHMjRyKsihgHR&#xA;qMrCu6ncYqqnFVhxVYcVWnFWl+2PmMVcMVXDFV4xVcMVXjFVwxVeMVSHzx5J0vznoR0XU5rmC19e&#xA;G452cphk5QuGAJFQQfAj3HxAEKsNsm1hvMmt6ZN5R8yvpmnSRx6dqUGu3FLlWWpf/SdQtlI8ODNT&#xA;o3FtsVTu31uLyvZ32oP5U1m1tiBNf319f6dMQsS8QXmutTkYKq9BypiqcQecdXnhjng8o6tLBKoe&#xA;KVJ9HZWVhVWVhqFCCOhxVJvMXm7T9Us7PT7+3l0lm8w2OlXun6g1tzlfhFfLGpgluI3V1eOoDb7q&#xA;Riqbz2Wn6z5s8z6NcSkxXOiadbXaQyGOVUml1AH4kIZCVbY4qx3yD5auPKvm258m2uiXc3lGDRLS&#xA;CLXbyVJo5pI57mSSNlPXn9cYcABx4/Z4spxVE335WXtnc6DonlKSy0fyBDcSXPmTRhEzS3jF1kVT&#xA;ISWdWKhCCwoux5r8GKpt5o0PR7bXdPu2gVLLX5n0rzBAKrDcLPBI0EsqKeJmE0KRLJTlR6cqYqxb&#xA;WJfP9v8A4i0vVLAyaL5X019U8s+cPWpdvdQJI0SyCp9RglY5dhyAJcESgBVk2tWMmp+bNZsLa4ih&#xA;1Eadol7Zib4lZ7HUbu4XkqkMY+aIrlegbFWNXPm7yV+gvO3k2wsY9F8zW2lahqGsaTDGOHqTQsXl&#xA;E8arHLy5o1djxYVAIKqqnvmT8yfJUfmHU/JeuWt44h0767fyfUrie1Ns9Q9WhSRuKjdnpwHTlyBG&#xA;KpW3mXVrDzfb/lynmZDq1xZyXNlcT6VNPcLbKSE9S6N0IZJwik82h4kr8QqaMql/lvXRrJtvLcel&#xA;6toNlpfmGfTrqSe5kinvv9Au7xpXnhdJeck3GZ6NQ1U8mBICrJr3SfImn8xd61dWn1ZT6iSa9qEf&#xA;BQK/EpuxTbFWM+UNbuktvMXmPUPLV/ZtpkjWvlt9Qvby5lvop+IiSFLxpXha4lES1VN+SruUOKsw&#xA;udU8820LTtoVlcJF8UkNrqMrzsoPxCJJbOFGen2VZ1BO1RiqSX/lfy/5y1zRfNGlazNayaVMJL6C&#xA;xcJ9Z4oeEF6n21aPmVKuKhWZSBXZVnBxVYcVWnFVhxVacVWr9sfMYq4YqvGKrhiq8YquGKrxiq4Y&#xA;qvGKrhiqX+Y/Lmi+ZdEutE1q2W7028XhPAxIrQhlIZSCrKwBBG4OKsI8yeVR5a1PydJ5G8m2c31b&#xA;URHfXMAit3gtGtZbdjJJx9RhxmL8iT8SgGpYYqgfzE8p6xy1XW4PKFn5rvLfWbbU9EgmuDHIo+pW&#xA;lrKfTCgMA1sSVZ6bKxB40xVnWheR/LmneYtQ82waeLXzDrcUS6nJ6jSU4AVRd+I3Ucio+KgOKsmB&#xA;xVuuKsS/Ne41G28haneaZYzajqNiYL2ztLcBpGmtLiO4jPEn4lVogzAVJFaAnbFXeZdQudR/KrV7&#xA;+6spdNubrRLqWawnKmWF3tXJjcqaVXp/Tpiqn5g0lfMfm2DT5JpbFNBtY9RhvrRxHdfWL4z28YR+&#xA;LcY41t3Z0NVkJUMCqlWVS3VpLibyZ56GpQWzazp1ldadc6nbxiNrqJdPF1CzA1ZKLd04cmAapHWg&#xA;VX/mL5vs7TR9egAS2srGD0Ne1u6jY29slxGpWGNF4vczus68I1IUchyYGisqo+T9W8s6v5ps7zy/&#xA;fQ6nZ2+gRQJdxMruqmYFUkp8UbMFqUYA+2KobUPI8HmrzHe3MmqXlgNC8xw36JZSemszJpNmnCSm&#xA;/cio7Fh+1sqmnk/TdGu5dbvXtbe4mGsXfC5MaO1Y2VdnoT8LLTrscVSR9Z1jVrHRtUvZre+jubo3&#xA;ekeXbG2kSa4kgLpCZrl7iVPQhdkmeT0lClV70VlW/NmveY/IWlyebNTnm120kZV1bSreP4YC54xv&#xA;ZELVUQ0VxKfi+1VW+FlU68oeS/K+kX2p+Y9ItZ7a88ztHe363BkDhmXnx9J/7s8nZmU7hiR0oAqy&#xA;Y4qtOKrDiq04qsOKtL9tfmMVcMVXDFVwxVeMVXDFV4xVcMVXg4quBxVcDiq4HFVwOKrgcVbBxVuu&#xA;Kt1xVi/5oanYaf8Al15kuL64jtoDp11EJJGCgySwtHGgr1ZnYKB3OKpJ51n/ADAsLm58x+RNMsNd&#xA;bUbXTbaNZbko3CG4uJHdVCiORGjuxRvWFNzQ91WtQ8r2nnLT/O/lrULqawa9vrZrk2U1JUB02yI3&#xA;IHKNmjZfiWjAH6FWP2nmDyJf3XmPRrLzxbQ2sUyWmr2OrRwS+o8NrFZufVuypnVltqO2/wAVfEYq&#xA;mv6c0qOxEEX5j6elmkYRIrBLD1REFoFt1Qy/Fx2QKjdqA9MVTLTNEvb/AE1LKOCbQvK0QrHYozpq&#xA;V5Ulma5lJ9SASE8mUN6rk1d1+JCqx7y/qWsedfLN40HlyTRdD0ySazs/LNwfqjX7wMVCTvwpFbDo&#xA;8aA8mDKxKgh1Ud+Wcnmptd8wJ5i8vSafcRNDHFrEkqOlynCvo26JtHBFX4FQmlTzJk5EqvQScVWn&#xA;FVhxVacVWnFVhxVacVWr9tfmMVcMVXDFV4xVcMVXjFVwOKrhiq4HFVwOKrgcVXA4quBxVcDirdcV&#xA;brirq4ql+vaDo3mDSrjSdZtI77TrocZ7aUVU0NQdtwQRUEbg9MVQPmXzDoXknync6vdwtDo+kQqP&#xA;q9pFyKoKIiRxrRQNwBWijuQMVY/qPmTynq0Nrr9vNrWnTRQepDqtppV+GNtIvMpJ6tnNDJHQ8hzU&#xA;gH4lod8VSma/srLS9R1LSdb8wRzXMb3jTpoSIk8oi+CWVxpK8qqqjkx6d8VTLQIfMuoag1vP5p1E&#xA;RjStOvvhh0wH1bxrkSDezPw/uFoPniqr5h/LCPXNDvdJvPMmtFL5GSSUXKKfi3oUSNE4nutKEbYq&#xA;yvTLCPTtNtdPjllnS0hSBZ7hzLM4jULykc7sxpUnxxVXJxVaTiq04qsJxVacVWnFVhxVacVaX7Y+&#xA;YxVoYquGKrxiq4YquBxVeDiq4HFVwOKrgcVXA4quBxVsHFVwOKt1xV1cVbrirq4qskSOSNo5FDxu&#xA;CrowBUgihBB6g4ql3mU/867qv/MHcf8AJpsVSi5ure2/LRpriQRxLpABZthVrcKo9ySaAdziqQ/p&#xA;WDTNR0saZeRXHmOOwtrPVvLRdfWmhgha4VU/31cxLJJIiuQHUkH9llVZ3Y39rf2NvfWknq2t3Ek9&#xA;vLQryjkUOjUYAiqnuMVVicVWk4qtJxVaTiqwnFVpOKrTiqw4qtOKtL9sfMYq0MVXA4quBxVeMVXA&#xA;4quBxVcDiq4HFVwOKrgcVXA4q2DirdcVbrirdcVdXFXVxVquKpL51j1uXyjrEOhQxXGry2k0dlBM&#xA;3BGkdCoBb6dq0BPUjrirGfKdjrN/c6RY+aYo4rrQdJ0+7bTYWEkAvpnuIvVckfE0S2o4CvFWYn4i&#xA;FYKrbKX61qul6wAFt9Y8yXE9kK1LQw6LcWaSVoKiYWvqpT9lhirIPIR/50Xy5/2y7L/qHTFU8JxV&#xA;aTiq0nFVpOKrScVWk4qsJxVaTiq0nFWl+2vzGKtDFVwOKrgcVXA4quBxVeDiq4HFVwOKtg4quBxV&#xA;sHFV1cVbrirdcVdXFXVxV1cVdXFWq4qxmy8j2tp591HzimoXj3Go2kVnJp7ylrVRCSQ6ofwHQEuf&#xA;2sVSTRU1I+UvKF1aWcuojR7l+dtC0KS/V47W6s4+JneCM8fUQGrVpvucVd5P823Vl5N8spdaBqMd&#xA;rJaaZaC/52DQhrkQ28blVujNxLyKf7utO3bFWeE4qtJxVonFVpOKrCcVWk4qtJxVaTiq04q0v21+&#xA;YxVaDiq8HFVwOKrgcVXA4quBxVcDiq4HFWwcVXA4q2DirdcVbrirdcVbrirq4q6uKtVxV1cVU5vV&#xA;MTiJlWUqfTZgWUNTYkAqSK++KsU/LHRvN2i+VhYeabi1uNSF1dSo1khSJYppmlVaEKOrsQAoCrRa&#xA;bVKqC8oXej6jof8AgvURHdvpUK2XqqGFveRWnGMXFrJXdomCiTg3KKXav2WKqzzNP+YHlTS2uPLl&#xA;s3m2D1I0j026k4XkKM4DFbj/AHegXb94OY+0zuARirNo3dokZ09N2UFoyQeJI3FRsaYq2Tiq0nFV&#xA;pOKrScVWk4qtJxVYTirl+2vzGKrQcVXA4quBxVcDiq4HFVwOKrgcVXA4q2Diq4HFWwcVbrirdcVb&#xA;rirq4q6uKurirq4q1XFXVxViPnLy95v1nV9HTTdYSw8to7/4gslVluLmIgFUjmQhkDU4niykVrVu&#xA;mKp1eeXtGu7G3sXthFbWhU2Ytme2aAoOI9F4DG8fwkr8BHwkjocVYzTznofnTT9M0uzk1PyhqKPJ&#xA;fXt5dSTT2MyClEkmd5Hjk+EhGr8XKhA2CrNCcVaJxVaTiq0nFVpOKrScVWk4qtJxVpT8a/MYq0Di&#xA;q4HFVwOKrgcVXA4q2Diq4HFVwOKtg4quBxVuuKt1xVuuKurirdcVdXFXVxVquKurirVcVarirROK&#xA;tE4qtJxVonFVpOKrScVWk4q0Tiq0nFVpOKtKfjX5jFVoOKrgcVXA4quBxVcDirYOKrgcVbBxVcDi&#xA;rYOKt1xVuuKt1xVuuKurirq4q6uKurirVcVdXFWq4q0Tiq0nFWicVaJxVaTiq0nFWicVWk4qtJxV&#xA;aTirkPxr8xiqwHFVwOKrgcVXA4quBxVsHFVwOKtg4quBxVsHFW64q3XFXVxVuuKurirdcVarirq4&#xA;q6uKtVxVquKtVxVquKtE4qtJxVonFVpOKtE4qtJxVaTiq0nFXIfjX5jFX//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>700.000000</stDim:w>
            <stDim:h>700.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Группа образцов по умолчанию</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>HKS 16 E</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>213</xmpG:red>
                           <xmpG:green>16</xmpG:green>
                           <xmpG:blue>48</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">мозг</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DocumentID>xmp.did:BF508717A54EE2118E078049B011E910</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:BF508717A54EE2118E078049B011E910</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:5d6cce77-f3e7-48a7-8f03-2b1e56520a02</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:a690c7dd-59f7-4404-a5a4-9392a926cfae</stRef:instanceID>
            <stRef:documentID>uuid:5d6cce77-f3e7-48a7-8f03-2b1e56520a02</stRef:documentID>
            <stRef:originalDocumentID>uuid:5d6cce77-f3e7-48a7-8f03-2b1e56520a02</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:BF508717A54EE2118E078049B011E910</stEvt:instanceID>
                  <stEvt:when>2012-12-25T17:09:34+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.90</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -701.032 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 701.032 li
700 701.032 li
700 0 li
cp
clp
[1 0 0 1 0 0 ]ct
700 701.032 mo
0 701.032 li
0 0 li
700 0 li
700 701.032 li
591.264 56.1577 mo
591.317 57.4179 591.372 58.7866 591.372 60.4858 cv
591.372 74.8329 li
593.754 74.8329 li
593.754 67.6318 li
593.81 67.6318 li
594.603 68.9449 596.136 69.7128 597.888 69.7128 cv
601.011 69.7128 603.941 67.357 603.941 62.5933 cv
603.941 58.5943 601.532 55.8837 598.301 55.8837 cv
596.136 55.8837 594.547 56.8139 593.589 58.4291 cv
593.536 58.4291 li
593.399 56.1577 li
591.264 56.1577 li
642.848 51.311 mo
639.234 51.311 636.632 54.5693 636.632 60.5669 cv
636.687 66.4532 639.068 69.7128 642.546 69.7128 cv
646.462 69.7128 648.733 66.3716 648.733 60.3208 cv
648.733 54.6519 646.572 51.311 642.848 51.311 cv
606.623 66.9737 mo
606.047 68.7808 li
606.979 69.3287 608.32 69.7128 609.773 69.7128 cv
612.868 69.7128 614.703 68.0698 614.703 65.7138 cv
614.703 63.7426 613.499 62.5933 611.223 61.7432 cv
609.498 61.0581 608.734 60.5669 608.734 59.4712 cv
608.734 58.4864 609.498 57.664 610.922 57.664 cv
612.155 57.664 613.113 58.1299 613.633 58.4585 cv
614.208 56.7056 li
613.499 56.2402 612.32 55.8837 610.978 55.8837 cv
608.156 55.8837 606.403 57.6371 606.403 59.7724 cv
606.403 61.3608 607.527 62.647 609.937 63.5234 cv
611.69 64.1807 612.373 64.7837 612.373 65.9332 cv
612.373 67.0562 611.552 67.9047 609.827 67.9047 cv
608.622 67.9047 607.364 67.4121 606.623 66.9737 cv
582.914 55.8837 mo
579.052 55.8837 576.696 59.0064 576.696 63.0034 cv
576.696 67.0005 579.133 69.7128 583.214 69.7128 cv
585.324 69.7128 586.801 69.2465 587.648 68.8627 cv
587.211 67.1381 li
586.335 67.5219 585.268 67.8227 583.542 67.8227 cv
581.106 67.8227 579.052 66.4809 579 63.2226 cv
588.308 63.2226 li
588.363 62.9482 588.387 62.5933 588.387 62.1002 cv
588.387 59.6636 587.266 55.8837 582.914 55.8837 cv
628.006 53.8578 mo
628.062 53.8578 li
628.062 69.4106 li
630.39 69.4106 li
630.39 51.6118 li
628.334 51.6118 li
624.446 53.6929 li
624.914 55.5287 li
628.006 53.8578 li
659.469 33 mo
652.371 33 648.426 35.4619 648.426 39.9345 cv
648.426 42.6313 650.353 45.2896 654.127 45.2896 cv
656.787 45.2896 658.789 43.9781 659.83 42.5152 cv
659.943 42.5152 li
660.213 44.8658 li
663.258 44.8658 li
663.258 44.8658 li
663.065 43.5948 662.987 42.0146 662.987 40.3969 cv
662.987 33.4248 li
662.987 29.7266 661.598 25.835 655.899 25.835 cv
653.548 25.835 651.276 26.4889 649.735 27.4532 cv
650.505 29.7266 li
651.815 28.8398 653.626 28.3389 655.398 28.3389 cv
655.424 28.3387 655.45 28.3385 655.476 28.3385 cv
659.216 28.3385 659.636 31.1227 659.636 32.6152 cv
659.636 33.0005 li
659.58 33.0002 659.525 33 659.469 33 cv
618.499 41.8228 mo
618.576 41.8228 li
620.001 44.2491 622.159 45.2896 624.854 45.2896 cv
629.016 45.2896 633.253 41.9766 633.253 35.3121 cv
633.253 29.6866 630.019 25.835 625.355 25.835 cv
622.351 25.835 620.192 27.1459 618.999 29.2261 cv
618.924 29.2261 li
618.924 17.5152 li
615.572 17.5152 li
615.572 40.0498 li
615.572 41.7056 615.494 43.5948 615.419 44.8658 cv
618.306 44.8658 li
618.499 41.8228 li
578.882 26.2207 mo
578.882 28.8017 li
581.772 28.8017 li
581.772 38.9712 li
581.772 41.1675 582.158 42.8242 583.082 43.8647 cv
583.892 44.7505 585.161 45.2896 586.744 45.2896 cv
588.052 45.2896 589.091 45.0586 589.745 44.8282 cv
589.593 42.2461 li
589.091 42.3999 588.555 42.476 587.627 42.476 cv
585.739 42.476 585.085 41.1675 585.085 38.8569 cv
585.085 28.8017 li
589.937 28.8017 li
589.937 26.2207 li
585.085 26.2207 li
585.085 21.751 li
581.772 22.7534 li
581.772 26.2207 li
578.882 26.2207 li
571.912 25.835 mo
565.824 25.835 561.896 30.0337 561.896 35.774 cv
561.896 41.4746 565.556 45.2896 571.18 45.2896 cv
573.686 45.2896 575.649 44.6353 576.537 44.2099 cv
575.958 41.6675 li
574.996 42.0919 573.721 42.5552 571.798 42.5552 cv
568.1 42.5552 565.327 39.8964 565.327 35.582 cv
565.327 31.7304 567.636 28.5318 571.912 28.5318 cv
573.762 28.5318 575.033 28.9941 575.841 29.4175 cv
576.612 26.8369 li
575.69 26.3355 573.914 25.835 571.912 25.835 cv
554.258 33 mo
547.159 33 543.215 35.4619 543.215 39.9345 cv
543.215 42.6313 545.142 45.2896 548.917 45.2896 cv
551.577 45.2896 553.579 43.9781 554.618 42.5152 cv
554.733 42.5152 li
555.004 44.8658 li
558.047 44.8658 li
558.047 44.8658 li
557.854 43.5948 557.778 42.0146 557.778 40.3969 cv
557.778 33.4248 li
557.778 29.7266 556.389 25.835 550.69 25.835 cv
548.339 25.835 546.067 26.4889 544.526 27.4532 cv
545.294 29.7266 li
546.605 28.8398 548.415 28.3389 550.19 28.3389 cv
550.216 28.3387 550.242 28.3385 550.268 28.3385 cv
554.007 28.3385 554.425 31.1227 554.425 32.6152 cv
554.425 33.0005 li
554.369 33.0002 554.314 33 554.258 33 cv
517.406 26.2207 mo
517.406 28.8017 li
520.296 28.8017 li
520.296 38.9712 li
520.296 41.1675 520.684 42.8242 521.605 43.8647 cv
522.416 44.7505 523.686 45.2896 525.266 45.2896 cv
526.577 45.2896 527.617 45.0586 528.27 44.8282 cv
528.118 42.2461 li
527.617 42.3999 527.079 42.476 526.154 42.476 cv
524.264 42.476 523.61 41.1675 523.61 38.8569 cv
523.61 28.8017 li
528.463 28.8017 li
528.463 26.2207 li
523.61 26.2207 li
523.61 21.751 li
520.296 22.7534 li
520.296 26.2207 li
517.406 26.2207 li
503.81 41.4366 mo
503.002 43.9781 li
504.314 44.7505 506.2 45.2896 508.242 45.2896 cv
512.593 45.2896 515.176 42.9785 515.176 39.6655 cv
515.176 36.8916 513.481 35.273 510.284 34.0782 cv
507.856 33.1158 506.777 32.4229 506.777 30.8824 cv
506.777 29.4951 507.856 28.3389 509.859 28.3389 cv
511.593 28.3389 512.941 28.9941 513.674 29.4565 cv
514.484 26.9916 li
513.481 26.3355 511.822 25.835 509.939 25.835 cv
505.969 25.835 503.504 28.2998 503.504 31.3057 cv
503.504 33.5405 505.082 35.3505 508.472 36.5836 cv
510.938 37.5083 511.901 38.3545 511.901 39.9736 cv
511.901 41.5538 510.745 42.7451 508.316 42.7451 cv
506.622 42.7451 504.852 42.0538 503.81 41.4366 cv
485.288 41.8228 mo
485.362 41.8228 li
486.788 44.2491 488.945 45.2896 491.643 45.2896 cv
495.799 45.2896 500.04 41.9766 500.04 35.3121 cv
500.04 29.6866 496.802 25.835 492.14 25.835 cv
489.136 25.835 486.981 27.1459 485.786 29.2261 cv
485.709 29.2261 li
485.709 17.5152 li
482.358 17.5152 li
482.358 40.0498 li
482.358 41.7056 482.281 43.5948 482.203 44.8658 cv
485.091 44.8658 li
485.288 41.8228 li
685.635 28.6088 mo
688.833 28.6088 689.952 31.1123 689.952 34.1163 cv
689.952 44.8658 li
693.341 44.8658 li
693.341 33.7719 li
693.341 27.377 689.336 25.835 686.754 25.835 cv
683.672 25.835 681.515 27.5694 680.59 29.3022 cv
680.513 29.3022 li
680.32 26.2207 li
677.316 26.2207 li
677.431 27.7623 677.468 29.3022 677.468 31.2676 cv
677.468 44.8658 li
680.858 44.8658 li
680.858 33.6547 li
680.858 33.0766 680.936 32.4999 681.092 32.0761 cv
681.708 30.1894 683.442 28.6088 685.635 28.6088 cv
668.457 26.2207 mo
668.457 44.8658 li
671.846 44.8658 li
671.846 26.2207 li
668.457 26.2207 li
637.334 26.2207 mo
637.449 27.9546 637.486 29.8428 637.486 32.0372 cv
637.486 44.8658 li
640.875 44.8658 li
640.875 34.9278 li
640.875 34.3881 640.915 33.81 640.995 33.3476 cv
641.456 30.8041 643.15 29.0332 645.54 29.0332 cv
646 29.0332 646.345 29.0332 646.693 29.1094 cv
646.693 25.9122 li
646.386 25.873 646.115 25.835 645.77 25.835 cv
643.496 25.835 641.416 27.4141 640.57 29.9184 cv
640.453 29.9184 li
640.3 26.2207 li
637.334 26.2207 li
532.123 26.2207 mo
532.24 27.9546 532.277 29.8428 532.277 32.0372 cv
532.277 44.8658 li
535.667 44.8658 li
535.667 34.9278 li
535.667 34.3881 535.704 33.81 535.784 33.3476 cv
536.244 30.8041 537.939 29.0332 540.327 29.0332 cv
540.791 29.0332 541.136 29.0332 541.485 29.1094 cv
541.485 25.9122 li
541.177 25.873 540.906 25.835 540.558 25.835 cv
538.286 25.835 536.205 27.4141 535.357 29.9184 cv
535.244 29.9184 li
535.087 26.2207 li
532.123 26.2207 li
478.779 44.8658 mo
478.779 44.8658 li
469.916 18.9018 li
465.91 18.9018 li
457.046 44.8658 li
460.518 44.8658 li
463.213 36.6987 li
472.422 36.6987 li
475.192 44.8658 li
478.779 44.8658 li
670.154 18.8632 mo
668.879 18.8632 668.033 19.8256 668.033 20.9814 cv
668.033 22.1373 668.842 23.0625 670.072 23.0625 cv
671.423 23.0625 672.233 22.1373 672.233 20.9814 cv
672.233 19.7875 671.386 18.8632 670.154 18.8632 cv
642.684 67.8506 mo
640.494 67.8506 639.068 65.2222 639.068 60.5937 cv
639.068 55.747 640.601 53.1734 642.684 53.1734 cv
645.202 53.1734 646.297 56.0489 646.297 60.4293 cv
646.297 64.9751 645.12 67.8506 642.684 67.8506 cv
597.48 67.8227 mo
595.755 67.8227 594.303 66.6729 593.864 65.0029 cv
593.782 64.7007 593.754 64.3721 593.754 64.0171 cv
593.754 61.7158 li
593.754 61.415 593.835 61.0581 593.919 60.7589 cv
594.356 58.9507 595.917 57.8003 597.564 57.8003 cv
600.109 57.8003 601.505 60.0737 601.505 62.7026 cv
601.505 65.7417 600.025 67.8227 597.48 67.8227 cv
586.062 61.4975 mo
579.026 61.4975 li
579.215 59.8271 580.256 57.6083 582.721 57.6083 cv
585.431 57.6083 586.088 59.9907 586.062 61.4975 cv
654.974 42.7851 mo
653.28 42.7851 651.815 41.7847 651.815 39.5503 cv
651.815 36.1064 655.613 35.3447 659.167 35.3447 cv
659.351 35.3447 659.534 35.3467 659.716 35.3505 cv
659.716 38.5869 li
659.716 38.895 659.675 39.2802 659.56 39.6655 cv
659.018 41.2442 657.442 42.7851 654.974 42.7851 cv
549.765 42.7851 mo
548.07 42.7851 546.605 41.7847 546.605 39.5503 cv
546.605 36.1064 550.4 35.3447 553.953 35.3447 cv
554.137 35.3447 554.32 35.3467 554.502 35.3505 cv
554.502 38.5869 li
554.502 38.895 554.462 39.2802 554.351 39.6655 cv
553.808 41.2442 552.23 42.7851 549.765 42.7851 cv
624.162 42.5933 mo
621.694 42.5933 619.693 40.9741 619.077 38.626 cv
618.961 38.2397 618.924 37.8145 618.924 37.3912 cv
618.924 34.0782 li
618.924 33.5405 618.999 33.0766 619.114 32.6533 cv
619.808 30.1109 621.965 28.4927 624.238 28.4927 cv
627.899 28.4927 629.826 31.6904 629.826 35.4267 cv
629.826 39.7035 627.747 42.5933 624.162 42.5933 cv
490.951 42.5933 mo
488.481 42.5933 486.478 40.9741 485.864 38.626 cv
485.748 38.2397 485.709 37.8145 485.709 37.3912 cv
485.709 34.0782 li
485.709 33.5405 485.786 33.0766 485.901 32.6533 cv
486.597 30.1109 488.75 28.4927 491.025 28.4927 cv
494.682 28.4927 496.613 31.6904 496.613 35.4267 cv
496.613 39.7035 494.53 42.5933 490.951 42.5933 cv
471.763 34.0782 mo
463.906 34.0782 li
466.452 26.5673 li
466.99 24.9878 467.375 23.3706 467.76 21.8686 cv
467.835 21.8686 li
468.221 23.3706 468.607 24.9117 469.184 26.6054 cv
471.763 34.0782 li
false sop
/0 
[/DeviceRGB] /CSA add_res
level3{
gsave
clp
[1160.17 0 0 1160.17 342.819 402.826 ]ct
/0 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.713726 .713726 .713726 ]
/C1 [1 1 1 ]
/N 1.02184 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.713726 .713726 .713726 ]
/C1 [.713726 .713726 .713726 ]
/N 1 
>>
]
/Bounds [.721212 ]
/Encode [1 0 0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
np
271.865 127.109 mo
260.044 127.109 li
256.861 129.934 li
257.395 130.534 li
260.349 127.913 li
272.206 127.913 li
278.54 121.357 li
280.86 111.236 li
280.583 111.246 280.307 111.255 280.03 111.266 cv
277.807 120.96 li
271.865 127.109 li
cp
0 0 0 rgb
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
271.865 127.109 mo
260.044 127.109 li
256.861 129.934 li
257.395 130.534 li
260.349 127.913 li
272.206 127.913 li
278.54 121.357 li
280.86 111.236 li
280.583 111.246 280.307 111.255 280.03 111.266 cv
277.807 120.96 li
271.865 127.109 li
cp
@
332.065 113.359 mo
331.941 113.365 li
331.69 113.365 331.465 113.326 331.262 113.258 cv
331.262 119.945 li
344.417 135.372 li
344.417 180.396 li
328.793 192.071 li
329.274 192.715 li
345.219 180.798 li
345.219 135.077 li
332.065 119.649 li
332.065 113.359 li
cp
f
332.065 113.359 mo
331.941 113.365 li
331.69 113.365 331.465 113.326 331.262 113.258 cv
331.262 119.945 li
344.417 135.372 li
344.417 180.396 li
328.793 192.071 li
329.274 192.715 li
345.219 180.798 li
345.219 135.077 li
332.065 119.649 li
332.065 113.359 li
cp
@
248.397 149.906 mo
248.397 206.625 li
265.612 223.983 li
265.729 224.102 li
274.925 224.102 li
290.049 241.094 li
290.049 258.957 li
280.841 271.208 li
280.841 294.028 li
281.644 294.028 li
281.644 271.476 li
290.852 259.226 li
290.852 240.788 li
275.405 223.434 li
275.285 223.299 li
266.065 223.299 li
249.199 206.294 li
249.199 149.582 li
236.045 135.97 li
236.045 116.674 li
235.779 116.736 235.508 116.793 235.243 116.855 cv
235.243 136.295 li
248.397 149.906 li
cp
f
248.397 149.906 mo
248.397 206.625 li
265.612 223.983 li
265.729 224.102 li
274.925 224.102 li
290.049 241.094 li
290.049 258.957 li
280.841 271.208 li
280.841 294.028 li
281.644 294.028 li
281.644 271.476 li
290.852 259.226 li
290.852 240.788 li
275.405 223.434 li
275.285 223.299 li
266.065 223.299 li
249.199 206.294 li
249.199 149.582 li
236.045 135.97 li
236.045 116.674 li
235.779 116.736 235.508 116.793 235.243 116.855 cv
235.243 136.295 li
248.397 149.906 li
cp
@
493.447 625.284 mo
493.671 625.127 493.906 624.986 494.149 624.866 cv
487.436 617.324 li
487.316 617.189 li
478.096 617.189 li
461.23 600.185 li
461.23 543.473 li
448.077 529.861 li
448.077 510.564 li
447.81 510.627 447.54 510.684 447.275 510.746 cv
447.275 530.186 li
460.428 543.797 li
460.428 600.516 li
477.644 617.874 li
477.761 617.992 li
486.957 617.992 li
493.447 625.284 li
cp
f
493.447 625.284 mo
493.671 625.127 493.906 624.986 494.149 624.866 cv
487.436 617.324 li
487.316 617.189 li
478.096 617.189 li
461.23 600.185 li
461.23 543.473 li
448.077 529.861 li
448.077 510.564 li
447.81 510.627 447.54 510.684 447.275 510.746 cv
447.275 530.186 li
460.428 543.797 li
460.428 600.516 li
477.644 617.874 li
477.761 617.992 li
486.957 617.992 li
493.447 625.284 li
cp
@
53.7271 336.855 mo
27.1392 336.855 li
27.1543 337.124 27.1748 337.389 27.1919 337.657 cv
53.7271 337.657 li
53.7271 336.855 li
cp
f
53.7271 336.855 mo
27.1392 336.855 li
27.1543 337.124 27.1748 337.389 27.1919 337.657 cv
53.7271 337.657 li
53.7271 336.855 li
cp
@
110.532 269.433 mo
87.0171 269.125 li
87.0059 269.928 li
111.335 270.245 li
111.335 253.078 li
85.3628 210.988 li
85.1382 211.133 84.9126 211.28 84.688 211.423 cv
110.532 253.307 li
110.532 269.433 li
cp
f
110.532 269.433 mo
87.0171 269.125 li
87.0059 269.928 li
111.335 270.245 li
111.335 253.078 li
85.3628 210.988 li
85.1382 211.133 84.9126 211.28 84.688 211.423 cv
110.532 253.307 li
110.532 269.433 li
cp
@
87.0117 269.928 mo
87.0117 269.125 li
61.7964 269.125 li
48.3237 248.946 li
48.1743 249.205 48.0254 249.463 47.8774 249.723 cv
61.3672 269.928 li
87.0117 269.928 li
cp
f
87.0117 269.928 mo
87.0117 269.125 li
61.7964 269.125 li
48.3237 248.946 li
48.1743 249.205 48.0254 249.463 47.8774 249.723 cv
61.3672 269.928 li
87.0117 269.928 li
cp
@
146.384 277.748 mo
146.384 263.709 li
150.549 253.727 li
150.549 237.179 li
136.474 218.349 li
136.513 193.587 li
136.284 193.896 136.016 194.177 135.708 194.421 cv
135.67 218.481 li
135.67 218.616 li
149.746 237.445 li
149.746 253.565 li
145.581 263.548 li
145.581 278.094 li
155.884 287.849 li
155.884 317.419 li
149.746 321.957 li
149.746 328.057 li
150.549 328.057 li
150.549 322.361 li
156.687 317.823 li
156.687 287.503 li
146.384 277.748 li
cp
f
146.384 277.748 mo
146.384 263.709 li
150.549 253.727 li
150.549 237.179 li
136.474 218.349 li
136.513 193.587 li
136.284 193.896 136.016 194.177 135.708 194.421 cv
135.67 218.481 li
135.67 218.616 li
149.746 237.445 li
149.746 253.565 li
145.581 263.548 li
145.581 278.094 li
155.884 287.849 li
155.884 317.419 li
149.746 321.957 li
149.746 328.057 li
150.549 328.057 li
150.549 322.361 li
156.687 317.823 li
156.687 287.503 li
146.384 277.748 li
cp
@
64.5415 327.655 mo
42.8447 327.655 li
42.8726 327.922 42.8813 328.19 42.8721 328.458 cv
64.3223 328.458 li
73.1929 333.704 li
71.7354 341.46 li
64.2793 348.073 li
30.4761 348.073 li
26.8589 352.68 li
26.9248 353.03 26.9966 353.372 27.0664 353.716 cv
30.8667 348.876 li
64.584 348.876 li
72.4736 341.878 li
74.0859 333.3 li
64.5415 327.655 li
cp
f
64.5415 327.655 mo
42.8447 327.655 li
42.8726 327.922 42.8813 328.19 42.8721 328.458 cv
64.3223 328.458 li
73.1929 333.704 li
71.7354 341.46 li
64.2793 348.073 li
30.4761 348.073 li
26.8589 352.68 li
26.9248 353.03 26.9966 353.372 27.0664 353.716 cv
30.8667 348.876 li
64.584 348.876 li
72.4736 341.878 li
74.0859 333.3 li
64.5415 327.655 li
cp
@
362.757 115.714 mo
362.601 115.751 362.432 115.773 362.25 115.773 cv
362.146 115.773 362.049 115.765 361.955 115.752 cv
361.955 116.343 li
362.222 116.383 362.491 116.422 362.757 116.462 cv
362.757 115.714 li
cp
f
362.757 115.714 mo
362.601 115.751 362.432 115.773 362.25 115.773 cv
362.146 115.773 362.049 115.765 361.955 115.752 cv
361.955 116.343 li
362.222 116.383 362.491 116.422 362.757 116.462 cv
362.757 115.714 li
cp
@
379.197 153.277 mo
379.197 290.931 li
365.9 306.584 li
365.9 322.208 li
373.792 354.421 li
373.792 389.757 li
373.891 389.752 li
374.153 389.752 374.385 389.794 374.594 389.868 cv
374.594 354.324 li
366.704 322.11 li
366.704 306.879 li
379.999 291.226 li
379.999 153.015 li
362.757 129.422 li
362.757 116.462 li
362.491 116.422 362.222 116.383 361.955 116.343 cv
361.955 129.685 li
379.197 153.277 li
cp
f
379.197 153.277 mo
379.197 290.931 li
365.9 306.584 li
365.9 322.208 li
373.792 354.421 li
373.792 389.757 li
373.891 389.752 li
374.153 389.752 374.385 389.794 374.594 389.868 cv
374.594 354.324 li
366.704 322.11 li
366.704 306.879 li
379.999 291.226 li
379.999 153.015 li
362.757 129.422 li
362.757 116.462 li
362.491 116.422 362.222 116.383 361.955 116.343 cv
361.955 129.685 li
379.197 153.277 li
cp
@
362.318 435.433 mo
362.318 402.92 li
361.516 402.92 li
361.516 435.746 li
369.846 444.819 li
369.846 502.481 li
370.111 502.83 370.376 503.177 370.649 503.52 cv
370.649 444.507 li
362.318 435.433 li
cp
f
362.318 435.433 mo
362.318 402.92 li
361.516 402.92 li
361.516 435.746 li
369.846 444.819 li
369.846 502.481 li
370.111 502.83 370.376 503.177 370.649 503.52 cv
370.649 444.507 li
362.318 435.433 li
cp
@
92.1523 251.133 mo
69.6069 221.893 li
69.4072 222.071 69.208 222.25 69.0088 222.431 cv
91.5166 251.622 li
92.1523 251.133 li
cp
f
92.1523 251.133 mo
69.6069 221.893 li
69.4072 222.071 69.208 222.25 69.0088 222.431 cv
91.5166 251.622 li
92.1523 251.133 li
cp
@
75.0225 257.205 mo
75.7627 256.895 li
67.5483 237.364 li
55.8237 237.364 li
55.6299 237.631 55.4351 237.898 55.2427 238.168 cv
67.0151 238.168 li
75.0225 257.205 li
cp
f
75.0225 257.205 mo
75.7627 256.895 li
67.5483 237.364 li
55.8237 237.364 li
55.6299 237.631 55.4351 237.898 55.2427 238.168 cv
67.0151 238.168 li
75.0225 257.205 li
cp
@
177.732 367.077 mo
176.93 367.077 li
176.93 374.883 li
180.876 383.05 li
180.876 395.714 li
168.873 395.714 li
156.052 404.863 li
156.519 405.517 li
169.129 396.517 li
181.679 396.517 li
181.679 382.866 li
177.732 374.699 li
177.732 367.077 li
cp
f
177.732 367.077 mo
176.93 367.077 li
176.93 374.883 li
180.876 383.05 li
180.876 395.714 li
168.873 395.714 li
156.052 404.863 li
156.519 405.517 li
169.129 396.517 li
181.679 396.517 li
181.679 382.866 li
177.732 374.699 li
177.732 367.077 li
cp
@
285.665 341.495 mo
285.665 364.406 li
263.914 364.406 li
238.922 407.058 li
228.667 407.058 li
228.667 428.33 li
229.47 428.33 li
229.47 407.859 li
239.383 407.859 li
264.374 365.209 li
286.468 365.209 li
286.468 341.842 li
298.179 330.846 li
297.629 330.26 li
285.665 341.495 li
cp
f
285.665 341.495 mo
285.665 364.406 li
263.914 364.406 li
238.922 407.058 li
228.667 407.058 li
228.667 428.33 li
229.47 428.33 li
229.47 407.859 li
239.383 407.859 li
264.374 365.209 li
286.468 365.209 li
286.468 341.842 li
298.179 330.846 li
297.629 330.26 li
285.665 341.495 li
cp
@
284.494 408.622 mo
284.494 379.709 li
295.573 367.346 li
294.975 366.81 li
283.692 379.401 li
283.692 409.018 li
294.872 417.638 li
294.872 452.995 li
295.14 452.817 295.406 452.64 295.675 452.458 cv
295.675 417.242 li
284.494 408.622 li
cp
f
284.494 408.622 mo
284.494 379.709 li
295.573 367.346 li
294.975 366.81 li
283.692 379.401 li
283.692 409.018 li
294.872 417.638 li
294.872 452.995 li
295.14 452.817 295.406 452.64 295.675 452.458 cv
295.675 417.242 li
284.494 408.622 li
cp
@
98.3569 212.787 mo
130.893 263.746 li
130.893 289.122 li
135.716 300.012 li
135.716 314.699 li
129.129 319.699 li
129.578 328.078 li
130.38 328.035 li
129.954 320.081 li
136.519 315.099 li
136.519 299.842 li
131.696 288.951 li
131.696 263.511 li
99.3413 212.836 li
107.143 202.97 li
107.143 194.692 li
106.875 194.912 106.608 195.129 106.34 195.347 cv
106.34 202.69 li
98.3569 212.787 li
cp
f
98.3569 212.787 mo
130.893 263.746 li
130.893 289.122 li
135.716 300.012 li
135.716 314.699 li
129.129 319.699 li
129.578 328.078 li
130.38 328.035 li
129.954 320.081 li
136.519 315.099 li
136.519 299.842 li
131.696 288.951 li
131.696 263.511 li
99.3413 212.836 li
107.143 202.97 li
107.143 194.692 li
106.875 194.912 106.608 195.129 106.34 195.347 cv
106.34 202.69 li
98.3569 212.787 li
cp
@
587.799 256.315 mo
586.997 256.575 li
586.997 294.717 li
597.516 305.941 li
596.641 348.997 li
597.445 349.012 li
598.323 305.794 li
598.325 305.63 li
587.799 294.399 li
587.799 256.315 li
cp
f
587.799 256.315 mo
586.997 256.575 li
586.997 294.717 li
597.516 305.941 li
596.641 348.997 li
597.445 349.012 li
598.323 305.794 li
598.325 305.63 li
587.799 294.399 li
587.799 256.315 li
cp
@
335.553 260.278 mo
334.238 235.096 li
318.904 235.096 li
284.384 180.321 li
283.802 180.873 li
318.118 235.899 li
333.476 235.899 li
334.791 261.081 li
346.425 261.081 li
356.692 269.713 li
356.692 293.919 li
344.461 314.715 li
334.377 334.225 li
334.335 334.306 li
333.899 348.286 li
320.192 360.088 li
320.192 370.078 li
303.198 385.964 li
303.646 405.464 li
325.782 414.421 li
325.782 426.917 li
337.178 426.917 li
356.789 449.916 li
357.399 449.395 li
337.669 426.255 li
337.549 426.113 li
326.585 426.113 li
326.585 413.88 li
304.438 404.917 li
304.009 386.304 li
320.995 370.427 li
320.995 360.456 li
334.69 348.663 li
335.132 334.513 li
345.164 315.103 li
357.496 294.138 li
357.496 269.339 li
346.717 260.278 li
335.553 260.278 li
cp
f
335.553 260.278 mo
334.238 235.096 li
318.904 235.096 li
284.384 180.321 li
283.802 180.873 li
318.118 235.899 li
333.476 235.899 li
334.791 261.081 li
346.425 261.081 li
356.692 269.713 li
356.692 293.919 li
344.461 314.715 li
334.377 334.225 li
334.335 334.306 li
333.899 348.286 li
320.192 360.088 li
320.192 370.078 li
303.198 385.964 li
303.646 405.464 li
325.782 414.421 li
325.782 426.917 li
337.178 426.917 li
356.789 449.916 li
357.399 449.395 li
337.669 426.255 li
337.549 426.113 li
326.585 426.113 li
326.585 413.88 li
304.438 404.917 li
304.009 386.304 li
320.995 370.427 li
320.995 360.456 li
334.69 348.663 li
335.132 334.513 li
345.164 315.103 li
357.496 294.138 li
357.496 269.339 li
346.717 260.278 li
335.553 260.278 li
cp
@
370.943 285.708 mo
358.447 299.774 li
358.447 327.923 li
350.993 337.906 li
350.993 350.106 li
334.47 364.506 li
334.998 365.111 li
351.795 350.472 li
351.795 338.173 li
359.169 328.298 li
359.249 328.189 li
359.249 300.079 li
371.746 286.014 li
371.746 253.192 li
370.943 253.192 li
370.943 285.708 li
cp
f
370.943 285.708 mo
358.447 299.774 li
358.447 327.923 li
350.993 337.906 li
350.993 350.106 li
334.47 364.506 li
334.998 365.111 li
351.795 350.472 li
351.795 338.173 li
359.169 328.298 li
359.249 328.189 li
359.249 300.079 li
371.746 286.014 li
371.746 253.192 li
370.943 253.192 li
370.943 285.708 li
cp
@
437.877 510.564 mo
437.877 543.08 li
425.381 557.146 li
425.381 572.539 li
425.662 572.562 425.928 572.604 426.182 572.663 cv
426.182 557.451 li
438.68 543.386 li
438.68 510.564 li
437.877 510.564 li
cp
f
437.877 510.564 mo
437.877 543.08 li
425.381 557.146 li
425.381 572.539 li
425.662 572.562 425.928 572.604 426.182 572.663 cv
426.182 557.451 li
438.68 543.386 li
438.68 510.564 li
437.877 510.564 li
cp
@
354.5 432.293 mo
321.154 396.133 li
352.637 365.753 li
352.637 398.491 li
341.112 389.896 li
340.632 390.538 li
353.441 400.092 li
353.441 363.863 li
320.033 396.1 li
355.304 434.348 li
355.304 423.082 li
355.074 423.192 354.805 423.258 354.5 423.268 cv
354.5 432.293 li
cp
f
354.5 432.293 mo
321.154 396.133 li
352.637 365.753 li
352.637 398.491 li
341.112 389.896 li
340.632 390.538 li
353.441 400.092 li
353.441 363.863 li
320.033 396.1 li
355.304 434.348 li
355.304 423.082 li
355.074 423.192 354.805 423.258 354.5 423.268 cv
354.5 432.293 li
cp
@
365.243 162.113 mo
365.243 199.706 li
336.95 199.706 li
337.301 211.109 li
337.306 211.277 li
359.542 232.042 li
359.542 250.325 li
365.243 263.71 li
365.243 273.271 li
366.045 273.271 li
366.045 263.547 li
360.346 250.162 li
360.346 231.693 li
338.098 210.917 li
337.778 200.508 li
366.045 200.508 li
366.045 161.876 li
350.481 137.829 li
350.481 114.771 li
350.214 114.738 349.946 114.705 349.678 114.671 cv
349.678 138.065 li
365.243 162.113 li
cp
f
365.243 162.113 mo
365.243 199.706 li
336.95 199.706 li
337.301 211.109 li
337.306 211.277 li
359.542 232.042 li
359.542 250.325 li
365.243 263.71 li
365.243 273.271 li
366.045 273.271 li
366.045 263.547 li
360.346 250.162 li
360.346 231.693 li
338.098 210.917 li
337.778 200.508 li
366.045 200.508 li
366.045 161.876 li
350.481 137.829 li
350.481 114.771 li
350.214 114.738 349.946 114.705 349.678 114.671 cv
349.678 138.065 li
365.243 162.113 li
cp
@
290.28 126.203 mo
281.073 135.73 li
274.033 135.73 li
274.217 135.965 274.344 136.241 274.411 136.534 cv
281.413 136.534 li
290.621 127.005 li
303.566 127.005 li
303.566 111.145 li
303.299 111.138 303.032 111.131 302.764 111.125 cv
302.764 126.203 li
290.28 126.203 li
cp
f
290.28 126.203 mo
281.073 135.73 li
274.033 135.73 li
274.217 135.965 274.344 136.241 274.411 136.534 cv
281.413 136.534 li
290.621 127.005 li
303.566 127.005 li
303.566 111.145 li
303.299 111.138 303.032 111.131 302.764 111.125 cv
302.764 126.203 li
290.28 126.203 li
cp
@
331.427 141.501 mo
331.427 167.945 li
324.563 167.945 li
315.313 156.794 li
303.566 142.566 li
303.566 126.604 li
302.764 126.604 li
302.764 142.855 li
314.695 157.307 li
324.186 168.748 li
332.23 168.748 li
332.23 141.198 li
319.68 126.906 li
319.68 111.861 li
319.412 111.845 319.144 111.829 318.876 111.812 cv
318.876 127.208 li
331.427 141.501 li
cp
f
331.427 141.501 mo
331.427 167.945 li
324.563 167.945 li
315.313 156.794 li
303.566 142.566 li
303.566 126.604 li
302.764 126.604 li
302.764 142.855 li
314.695 157.307 li
324.186 168.748 li
332.23 168.748 li
332.23 141.198 li
319.68 126.906 li
319.68 111.861 li
319.412 111.845 319.144 111.829 318.876 111.812 cv
318.876 127.208 li
331.427 141.501 li
cp
@
272.437 161.593 mo
272.437 142.31 li
254.446 142.31 li
245.253 133.018 li
245.253 121.707 li
244.451 121.707 li
244.451 133.348 li
254.111 143.112 li
271.634 143.112 li
271.634 162.396 li
290.273 162.396 li
309.778 183.701 li
309.778 192.393 li
310.582 192.393 li
310.582 183.389 li
290.626 161.593 li
272.437 161.593 li
cp
f
272.437 161.593 mo
272.437 142.31 li
254.446 142.31 li
245.253 133.018 li
245.253 121.707 li
244.451 121.707 li
244.451 133.348 li
254.111 143.112 li
271.634 143.112 li
271.634 162.396 li
290.273 162.396 li
309.778 183.701 li
309.778 192.393 li
310.582 192.393 li
310.582 183.389 li
290.626 161.593 li
272.437 161.593 li
cp
@
320.995 180.427 mo
295.601 155.854 li
290.809 146.386 li
290.092 146.749 li
294.946 156.337 li
320.192 180.767 li
320.192 209.348 li
344.417 233.509 li
344.417 251.377 li
345.219 251.377 li
345.219 233.176 li
320.995 209.015 li
320.995 180.427 li
cp
f
320.995 180.427 mo
295.601 155.854 li
290.809 146.386 li
290.092 146.749 li
294.946 156.337 li
320.192 180.767 li
320.192 209.348 li
344.417 233.509 li
344.417 251.377 li
345.219 251.377 li
345.219 233.176 li
320.995 209.015 li
320.995 180.427 li
cp
@
98.6694 286.311 mo
70.8257 286.311 li
70.8257 297.379 li
99.2886 297.379 li
99.2886 296.576 li
71.6289 296.576 li
71.6289 287.113 li
99.0283 287.113 li
106.921 278.322 li
114.67 278.322 li
114.67 310.868 li
41.0474 310.868 li
41.0474 274.395 li
57.3247 294.281 li
57.9463 293.773 li
40.2441 272.146 li
40.2441 311.671 li
115.474 311.671 li
115.474 277.519 li
106.563 277.519 li
98.6694 286.311 li
cp
f
98.6694 286.311 mo
70.8257 286.311 li
70.8257 297.379 li
99.2886 297.379 li
99.2886 296.576 li
71.6289 296.576 li
71.6289 287.113 li
99.0283 287.113 li
106.921 278.322 li
114.67 278.322 li
114.67 310.868 li
41.0474 310.868 li
41.0474 274.395 li
57.3247 294.281 li
57.9463 293.773 li
40.2441 272.146 li
40.2441 311.671 li
115.474 311.671 li
115.474 277.519 li
106.563 277.519 li
98.6694 286.311 li
cp
@
127.312 408.207 mo
109.984 389.815 li
92.2358 389.815 li
92.2358 356.961 li
77.561 373.16 li
78.1563 373.699 li
91.4326 359.043 li
91.4326 390.618 li
109.638 390.618 li
126.509 408.525 li
126.509 413.609 li
126.777 413.574 127.044 413.539 127.312 413.504 cv
127.312 408.207 li
cp
f
127.312 408.207 mo
109.984 389.815 li
92.2358 389.815 li
92.2358 356.961 li
77.561 373.16 li
78.1563 373.699 li
91.4326 359.043 li
91.4326 390.618 li
109.638 390.618 li
126.509 408.525 li
126.509 413.609 li
126.777 413.574 127.044 413.539 127.312 413.504 cv
127.312 408.207 li
cp
@
247.884 452.43 mo
183.58 452.43 li
183.98 452.71 184.382 452.979 184.785 453.233 cv
247.082 453.233 li
247.082 473.76 li
251.809 473.779 255.829 473.526 259.26 473.074 cv
247.884 473.074 li
247.884 452.43 li
cp
f
247.884 452.43 mo
183.58 452.43 li
183.98 452.71 184.382 452.979 184.785 453.233 cv
247.082 453.233 li
247.082 473.76 li
251.809 473.779 255.829 473.526 259.26 473.074 cv
247.884 473.074 li
247.884 452.43 li
cp
@
310.971 426.87 mo
304.312 418.142 li
303.673 418.628 li
310.168 427.141 li
310.168 438.547 li
310.43 438.924 310.698 439.297 310.971 439.668 cv
310.971 426.87 li
cp
f
310.971 426.87 mo
304.312 418.142 li
303.673 418.628 li
310.168 427.141 li
310.168 438.547 li
310.43 438.924 310.698 439.297 310.971 439.668 cv
310.971 426.87 li
cp
@
137.691 240.612 mo
138.347 280.877 li
138.349 281.026 li
143.608 286.866 li
143.608 301.287 li
144.411 301.287 li
144.411 286.558 li
139.148 280.713 li
138.49 240.365 li
115.474 205.431 li
115.474 187.79 li
115.204 188.016 114.939 188.236 114.67 188.46 cv
114.67 205.671 li
137.691 240.612 li
cp
f
137.691 240.612 mo
138.347 280.877 li
138.349 281.026 li
143.608 286.866 li
143.608 301.287 li
144.411 301.287 li
144.411 286.558 li
139.148 280.713 li
138.49 240.365 li
115.474 205.431 li
115.474 187.79 li
115.204 188.016 114.939 188.236 114.67 188.46 cv
114.67 205.671 li
137.691 240.612 li
cp
@
93.7363 330.151 mo
81.2407 319.489 li
29.6479 319.489 li
29.6479 301.878 li
29.3687 301.866 29.0991 301.838 28.8452 301.789 cv
28.8452 320.291 li
80.9448 320.291 li
93.4399 330.954 li
110.934 330.954 li
110.934 330.151 li
93.7363 330.151 li
cp
f
93.7363 330.151 mo
81.2407 319.489 li
29.6479 319.489 li
29.6479 301.878 li
29.3687 301.866 29.0991 301.838 28.8452 301.789 cv
28.8452 320.291 li
80.9448 320.291 li
93.4399 330.954 li
110.934 330.954 li
110.934 330.151 li
93.7363 330.151 li
cp
@
144.411 366.675 mo
123.198 366.675 li
123.313 366.927 123.377 367.2 123.393 367.479 cv
143.608 367.479 li
143.608 410.709 li
143.877 410.653 144.145 410.599 144.411 410.543 cv
144.411 366.675 li
cp
f
144.411 366.675 mo
123.198 366.675 li
123.313 366.927 123.377 367.2 123.393 367.479 cv
143.608 367.479 li
143.608 410.709 li
143.877 410.653 144.145 410.599 144.411 410.543 cv
144.411 366.675 li
cp
@
285.665 424.842 mo
285.665 441.304 li
285.793 441.295 285.91 441.267 286.043 441.267 cv
286.184 441.267 286.326 441.276 286.468 441.29 cv
286.468 424.558 li
277.918 414.008 li
277.918 384.056 li
252.866 416.287 li
252.781 416.395 li
252.781 435.643 li
214.124 435.643 li
214.124 373.481 li
195.783 373.481 li
195.783 404.999 li
183.765 414.77 li
164.214 414.77 li
164.263 415.041 164.315 415.304 164.365 415.572 cv
184.051 415.572 li
196.585 405.382 li
196.585 374.285 li
213.321 374.285 li
213.321 436.444 li
253.584 436.444 li
253.584 416.671 li
277.115 386.396 li
277.115 414.293 li
285.665 424.842 li
cp
f
285.665 424.842 mo
285.665 441.304 li
285.793 441.295 285.91 441.267 286.043 441.267 cv
286.184 441.267 286.326 441.276 286.468 441.29 cv
286.468 424.558 li
277.918 414.008 li
277.918 384.056 li
252.866 416.287 li
252.781 416.395 li
252.781 435.643 li
214.124 435.643 li
214.124 373.481 li
195.783 373.481 li
195.783 404.999 li
183.765 414.77 li
164.214 414.77 li
164.263 415.041 164.315 415.304 164.365 415.572 cv
184.051 415.572 li
196.585 405.382 li
196.585 374.285 li
213.321 374.285 li
213.321 436.444 li
253.584 436.444 li
253.584 416.671 li
277.115 386.396 li
277.115 414.293 li
285.665 424.842 li
cp
@
205.793 396.115 mo
204.99 396.115 li
204.99 441.085 li
173.25 441.085 li
173.414 441.354 173.575 441.628 173.74 441.889 cv
205.793 441.889 li
205.793 396.115 li
cp
f
205.793 396.115 mo
204.99 396.115 li
204.99 441.085 li
173.25 441.085 li
173.414 441.354 173.575 441.628 173.74 441.889 cv
205.793 441.889 li
205.793 396.115 li
cp
@
135.716 395.448 mo
135.987 395.47 136.255 395.515 136.519 395.574 cv
136.519 377.565 li
102.319 377.565 li
102.319 362.993 li
101.517 362.993 li
101.517 378.368 li
135.716 378.368 li
135.716 395.448 li
cp
f
135.716 395.448 mo
135.987 395.47 136.255 395.515 136.519 395.574 cv
136.519 377.565 li
102.319 377.565 li
102.319 362.993 li
101.517 362.993 li
101.517 378.368 li
135.716 378.368 li
135.716 395.448 li
cp
@
191.398 424.699 mo
191.398 432.92 li
180.736 432.92 li
180.767 433.188 180.771 433.455 180.757 433.722 cv
192.201 433.722 li
192.201 424.699 li
191.398 424.699 li
cp
f
191.398 424.699 mo
191.398 432.92 li
180.736 432.92 li
180.767 433.188 180.771 433.455 180.757 433.722 cv
192.201 433.722 li
192.201 424.699 li
191.398 424.699 li
cp
@
322.933 319.733 mo
309.778 333.94 li
309.778 349.889 li
300.863 349.889 li
300.863 350.69 li
310.582 350.69 li
310.582 334.255 li
323.735 320.048 li
323.735 281.271 li
344.818 281.271 li
344.818 280.469 li
322.933 280.469 li
322.933 319.733 li
cp
f
322.933 319.733 mo
309.778 333.94 li
309.778 349.889 li
300.863 349.889 li
300.863 350.69 li
310.582 350.69 li
310.582 334.255 li
323.735 320.048 li
323.735 281.271 li
344.818 281.271 li
344.818 280.469 li
322.933 280.469 li
322.933 319.733 li
cp
@
393.904 521.438 mo
393.904 522.075 li
394.204 522.405 394.475 522.802 394.707 523.272 cv
394.707 522.24 li
415.79 522.24 li
415.79 521.438 li
393.904 521.438 li
cp
f
393.904 521.438 mo
393.904 522.075 li
394.204 522.405 394.475 522.802 394.707 523.272 cv
394.707 522.24 li
415.79 522.24 li
415.79 521.438 li
393.904 521.438 li
cp
@
415.944 521.469 mo
415.944 557.87 li
416.225 558.022 416.494 558.198 416.747 558.396 cv
416.747 522.271 li
437.83 522.271 li
437.83 521.469 li
415.944 521.469 li
cp
f
415.944 521.469 mo
415.944 557.87 li
416.225 558.022 416.494 558.198 416.747 558.396 cv
416.747 522.271 li
437.83 522.271 li
437.83 521.469 li
415.944 521.469 li
cp
@
334.332 295.978 mo
334.332 319.756 li
320.272 338.479 li
320.914 338.96 li
335.135 320.024 li
335.135 295.983 li
335.013 296.004 334.887 296.018 334.751 296.018 cv
334.603 296.018 334.464 296.003 334.332 295.978 cv
cp
f
334.332 295.978 mo
334.332 319.756 li
320.272 338.479 li
320.914 338.96 li
335.135 320.024 li
335.135 295.983 li
335.013 296.004 334.887 296.018 334.751 296.018 cv
334.603 296.018 334.464 296.003 334.332 295.978 cv
cp
@
271.634 461.878 mo
271.889 461.725 272.156 461.592 272.437 461.485 cv
272.437 420.556 li
261.769 420.556 li
261.769 435.046 li
256.764 445.856 li
256.726 445.936 li
256.726 461.225 li
257.529 461.225 li
257.529 446.113 li
262.535 435.304 li
262.572 435.224 li
262.572 421.359 li
271.634 421.359 li
271.634 461.878 li
cp
f
271.634 461.878 mo
271.889 461.725 272.156 461.592 272.437 461.485 cv
272.437 420.556 li
261.769 420.556 li
261.769 435.046 li
256.764 445.856 li
256.726 445.936 li
256.726 461.225 li
257.529 461.225 li
257.529 446.113 li
262.535 435.304 li
262.572 435.224 li
262.572 421.359 li
271.634 421.359 li
271.634 461.878 li
cp
@
222.016 357.601 mo
155.884 357.601 li
155.884 386.134 li
156.687 386.134 li
156.687 358.403 li
221.213 358.403 li
221.213 388.803 li
236.083 388.803 li
236.083 388.001 li
222.016 388.001 li
222.016 357.601 li
cp
f
222.016 357.601 mo
155.884 357.601 li
155.884 386.134 li
156.687 386.134 li
156.687 358.403 li
221.213 358.403 li
221.213 388.803 li
236.083 388.803 li
236.083 388.001 li
222.016 388.001 li
222.016 357.601 li
cp
@
141.193 358.403 mo
156.286 358.403 li
156.286 357.601 li
141.059 357.601 li
141.152 357.856 141.197 358.13 141.193 358.403 cv
cp
f
141.193 358.403 mo
156.286 358.403 li
156.286 357.601 li
141.059 357.601 li
141.152 357.856 141.197 358.13 141.193 358.403 cv
cp
@
138.616 180.999 mo
158.084 180.999 li
158.516 207.486 li
158.517 207.6 li
178.099 238.167 li
187.416 238.167 li
187.416 237.364 li
178.538 237.364 li
159.316 207.359 li
158.873 180.196 li
138.881 180.196 li
131.336 174.577 li
131.122 174.752 130.912 174.927 130.699 175.103 cv
138.509 180.919 li
138.616 180.999 li
cp
f
138.616 180.999 mo
158.084 180.999 li
158.516 207.486 li
158.517 207.6 li
178.099 238.167 li
187.416 238.167 li
187.416 237.364 li
178.538 237.364 li
159.316 207.359 li
158.873 180.196 li
138.881 180.196 li
131.336 174.577 li
131.122 174.752 130.912 174.927 130.699 175.103 cv
138.509 180.919 li
138.616 180.999 li
cp
@
233.853 207.307 mo
233.416 146.564 li
233.415 146.431 li
220.828 129.833 li
210.859 129.779 li
210.881 130.046 210.882 130.314 210.867 130.581 cv
220.427 130.634 li
232.613 146.704 li
233.052 207.651 li
259.577 233.174 li
259.577 321.417 li
191.689 321.417 li
181.073 327.711 li
181.482 328.402 li
191.91 322.219 li
260.379 322.219 li
260.379 232.831 li
233.853 207.307 li
cp
f
233.853 207.307 mo
233.416 146.564 li
233.415 146.431 li
220.828 129.833 li
210.859 129.779 li
210.881 130.046 210.882 130.314 210.867 130.581 cv
220.427 130.634 li
232.613 146.704 li
233.052 207.651 li
259.577 233.174 li
259.577 321.417 li
191.689 321.417 li
181.073 327.711 li
181.482 328.402 li
191.91 322.219 li
260.379 322.219 li
260.379 232.831 li
233.853 207.307 li
cp
@
244.451 308.599 mo
175.578 308.599 li
175.578 309.401 li
245.253 309.401 li
245.253 292.27 li
244.451 292.27 li
244.451 308.599 li
cp
f
244.451 308.599 mo
175.578 308.599 li
175.578 309.401 li
245.253 309.401 li
245.253 292.27 li
244.451 292.27 li
244.451 308.599 li
cp
@
201.683 273.084 mo
201.683 257.18 li
205.793 251.507 li
205.793 237.634 li
187.817 213.077 li
187.817 192.176 li
178.719 186.277 li
178.719 140.948 li
177.974 140.948 li
178.025 141.469 178.007 141.997 177.917 142.512 cv
177.917 186.713 li
187.014 192.612 li
187.014 213.34 li
204.99 237.896 li
204.99 251.247 li
200.88 256.92 li
200.88 273.456 li
213.321 284.005 li
213.321 309 li
214.124 309 li
214.124 283.634 li
201.683 273.084 li
cp
f
201.683 273.084 mo
201.683 257.18 li
205.793 251.507 li
205.793 237.634 li
187.817 213.077 li
187.817 192.176 li
178.719 186.277 li
178.719 140.948 li
177.974 140.948 li
178.025 141.469 178.007 141.997 177.917 142.512 cv
177.917 186.713 li
187.014 192.612 li
187.014 213.34 li
204.99 237.896 li
204.99 251.247 li
200.88 256.92 li
200.88 273.456 li
213.321 284.005 li
213.321 309 li
214.124 309 li
214.124 283.634 li
201.683 273.084 li
cp
@
178.318 141.751 mo
218.107 141.751 li
218.107 140.948 li
178.318 140.948 li
178.318 141.751 li
cp
f
178.318 141.751 mo
218.107 141.751 li
218.107 140.948 li
178.318 140.948 li
178.318 141.751 li
cp
@
238.942 261.081 mo
223.325 248.009 li
222.887 235.32 li
211.274 224.209 li
211.274 207.479 li
210.471 207.479 li
210.471 224.552 li
222.096 235.674 li
222.529 248.215 li
222.535 248.395 li
236.732 260.278 li
219.459 260.278 li
219.459 273.459 li
228.667 281.06 li
228.667 292.27 li
229.47 292.27 li
229.47 280.681 li
220.262 273.081 li
220.262 261.081 li
238.942 261.081 li
cp
f
238.942 261.081 mo
223.325 248.009 li
222.887 235.32 li
211.274 224.209 li
211.274 207.479 li
210.471 207.479 li
210.471 224.552 li
222.096 235.674 li
222.529 248.215 li
222.535 248.395 li
236.732 260.278 li
219.459 260.278 li
219.459 273.459 li
228.667 281.06 li
228.667 292.27 li
229.47 292.27 li
229.47 280.681 li
220.262 273.081 li
220.262 261.081 li
238.942 261.081 li
cp
@
236.485 226.242 mo
224.756 215.807 li
224.756 197.097 li
192.201 197.097 li
192.201 149.744 li
191.398 149.744 li
191.398 197.899 li
223.953 197.899 li
223.953 216.168 li
235.682 226.603 li
235.682 237.951 li
251.685 251.563 li
251.685 277.519 li
240.468 277.519 li
240.468 278.322 li
252.488 278.322 li
252.488 251.192 li
236.485 237.58 li
236.485 226.242 li
cp
f
236.485 226.242 mo
224.756 215.807 li
224.756 197.097 li
192.201 197.097 li
192.201 149.744 li
191.398 149.744 li
191.398 197.899 li
223.953 197.899 li
223.953 216.168 li
235.682 226.603 li
235.682 237.951 li
251.685 251.563 li
251.685 277.519 li
240.468 277.519 li
240.468 278.322 li
252.488 278.322 li
252.488 251.192 li
236.485 237.58 li
236.485 226.242 li
cp
@
202.322 153.548 mo
221.542 153.548 li
221.542 180.597 li
222.344 180.597 li
222.344 152.745 li
202.322 152.745 li
202.322 153.548 li
cp
f
202.322 153.548 mo
221.542 153.548 li
221.542 180.597 li
222.344 180.597 li
222.344 152.745 li
202.322 152.745 li
202.322 153.548 li
cp
@
348.255 471.786 mo
349.035 471.594 li
341.978 443.155 li
329.253 434.652 li
321.235 446.653 li
321.904 447.1 li
329.477 435.768 li
341.273 443.649 li
348.255 471.786 li
cp
f
348.255 471.786 mo
349.035 471.594 li
341.978 443.155 li
329.253 434.652 li
321.235 446.653 li
321.904 447.1 li
329.477 435.768 li
341.273 443.649 li
348.255 471.786 li
cp
@
175.979 283.645 mo
175.979 266.448 li
166.333 253.063 li
166.333 235.375 li
147.699 207.358 li
147.699 195.343 li
146.896 195.343 li
146.896 207.601 li
165.529 235.618 li
165.529 253.322 li
175.176 266.707 li
175.176 283.994 li
186.374 294.422 li
198.798 294.939 li
198.832 294.138 li
186.704 293.633 li
175.979 283.645 li
cp
f
175.979 283.645 mo
175.979 266.448 li
166.333 253.063 li
166.333 235.375 li
147.699 207.358 li
147.699 195.343 li
146.896 195.343 li
146.896 207.601 li
165.529 235.618 li
165.529 253.322 li
175.176 266.707 li
175.176 283.994 li
186.374 294.422 li
198.798 294.939 li
198.832 294.138 li
186.704 293.633 li
175.979 283.645 li
cp
@
178.318 251.779 mo
191.398 251.779 li
191.398 280.87 li
192.201 280.87 li
192.201 250.977 li
178.318 250.977 li
178.318 251.779 li
cp
f
178.318 251.779 mo
191.398 251.779 li
191.398 280.87 li
192.201 280.87 li
192.201 250.977 li
178.318 250.977 li
178.318 251.779 li
cp
@
170.354 195.511 mo
177.917 202.997 li
177.917 213.832 li
178.719 213.832 li
178.719 202.662 li
171.157 195.176 li
171.157 158.644 li
151.625 158.644 li
151.265 158.911 150.901 159.178 150.542 159.446 cv
170.354 159.446 li
170.354 195.511 li
cp
f
170.354 195.511 mo
177.917 202.997 li
177.917 213.832 li
178.719 213.832 li
178.719 202.662 li
171.157 195.176 li
171.157 158.644 li
151.625 158.644 li
151.265 158.911 150.901 159.178 150.542 159.446 cv
170.354 159.446 li
170.354 195.511 li
cp
@
309.778 299.768 mo
280.951 330.277 li
280.903 330.328 li
274.801 344.31 li
256.862 351.78 li
252.85 357.779 li
247.429 371.439 li
236.083 371.439 li
236.083 372.243 li
247.975 372.243 li
253.54 358.19 li
257.394 352.429 li
275.408 344.927 li
281.583 330.777 li
310.472 300.202 li
310.582 300.086 li
310.582 283.819 li
309.778 283.819 li
309.778 299.768 li
cp
f
309.778 299.768 mo
280.951 330.277 li
280.903 330.328 li
274.801 344.31 li
256.862 351.78 li
252.85 357.779 li
247.429 371.439 li
236.083 371.439 li
236.083 372.243 li
247.975 372.243 li
253.54 358.19 li
257.394 352.429 li
275.408 344.927 li
281.583 330.777 li
310.472 300.202 li
310.582 300.086 li
310.582 283.819 li
309.778 283.819 li
309.778 299.768 li
cp
@
269.88 253.03 mo
269.88 327.83 li
247.59 341.268 li
100.823 341.268 li
100.898 341.525 100.93 341.8 100.911 342.07 cv
247.813 342.07 li
270.489 328.4 li
270.683 328.283 li
270.683 253.354 li
275.393 248.481 li
274.816 247.922 li
269.88 253.03 li
cp
f
269.88 253.03 mo
269.88 327.83 li
247.59 341.268 li
100.823 341.268 li
100.898 341.525 100.93 341.8 100.911 342.07 cv
247.813 342.07 li
270.489 328.4 li
270.683 328.283 li
270.683 253.354 li
275.393 248.481 li
274.816 247.922 li
269.88 253.03 li
cp
@
297.502 289.847 mo
290.093 304.279 li
290.808 304.646 li
298.261 290.127 li
298.306 290.04 li
298.306 273.61 li
297.502 273.61 li
297.502 289.847 li
cp
f
297.502 289.847 mo
290.093 304.279 li
290.808 304.646 li
298.261 290.127 li
298.306 290.04 li
298.306 273.61 li
297.502 273.61 li
297.502 289.847 li
cp
@
112.516 409.227 mo
106.912 403.427 li
87.1729 403.427 li
65.4902 382.785 li
65.4902 358.003 li
64.6875 358.003 li
64.6875 383.13 li
86.8511 404.23 li
106.572 404.23 li
111.854 409.697 li
112.064 409.522 112.282 409.364 112.516 409.227 cv
cp
f
112.516 409.227 mo
106.912 403.427 li
87.1729 403.427 li
65.4902 382.785 li
65.4902 358.003 li
64.6875 358.003 li
64.6875 383.13 li
86.8511 404.23 li
106.572 404.23 li
111.854 409.697 li
112.064 409.522 112.282 409.364 112.516 409.227 cv
cp
@
51.5337 358.003 mo
51.5337 392.164 li
51.8003 392.353 52.0688 392.537 52.3369 392.722 cv
52.3369 358.003 li
51.5337 358.003 li
cp
f
51.5337 358.003 mo
51.5337 392.164 li
51.8003 392.353 52.0688 392.537 52.3369 392.722 cv
52.3369 358.003 li
51.5337 358.003 li
cp
@
32.1333 369.397 mo
32.2593 369.666 32.3833 369.938 32.5122 370.201 cv
44.0493 370.201 li
44.0493 386.026 li
44.3149 386.281 44.5835 386.531 44.8525 386.779 cv
44.8525 369.397 li
32.1333 369.397 li
cp
f
32.1333 369.397 mo
32.2593 369.666 32.3833 369.938 32.5122 370.201 cv
44.0493 370.201 li
44.0493 386.026 li
44.3149 386.281 44.5835 386.531 44.8525 386.779 cv
44.8525 369.397 li
32.1333 369.397 li
cp
@
110.532 350.289 mo
111.335 350.289 li
111.335 341.669 li
110.532 341.669 li
110.532 350.289 li
cp
f
110.532 350.289 mo
111.335 350.289 li
111.335 341.669 li
110.532 341.669 li
110.532 350.289 li
cp
@
305.555 269.431 mo
304.885 248.27 li
275.506 195.186 li
275.506 181.789 li
265.058 171.651 li
265.058 205.098 li
265.86 205.098 li
265.86 173.549 li
274.703 182.128 li
274.703 195.5 li
304.078 248.133 li
304.765 269.851 li
304.777 270.247 li
323.341 269.928 li
323.327 269.125 li
305.555 269.431 li
cp
f
305.555 269.431 mo
304.885 248.27 li
275.506 195.186 li
275.506 181.789 li
265.058 171.651 li
265.058 205.098 li
265.86 205.098 li
265.86 173.549 li
274.703 182.128 li
274.703 195.5 li
304.078 248.133 li
304.765 269.851 li
304.777 270.247 li
323.341 269.928 li
323.327 269.125 li
305.555 269.431 li
cp
@
211.274 130.233 mo
211.274 124.498 li
211.005 124.604 210.739 124.713 210.471 124.82 cv
210.471 130.233 li
211.274 130.233 li
cp
f
211.274 130.233 mo
211.274 124.498 li
211.005 124.604 210.739 124.713 210.471 124.82 cv
210.471 130.233 li
211.274 130.233 li
cp
@
187.507 358.003 mo
188.31 358.003 li
188.31 341.669 li
187.507 341.669 li
187.507 358.003 li
cp
f
187.507 358.003 mo
188.31 358.003 li
188.31 341.669 li
187.507 341.669 li
187.507 358.003 li
cp
@
218.764 460.824 mo
218.764 461.626 li
234.367 461.626 li
234.367 472.389 li
234.642 472.457 234.912 472.523 235.17 472.586 cv
235.17 460.823 li
218.764 460.824 li
cp
f
218.764 460.824 mo
218.764 461.626 li
234.367 461.626 li
234.367 472.389 li
234.642 472.457 234.912 472.523 235.17 472.586 cv
235.17 460.823 li
218.764 460.824 li
cp
@
448.91 194.226 mo
448.777 180.563 li
430.296 169.303 li
430.209 169.25 li
404.542 169.499 li
392.797 175.465 li
392.923 188.34 li
393.638 188.333 li
393.517 175.902 li
404.716 170.213 li
430.011 169.968 li
448.066 180.969 li
448.199 194.665 li
457.417 199.409 li
540.274 196.877 li
540.065 196.643 539.849 196.413 539.638 196.18 cv
457.58 198.688 li
448.91 194.226 li
cp
f
448.91 194.226 mo
448.777 180.563 li
430.296 169.303 li
430.209 169.25 li
404.542 169.499 li
392.797 175.465 li
392.923 188.34 li
393.638 188.333 li
393.517 175.902 li
404.716 170.213 li
430.011 169.968 li
448.066 180.969 li
448.199 194.665 li
457.417 199.409 li
540.274 196.877 li
540.065 196.643 539.849 196.413 539.638 196.18 cv
457.58 198.688 li
448.91 194.226 li
cp
@
402.214 501.925 mo
401.933 472.982 li
381.553 457.155 li
380.718 371.145 li
389.399 365.304 li
389 364.711 li
379.999 370.767 li
380.841 457.509 li
401.22 473.335 li
401.5 502.24 li
410.494 510.564 li
481.81 509.871 li
482.014 509.626 482.21 509.388 482.406 509.149 cv
410.772 509.845 li
402.214 501.925 li
cp
f
402.214 501.925 mo
401.933 472.982 li
381.553 457.155 li
380.718 371.145 li
389.399 365.304 li
389 364.711 li
379.999 370.767 li
380.841 457.509 li
401.22 473.335 li
401.5 502.24 li
410.494 510.564 li
481.81 509.871 li
482.014 509.626 482.21 509.388 482.406 509.149 cv
410.772 509.845 li
402.214 501.925 li
cp
@
390.489 384.584 mo
389.773 384.591 li
390.382 447.294 li
402.338 457.057 li
402.79 456.502 li
391.095 446.951 li
390.489 384.584 li
cp
f
390.489 384.584 mo
389.773 384.591 li
390.382 447.294 li
402.338 457.057 li
402.79 456.502 li
391.095 446.951 li
390.489 384.584 li
cp
@
419.356 409.214 mo
413.462 428.813 li
414.018 485.982 li
414.734 485.976 li
414.179 428.916 li
420.042 409.419 li
419.356 409.214 li
cp
f
419.356 409.214 mo
413.462 428.813 li
414.018 485.982 li
414.734 485.976 li
414.179 428.916 li
420.042 409.419 li
419.356 409.214 li
cp
@
400.552 161.653 mo
423.963 161.426 li
423.957 160.71 li
401.261 160.931 li
400.969 130.969 li
407.206 125.546 li
406.931 125.469 406.663 125.392 406.382 125.313 cv
400.25 130.646 li
400.552 161.653 li
cp
f
400.552 161.653 mo
423.963 161.426 li
423.957 160.71 li
401.261 160.931 li
400.969 130.969 li
407.206 125.546 li
406.931 125.469 406.663 125.392 406.382 125.313 cv
400.25 130.646 li
400.552 161.653 li
cp
@
419.416 188.083 mo
419.787 226.261 li
403.484 247.233 li
403.408 247.332 li
403.681 275.568 li
404.943 276.619 li
405.132 276.444 405.361 276.32 405.607 276.242 cv
404.394 275.229 li
404.125 247.575 li
420.428 226.601 li
420.504 226.503 li
420.131 188.076 li
419.416 188.083 li
cp
f
419.416 188.083 mo
419.787 226.261 li
403.484 247.233 li
403.408 247.332 li
403.681 275.568 li
404.943 276.619 li
405.132 276.444 405.361 276.32 405.607 276.242 cv
404.394 275.229 li
404.125 247.575 li
420.428 226.601 li
420.504 226.503 li
420.131 188.076 li
419.416 188.083 li
cp
@
429.117 197.011 mo
429.026 187.632 li
400.807 187.907 li
401.125 220.671 li
406.74 220.616 li
406.733 219.9 li
401.834 219.948 li
401.531 188.615 li
428.317 188.355 li
428.409 197.735 li
440.899 197.613 li
440.892 196.897 li
429.117 197.011 li
cp
f
429.117 197.011 mo
429.026 187.632 li
400.807 187.907 li
401.125 220.671 li
406.74 220.616 li
406.733 219.9 li
401.834 219.948 li
401.531 188.615 li
428.317 188.355 li
428.409 197.735 li
440.899 197.613 li
440.892 196.897 li
429.117 197.011 li
cp
@
401.256 197.282 mo
401.263 197.999 li
406.519 197.948 li
406.512 197.231 li
401.256 197.282 li
cp
f
401.256 197.282 mo
401.263 197.999 li
406.519 197.948 li
406.512 197.231 li
401.256 197.282 li
cp
@
551.381 336.54 mo
544.134 340.129 li
532.846 340.238 li
532.743 329.538 li
524.476 318.188 li
523.897 318.61 li
532.029 329.774 li
532.137 340.96 li
544.305 340.842 li
551.552 337.254 li
558.346 337.188 li
558.339 336.473 li
551.381 336.54 li
cp
f
551.381 336.54 mo
544.134 340.129 li
532.846 340.238 li
532.743 329.538 li
524.476 318.188 li
523.897 318.61 li
532.029 329.774 li
532.137 340.96 li
544.305 340.842 li
551.552 337.254 li
558.346 337.188 li
558.339 336.473 li
551.381 336.54 li
cp
@
447.242 169.084 mo
428.562 150.803 li
428.457 150.7 li
417.187 150.81 li
417.194 151.525 li
428.167 151.418 li
446.849 169.699 li
446.953 169.803 li
463.178 169.646 li
475.297 176.926 li
475.667 176.313 li
463.374 168.927 li
447.242 169.084 li
cp
f
447.242 169.084 mo
428.562 150.803 li
428.457 150.7 li
417.187 150.81 li
417.194 151.525 li
428.167 151.418 li
446.849 169.699 li
446.953 169.803 li
463.178 169.646 li
475.297 176.926 li
475.667 176.313 li
463.374 168.927 li
447.242 169.084 li
cp
@
561.662 433.378 mo
561.474 413.988 li
523.237 392.08 li
523.148 382.938 li
504.185 383.122 li
504.192 383.837 li
522.44 383.66 li
522.527 392.498 li
560.762 414.405 li
560.954 434.101 li
566.698 434.045 li
566.765 433.806 566.836 433.566 566.902 433.327 cv
561.662 433.378 li
cp
f
561.662 433.378 mo
561.474 413.988 li
523.237 392.08 li
523.148 382.938 li
504.185 383.122 li
504.192 383.837 li
522.44 383.66 li
522.527 392.498 li
560.762 414.405 li
560.954 434.101 li
566.698 434.045 li
566.765 433.806 566.836 433.566 566.902 433.327 cv
561.662 433.378 li
cp
@
497.267 603.657 mo
478.7 593.019 li
478.611 583.876 li
459.648 584.061 li
459.655 584.775 li
477.903 584.599 li
477.99 593.437 li
497.482 604.604 li
497.376 604.294 497.306 603.978 497.267 603.657 cv
cp
f
497.267 603.657 mo
478.7 593.019 li
478.611 583.876 li
459.648 584.061 li
459.655 584.775 li
477.903 584.599 li
477.99 593.437 li
497.482 604.604 li
497.376 604.294 497.306 603.978 497.267 603.657 cv
cp
@
521.877 432.006 mo
514.29 442.046 li
475.079 442.427 li
475.275 462.718 li
475.99 462.711 li
475.8 443.136 li
514.65 442.759 li
522.238 432.717 li
548.01 432.467 li
559.127 442.235 li
559.6 441.698 li
548.278 431.749 li
521.877 432.006 li
cp
f
521.877 432.006 mo
514.29 442.046 li
475.079 442.427 li
475.275 462.718 li
475.99 462.711 li
475.8 443.136 li
514.65 442.759 li
522.238 432.717 li
548.01 432.467 li
559.127 442.235 li
559.6 441.698 li
548.278 431.749 li
521.877 432.006 li
cp
@
542.597 449.193 mo
525.218 449.763 li
517.425 469.572 li
506.286 469.681 li
506.385 479.839 li
486.053 497.52 li
486.523 498.06 li
506.98 480.271 li
507.104 480.163 li
507.009 470.39 li
517.915 470.283 li
525.712 450.464 li
542.301 449.92 li
553.856 462.044 li
553.994 461.842 554.13 461.64 554.266 461.437 cv
542.597 449.193 li
cp
f
542.597 449.193 mo
525.218 449.763 li
517.425 469.572 li
506.286 469.681 li
506.385 479.839 li
486.053 497.52 li
486.523 498.06 li
506.98 480.271 li
507.104 480.163 li
507.009 470.39 li
517.915 470.283 li
525.712 450.464 li
542.301 449.92 li
553.856 462.044 li
553.994 461.842 554.13 461.64 554.266 461.437 cv
542.597 449.193 li
cp
@
499.918 496.062 mo
509.96 495.964 li
509.861 495.76 509.799 495.521 509.789 495.249 cv
501.743 495.327 li
533.688 465.289 li
543.148 474.903 li
543.319 474.735 543.485 474.565 543.653 474.396 cv
533.708 464.288 li
499.918 496.062 li
cp
f
499.918 496.062 mo
509.96 495.964 li
509.861 495.76 509.799 495.521 509.789 495.249 cv
501.743 495.327 li
533.688 465.289 li
543.148 474.903 li
543.319 474.735 543.485 474.565 543.653 474.396 cv
533.708 464.288 li
499.918 496.062 li
cp
@
450.514 159.409 mo
465.202 159.267 li
465.195 158.551 li
450.76 158.691 li
440.801 150.767 li
440.684 138.686 li
440.443 138.595 440.203 138.504 439.965 138.415 cv
440.088 151.115 li
450.514 159.409 li
cp
f
450.514 159.409 mo
465.202 159.267 li
465.195 158.551 li
450.76 158.691 li
440.801 150.767 li
440.684 138.686 li
440.443 138.595 440.203 138.504 439.965 138.415 cv
440.088 151.115 li
450.514 159.409 li
cp
@
499.127 178.972 mo
499.231 179.066 li
518.379 178.88 li
518.373 178.165 li
499.503 178.348 li
481.105 161.653 li
492.814 161.54 li
492.372 161.303 491.928 161.07 491.485 160.836 cv
479.269 160.955 li
499.127 178.972 li
cp
f
499.127 178.972 mo
499.231 179.066 li
518.379 178.88 li
518.373 178.165 li
499.503 178.348 li
481.105 161.653 li
492.814 161.54 li
492.372 161.303 491.928 161.07 491.485 160.836 cv
479.269 160.955 li
499.127 178.972 li
cp
@
463.667 188.859 mo
463.684 189.102 li
463.685 189.273 463.667 189.429 463.631 189.575 cv
532.447 188.906 li
532.192 188.669 531.937 188.434 531.68 188.199 cv
463.667 188.859 li
cp
f
463.667 188.859 mo
463.684 189.102 li
463.685 189.273 463.667 189.429 463.631 189.575 cv
532.447 188.906 li
532.192 188.669 531.937 188.434 531.68 188.199 cv
463.667 188.859 li
cp
@
430.012 226.86 mo
417.75 245.663 li
418.129 284.676 li
395.994 284.891 li
395.366 220.307 li
387.055 197.716 li
386.483 138.763 li
385.767 138.77 li
386.341 197.847 li
394.65 220.438 li
395.284 285.613 li
418.853 285.385 li
418.468 245.838 li
430.668 227.579 li
430.012 226.86 li
cp
f
430.012 226.86 mo
417.75 245.663 li
418.129 284.676 li
395.994 284.891 li
395.366 220.307 li
387.055 197.716 li
386.483 138.763 li
385.767 138.77 li
386.341 197.847 li
394.65 220.438 li
395.284 285.613 li
418.853 285.385 li
418.468 245.838 li
430.668 227.579 li
430.012 226.86 li
cp
@
505.205 233.643 mo
488.581 223.893 li
454.506 224.224 li
454.513 224.939 li
488.389 224.61 li
505.531 234.665 li
509.553 225.662 li
508.9 225.37 li
505.205 233.643 li
cp
f
505.205 233.643 mo
488.581 223.893 li
454.506 224.224 li
454.513 224.939 li
488.389 224.61 li
505.531 234.665 li
509.553 225.662 li
508.9 225.37 li
505.205 233.643 li
cp
@
513.519 253.352 mo
513.422 253.452 li
512.892 273.982 li
469.023 274.409 li
447.458 292.599 li
387.983 293.176 li
387.299 222.793 li
386.583 222.8 li
387.275 293.898 li
447.723 293.312 li
469.288 275.122 li
513.589 274.692 li
514.132 253.748 li
532.927 234.136 li
532.41 233.641 li
513.519 253.352 li
cp
f
513.519 253.352 mo
513.422 253.452 li
512.892 273.982 li
469.023 274.409 li
447.458 292.599 li
387.983 293.176 li
387.299 222.793 li
386.583 222.8 li
387.275 293.898 li
447.723 293.312 li
469.288 275.122 li
513.589 274.692 li
514.132 253.748 li
532.927 234.136 li
532.41 233.641 li
513.519 253.352 li
cp
@
489.086 233.954 mo
456.537 234.27 li
439.681 243.574 li
439.63 238.361 li
439.417 238.504 439.173 238.599 438.917 238.644 cv
438.978 244.78 li
456.723 234.984 li
488.886 234.671 li
505.722 245.096 li
505.875 260.761 li
447.079 261.332 li
439.42 274.696 li
426.279 274.824 li
426.286 275.54 li
439.837 275.409 li
447.496 262.044 li
506.597 261.47 li
506.434 244.695 li
489.086 233.954 li
cp
f
489.086 233.954 mo
456.537 234.27 li
439.681 243.574 li
439.63 238.361 li
439.417 238.504 439.173 238.599 438.917 238.644 cv
438.978 244.78 li
456.723 234.984 li
488.886 234.671 li
505.722 245.096 li
505.875 260.761 li
447.079 261.332 li
439.42 274.696 li
426.279 274.824 li
426.286 275.54 li
439.837 275.409 li
447.496 262.044 li
506.597 261.47 li
506.434 244.695 li
489.086 233.954 li
cp
@
476.124 242.679 mo
476.13 243.396 li
488.49 243.275 li
495.318 252.254 li
429.298 252.076 li
429.296 252.791 li
496.763 252.975 li
488.842 242.555 li
476.124 242.679 li
cp
f
476.124 242.679 mo
476.13 243.396 li
488.49 243.275 li
495.318 252.254 li
429.298 252.076 li
429.296 252.791 li
496.763 252.975 li
488.842 242.555 li
476.124 242.679 li
cp
@
551.581 248.481 mo
564.76 260.188 li
536.614 260.462 li
536.771 276.691 li
520.955 291.884 li
481.101 292.271 li
482.146 399.753 li
463.744 399.933 li
464.133 440.005 li
456.531 447.591 li
443.5 447.717 li
431.411 433.114 li
431.133 404.546 li
406.248 383.654 li
406.655 425.47 li
407.371 425.463 li
406.979 385.201 li
430.421 404.882 li
430.698 433.375 li
443.057 448.305 li
443.166 448.437 li
456.83 448.303 li
464.851 440.299 li
464.466 400.64 li
482.87 400.461 li
481.825 292.98 li
521.246 292.598 li
537.49 276.993 li
537.336 261.172 li
566.624 260.887 li
552.056 247.945 li
551.581 248.481 li
cp
f
551.581 248.481 mo
564.76 260.188 li
536.614 260.462 li
536.771 276.691 li
520.955 291.884 li
481.101 292.271 li
482.146 399.753 li
463.744 399.933 li
464.133 440.005 li
456.531 447.591 li
443.5 447.717 li
431.411 433.114 li
431.133 404.546 li
406.248 383.654 li
406.655 425.47 li
407.371 425.463 li
406.979 385.201 li
430.421 404.882 li
430.698 433.375 li
443.057 448.305 li
443.166 448.437 li
456.83 448.303 li
464.851 440.299 li
464.466 400.64 li
482.87 400.461 li
481.825 292.98 li
521.246 292.598 li
537.49 276.993 li
537.336 261.172 li
566.624 260.887 li
552.056 247.945 li
551.581 248.481 li
cp
@
425.875 387.752 mo
437.855 375.948 li
397.986 376.336 li
398.559 435.321 li
399.275 435.314 li
398.708 377.045 li
436.091 376.682 li
424.832 387.775 li
440.504 401.846 li
440.758 428.07 li
441.474 428.063 li
441.216 401.523 li
425.875 387.752 li
cp
f
425.875 387.752 mo
437.855 375.948 li
397.986 376.336 li
398.559 435.321 li
399.275 435.314 li
398.708 377.045 li
436.091 376.682 li
424.832 387.775 li
440.504 401.846 li
440.758 428.07 li
441.474 428.063 li
441.216 401.523 li
425.875 387.752 li
cp
@
500.361 459.771 mo
487.13 459.899 li
487.326 480.004 li
457.089 501.624 li
423.429 501.951 li
423.436 502.666 li
457.322 502.337 li
488.044 480.369 li
487.852 460.608 li
500.608 460.484 li
508.332 454.473 li
507.892 453.907 li
500.361 459.771 li
cp
f
500.361 459.771 mo
487.13 459.899 li
487.326 480.004 li
457.089 501.624 li
423.429 501.951 li
423.436 502.666 li
457.322 502.337 li
488.044 480.369 li
487.852 460.608 li
500.608 460.484 li
508.332 454.473 li
507.892 453.907 li
500.361 459.771 li
cp
@
465.706 456.166 mo
465.947 481.022 li
456.944 489.508 li
423.669 489.832 li
423.561 478.652 li
438.225 468.348 li
438.106 456.075 li
426.423 456.188 li
426.43 456.905 li
437.397 456.799 li
437.505 467.978 li
422.842 478.284 li
422.961 490.555 li
457.231 490.221 li
466.666 481.329 li
466.42 456.159 li
465.706 456.166 li
cp
f
465.706 456.166 mo
465.947 481.022 li
456.944 489.508 li
423.669 489.832 li
423.561 478.652 li
438.225 468.348 li
438.106 456.075 li
426.423 456.188 li
426.43 456.905 li
437.397 456.799 li
437.505 467.978 li
422.842 478.284 li
422.961 490.555 li
457.231 490.221 li
466.666 481.329 li
466.42 456.159 li
465.706 456.166 li
cp
@
448.862 460.63 mo
449.046 479.716 li
437.979 479.823 li
437.986 480.539 li
449.769 480.424 li
449.577 460.623 li
448.862 460.63 li
cp
f
448.862 460.63 mo
449.046 479.716 li
437.979 479.823 li
437.986 480.539 li
449.769 480.424 li
449.577 460.623 li
448.862 460.63 li
cp
@
352.75 212.715 mo
371.834 212.985 li
371.678 224.052 li
372.394 224.063 li
372.56 212.28 li
352.76 212 li
352.75 212.715 li
cp
f
352.75 212.715 mo
371.834 212.985 li
371.678 224.052 li
372.394 224.063 li
372.56 212.28 li
352.76 212 li
352.75 212.715 li
cp
@
443.29 314.138 mo
431.959 303.304 li
387.728 303.733 li
387.735 304.449 li
431.674 304.021 li
443.006 314.856 li
470.398 314.591 li
470.638 339.245 li
471.353 339.238 li
471.106 313.868 li
443.29 314.138 li
cp
f
443.29 314.138 mo
431.959 303.304 li
387.728 303.733 li
387.735 304.449 li
431.674 304.021 li
443.006 314.856 li
470.398 314.591 li
470.638 339.245 li
471.353 339.238 li
471.106 313.868 li
443.29 314.138 li
cp
@
558.233 288.571 mo
558.009 288.676 557.766 288.735 557.518 288.752 cv
557.693 306.771 li
514.821 307.188 li
515.171 343.241 li
524.364 354.326 li
552.083 354.056 li
552.229 368.974 li
496.82 369.513 li
497.167 405.404 li
514.794 405.233 li
541.986 425.946 li
517.119 426.188 li
507.789 433.901 li
479.603 434.176 li
479.61 434.89 li
508.048 434.614 li
517.379 426.901 li
544.079 426.643 li
515.13 404.589 li
515.035 404.515 li
497.876 404.682 li
497.541 370.222 li
552.953 369.683 li
552.793 353.333 li
524.699 353.606 li
515.884 342.979 li
515.543 307.897 li
558.417 307.48 li
558.233 288.571 li
cp
f
558.233 288.571 mo
558.009 288.676 557.766 288.735 557.518 288.752 cv
557.693 306.771 li
514.821 307.188 li
515.171 343.241 li
524.364 354.326 li
552.083 354.056 li
552.229 368.974 li
496.82 369.513 li
497.167 405.404 li
514.794 405.233 li
541.986 425.946 li
517.119 426.188 li
507.789 433.901 li
479.603 434.176 li
479.61 434.89 li
508.048 434.614 li
517.379 426.901 li
544.079 426.643 li
515.13 404.589 li
515.035 404.515 li
497.876 404.682 li
497.541 370.222 li
552.953 369.683 li
552.793 353.333 li
524.699 353.606 li
515.884 342.979 li
515.543 307.897 li
558.417 307.48 li
558.233 288.571 li
cp
@
561.327 269.212 mo
547.622 269.345 li
547.917 299.831 li
498.727 300.309 li
491.418 313.149 li
491.901 362.85 li
532.705 362.453 li
532.697 361.738 li
492.61 362.127 li
492.136 313.335 li
499.145 301.021 li
548.64 300.54 li
548.344 270.054 li
561.333 269.927 li
561.327 269.212 li
cp
f
561.327 269.212 mo
547.622 269.345 li
547.917 299.831 li
498.727 300.309 li
491.418 313.149 li
491.901 362.85 li
532.705 362.453 li
532.697 361.738 li
492.61 362.127 li
492.136 313.335 li
499.145 301.021 li
548.64 300.54 li
548.344 270.054 li
561.333 269.927 li
561.327 269.212 li
cp
@
499.771 349.94 mo
499.577 329.891 li
507.091 318.769 li
506.499 318.368 li
498.859 329.675 li
499.064 350.662 li
507.106 350.584 li
507.099 349.869 li
499.771 349.94 li
cp
f
499.771 349.94 mo
499.577 329.891 li
507.091 318.769 li
506.499 318.368 li
498.859 329.675 li
499.064 350.662 li
507.106 350.584 li
507.099 349.869 li
499.771 349.94 li
cp
@
382.133 494.481 mo
381.94 474.432 li
389.454 463.31 li
388.862 462.909 li
381.221 474.216 li
381.426 495.203 li
389.469 495.125 li
389.461 494.41 li
382.133 494.481 li
cp
f
382.133 494.481 mo
381.94 474.432 li
389.454 463.31 li
388.862 462.909 li
381.221 474.216 li
381.426 495.203 li
389.469 495.125 li
389.461 494.41 li
382.133 494.481 li
cp
@
498.486 412.688 mo
488.806 408.32 li
488.734 408.287 li
475.106 408.42 li
475.113 409.136 li
488.583 409.006 li
498.263 413.373 li
498.334 413.406 li
510.693 413.286 li
510.771 421.363 li
471.439 421.745 li
471.498 427.771 li
472.213 427.765 li
472.162 422.455 li
511.495 422.072 li
511.402 412.563 li
498.486 412.688 li
cp
f
498.486 412.688 mo
488.806 408.32 li
488.734 408.287 li
475.106 408.42 li
475.113 409.136 li
488.583 409.006 li
498.263 413.373 li
498.334 413.406 li
510.693 413.286 li
510.771 421.363 li
471.439 421.745 li
471.498 427.771 li
472.213 427.765 li
472.162 422.455 li
511.495 422.072 li
511.402 412.563 li
498.486 412.688 li
cp
@
459.629 583.988 mo
454.321 584.126 li
453.307 544.804 li
443.8 545.049 li
444.132 557.961 li
439.921 567.71 li
439.889 567.783 li
441.097 599.412 li
441.154 599.554 441.206 599.697 441.25 599.844 cv
441.446 599.918 441.637 599.996 441.813 600.092 cv
440.61 567.923 li
444.821 558.173 li
444.853 558.102 li
444.535 545.746 li
452.61 545.539 li
453.623 584.86 li
459.648 584.704 li
459.629 583.988 li
cp
f
459.629 583.988 mo
454.321 584.126 li
453.307 544.804 li
443.8 545.049 li
444.132 557.961 li
439.921 567.71 li
439.889 567.783 li
441.097 599.412 li
441.154 599.554 441.206 599.697 441.25 599.844 cv
441.446 599.918 441.637 599.996 441.813 600.092 cv
440.61 567.923 li
444.821 558.173 li
444.853 558.102 li
444.535 545.746 li
452.61 545.539 li
453.623 584.86 li
459.648 584.704 li
459.629 583.988 li
cp
@
541.169 317.877 mo
541.176 318.593 li
565.896 318.353 li
566.456 375.872 li
539.356 376.136 li
539.485 389.391 li
540.2 389.384 li
540.078 376.844 li
567.178 376.581 li
566.605 317.63 li
541.169 317.877 li
cp
f
541.169 317.877 mo
541.176 318.593 li
565.896 318.353 li
566.456 375.872 li
539.356 376.136 li
539.485 389.391 li
540.2 389.384 li
540.078 376.844 li
567.178 376.581 li
566.605 317.63 li
541.169 317.877 li
cp
@
565.761 304.541 mo
565.893 317.994 li
566.609 317.987 li
566.476 304.414 li
566.249 304.499 566.005 304.541 565.761 304.541 cv
cp
f
565.761 304.541 mo
565.893 317.994 li
566.609 317.987 li
566.476 304.414 li
566.249 304.499 566.005 304.541 565.761 304.541 cv
cp
@
567.285 404.068 mo
555.061 399.354 li
554.962 389.24 li
554.247 389.247 li
554.35 399.848 li
566.924 404.687 li
570.977 407.341 li
570.992 407.066 571.009 406.788 571.022 406.516 cv
567.285 404.068 li
cp
f
567.285 404.068 mo
555.061 399.354 li
554.962 389.24 li
554.247 389.247 li
554.35 399.848 li
566.924 404.687 li
570.977 407.341 li
570.992 407.066 571.009 406.788 571.022 406.516 cv
567.285 404.068 li
cp
@
580.687 268.405 mo
580.458 268.476 580.213 268.506 579.972 268.49 cv
580.928 366.85 li
581.168 366.697 581.404 366.541 581.639 366.384 cv
580.687 268.405 li
cp
f
580.687 268.405 mo
580.458 268.476 580.213 268.506 579.972 268.49 cv
580.928 366.85 li
581.168 366.697 581.404 366.541 581.639 366.384 cv
580.687 268.405 li
cp
@
543.057 236.557 mo
524.44 256.496 li
524.611 274.075 li
514.805 283.735 li
473.778 284.135 li
449.345 302.937 li
449.383 303.081 449.406 303.235 449.407 303.404 cv
449.408 303.555 449.394 303.694 449.368 303.824 cv
474.024 284.849 li
515.101 284.448 li
525.331 274.372 li
525.159 256.775 li
543.372 237.269 li
565.462 237.055 li
565.456 236.339 li
543.057 236.557 li
cp
f
543.057 236.557 mo
524.44 256.496 li
524.611 274.075 li
514.805 283.735 li
473.778 284.135 li
449.345 302.937 li
449.383 303.081 449.406 303.235 449.407 303.404 cv
449.408 303.555 449.394 303.694 449.368 303.824 cv
474.024 284.849 li
515.101 284.448 li
525.331 274.372 li
525.159 256.775 li
543.372 237.269 li
565.462 237.055 li
565.456 236.339 li
543.057 236.557 li
cp
@
493.549 212.129 mo
441.172 213.701 li
435.569 209.53 li
435.141 210.104 li
440.945 214.424 li
493.302 212.852 li
509.099 225.875 li
564.644 225.335 li
564.41 225.096 564.177 224.86 563.947 224.626 cv
509.353 225.157 li
493.549 212.129 li
cp
f
493.549 212.129 mo
441.172 213.701 li
435.569 209.53 li
435.141 210.104 li
440.945 214.424 li
493.302 212.852 li
509.099 225.875 li
564.644 225.335 li
564.41 225.096 564.177 224.86 563.947 224.626 cv
509.353 225.157 li
493.549 212.129 li
cp
@
554.403 218.047 mo
523.349 218.349 li
509.173 206.006 li
454.453 206.538 li
441.104 196.965 li
440.686 197.547 li
454.225 207.255 li
508.909 206.724 li
523.084 219.067 li
555.126 218.755 li
555.099 215.962 li
554.843 215.72 554.605 215.497 554.376 215.283 cv
554.403 218.047 li
cp
f
554.403 218.047 mo
523.349 218.349 li
509.173 206.006 li
454.453 206.538 li
441.104 196.965 li
440.686 197.547 li
454.225 207.255 li
508.909 206.724 li
523.084 219.067 li
555.126 218.755 li
555.099 215.962 li
554.843 215.72 554.605 215.497 554.376 215.283 cv
554.403 218.047 li
cp
@
572.73 277.139 mo
572.737 277.855 li
580.421 277.78 li
580.414 277.063 li
572.73 277.139 li
cp
f
572.73 277.139 mo
572.737 277.855 li
580.421 277.78 li
580.414 277.063 li
572.73 277.139 li
cp
@
566.52 345.823 mo
566.527 346.539 li
581.087 346.396 li
581.08 345.681 li
566.52 345.823 li
cp
f
566.52 345.823 mo
566.527 346.539 li
581.087 346.396 li
581.08 345.681 li
566.52 345.823 li
cp
@
441.685 347.32 mo
422.995 347.502 li
422.872 334.888 li
393.697 335.172 li
393.704 335.888 li
422.162 335.61 li
422.285 348.225 li
441.346 348.039 li
454.743 364.541 li
454.961 387.005 li
455.677 386.998 li
455.456 364.284 li
441.685 347.32 li
cp
f
441.685 347.32 mo
422.995 347.502 li
422.872 334.888 li
393.697 335.172 li
393.704 335.888 li
422.162 335.61 li
422.285 348.225 li
441.346 348.039 li
454.743 364.541 li
454.961 387.005 li
455.677 386.998 li
455.456 364.284 li
441.685 347.32 li
cp
@
410.794 362.651 mo
410.661 348.851 li
384.933 349.102 li
384.607 315.555 li
399.241 315.413 li
399.234 314.697 li
383.884 314.847 li
384.224 349.824 li
409.953 349.573 li
410.086 363.375 li
435.812 363.124 li
444.023 371.993 li
444.546 371.507 li
436.122 362.404 li
410.794 362.651 li
cp
f
410.794 362.651 mo
410.661 348.851 li
384.933 349.102 li
384.607 315.555 li
399.241 315.413 li
399.234 314.697 li
383.884 314.847 li
384.224 349.824 li
409.953 349.573 li
410.086 363.375 li
435.812 363.124 li
444.023 371.993 li
444.546 371.507 li
436.122 362.404 li
410.794 362.651 li
cp
@
442.932 314.142 mo
443.045 325.835 li
403.418 326.22 li
403.425 326.936 li
443.768 326.543 li
443.648 314.134 li
442.932 314.142 li
cp
f
442.932 314.142 mo
443.045 325.835 li
403.418 326.22 li
403.425 326.936 li
443.768 326.543 li
443.648 314.134 li
442.932 314.142 li
cp
@
474.418 374.583 mo
474.554 388.491 li
463.833 388.596 li
463.498 363.166 li
462.781 363.176 li
463.126 389.319 li
475.276 389.201 li
475.133 374.576 li
474.418 374.583 li
cp
f
474.418 374.583 mo
474.554 388.491 li
463.833 388.596 li
463.498 363.166 li
462.781 363.176 li
463.126 389.319 li
475.276 389.201 li
475.133 374.576 li
474.418 374.583 li
cp
@
453.891 621.362 mo
468.664 608.287 li
468.188 607.751 li
453.275 620.952 li
453.487 621.082 453.691 621.221 453.891 621.362 cv
cp
f
453.891 621.362 mo
468.664 608.287 li
468.188 607.751 li
453.275 620.952 li
453.487 621.082 453.691 621.221 453.891 621.362 cv
cp
@
443.833 333.342 mo
443.764 326.185 li
443.048 326.191 li
443.125 334.064 li
458.65 333.914 li
458.783 347.525 li
459.498 347.518 li
459.359 333.191 li
443.833 333.342 li
cp
f
443.833 333.342 mo
443.764 326.185 li
443.048 326.191 li
443.125 334.064 li
458.65 333.914 li
458.783 347.525 li
459.498 347.518 li
459.359 333.191 li
443.833 333.342 li
cp
@
485.24 508.731 mo
485.24 511.309 483.15 513.398 480.573 513.398 cv
477.996 513.398 475.906 511.309 475.906 508.731 cv
475.906 506.154 477.996 504.064 480.573 504.064 cv
483.15 504.064 485.24 506.154 485.24 508.731 cv
cp
f
490.72 498.06 mo
490.72 500.637 488.63 502.727 486.053 502.727 cv
483.476 502.727 481.386 500.637 481.386 498.06 cv
481.386 495.482 483.476 493.393 486.053 493.393 cv
488.63 493.393 490.72 495.482 490.72 498.06 cv
cp
f
516.22 496.062 mo
516.22 498.639 514.13 500.729 511.553 500.729 cv
508.976 500.729 506.886 498.639 506.886 496.062 cv
506.886 493.484 508.976 491.395 511.553 491.395 cv
514.13 491.395 516.22 493.484 516.22 496.062 cv
cp
f
550.053 477.062 mo
550.053 479.639 547.963 481.729 545.386 481.729 cv
542.809 481.729 540.719 479.639 540.719 477.062 cv
540.719 474.484 542.809 472.395 545.386 472.395 cv
547.963 472.395 550.053 474.484 550.053 477.062 cv
cp
f
559.6 462.718 mo
559.6 465.295 557.51 467.385 554.933 467.385 cv
552.356 467.385 550.266 465.295 550.266 462.718 cv
550.266 460.141 552.356 458.051 554.933 458.051 cv
557.51 458.051 559.6 460.141 559.6 462.718 cv
cp
f
514.767 452.266 mo
514.767 454.843 512.677 456.933 510.1 456.933 cv
507.523 456.933 505.433 454.843 505.433 452.266 cv
505.433 449.688 507.523 447.599 510.1 447.599 cv
512.677 447.599 514.767 449.688 514.767 452.266 cv
cp
f
567.301 443.77 mo
567.301 446.347 565.211 448.437 562.634 448.437 cv
560.057 448.437 557.967 446.347 557.967 443.77 cv
557.967 441.192 560.057 439.103 562.634 439.103 cv
565.211 439.103 567.301 441.192 567.301 443.77 cv
cp
f
572.301 433.603 mo
572.301 436.18 570.211 438.27 567.634 438.27 cv
565.057 438.27 562.967 436.18 562.967 433.603 cv
562.967 431.025 565.057 428.936 567.634 428.936 cv
570.211 428.936 572.301 431.025 572.301 433.603 cv
cp
f
578.051 408.021 mo
578.051 410.599 575.961 412.688 573.384 412.688 cv
570.807 412.688 568.717 410.599 568.717 408.021 cv
568.717 405.444 570.807 403.354 573.384 403.354 cv
575.961 403.354 578.051 405.444 578.051 408.021 cv
cp
f
480.773 465.29 mo
480.773 467.867 478.683 469.957 476.106 469.957 cv
473.529 469.957 471.439 467.867 471.439 465.29 cv
471.439 462.713 473.529 460.623 476.106 460.623 cv
478.683 460.623 480.773 462.713 480.773 465.29 cv
cp
f
470.547 453.907 mo
470.547 456.484 468.458 458.574 465.88 458.574 cv
463.303 458.574 461.213 456.484 461.213 453.907 cv
461.213 451.33 463.303 449.24 465.88 449.24 cv
468.458 449.24 470.547 451.33 470.547 453.907 cv
cp
f
454.436 457.057 mo
454.436 459.634 452.346 461.724 449.769 461.724 cv
447.192 461.724 445.102 459.634 445.102 457.057 cv
445.102 454.479 447.192 452.39 449.769 452.39 cv
452.346 452.39 454.436 454.479 454.436 457.057 cv
cp
f
442.061 480.175 mo
442.061 482.752 439.971 484.842 437.394 484.842 cv
434.817 484.842 432.727 482.752 432.727 480.175 cv
432.727 477.598 434.817 475.508 437.394 475.508 cv
439.971 475.508 442.061 477.598 442.061 480.175 cv
cp
f
431.202 456.075 mo
431.202 458.652 429.112 460.742 426.535 460.742 cv
423.958 460.742 421.868 458.652 421.868 456.075 cv
421.868 453.498 423.958 451.408 426.535 451.408 cv
429.112 451.408 431.202 453.498 431.202 456.075 cv
cp
f
418.952 486.728 mo
418.952 489.305 416.862 491.395 414.285 491.395 cv
411.708 491.395 409.618 489.305 409.618 486.728 cv
409.618 484.15 411.708 482.061 414.285 482.061 cv
416.862 482.061 418.952 484.15 418.952 486.728 cv
cp
f
427.509 501.853 mo
427.509 504.43 425.419 506.52 422.842 506.52 cv
420.265 506.52 418.175 504.43 418.175 501.853 cv
418.175 499.275 420.265 497.186 422.842 497.186 cv
425.419 497.186 427.509 499.275 427.509 501.853 cv
cp
f
397.509 522.354 mo
397.509 524.932 395.419 527.021 392.842 527.021 cv
390.265 527.021 388.175 524.932 388.175 522.354 cv
388.175 519.777 390.265 517.688 392.842 517.688 cv
395.419 517.688 397.509 519.777 397.509 522.354 cv
cp
f
420.978 559.766 mo
420.978 562.343 418.888 564.433 416.311 564.433 cv
413.734 564.433 411.644 562.343 411.644 559.766 cv
411.644 557.188 413.734 555.099 416.311 555.099 cv
418.888 555.099 420.978 557.188 420.978 559.766 cv
cp
f
430.613 574.599 mo
430.613 577.176 428.523 579.266 425.946 579.266 cv
423.369 579.266 421.279 577.176 421.279 574.599 cv
421.279 572.021 423.369 569.932 425.946 569.932 cv
428.523 569.932 430.613 572.021 430.613 574.599 cv
cp
f
446.113 601.353 mo
446.113 603.93 444.023 606.02 441.446 606.02 cv
438.869 606.02 436.779 603.93 436.779 601.353 cv
436.779 598.775 438.869 596.686 441.446 596.686 cv
444.023 596.686 446.113 598.775 446.113 601.353 cv
cp
f
456.844 622.603 mo
456.844 625.18 454.754 627.27 452.177 627.27 cv
449.6 627.27 447.51 625.18 447.51 622.603 cv
447.51 620.025 449.6 617.936 452.177 617.936 cv
454.754 617.936 456.844 620.025 456.844 622.603 cv
cp
f
499.969 626.853 mo
499.969 629.43 497.879 631.52 495.302 631.52 cv
492.725 631.52 490.635 629.43 490.635 626.853 cv
490.635 624.275 492.725 622.186 495.302 622.186 cv
497.879 622.186 499.969 624.275 499.969 626.853 cv
cp
f
505.219 605.228 mo
505.219 607.805 503.129 609.895 500.552 609.895 cv
497.975 609.895 495.885 607.805 495.885 605.228 cv
495.885 602.65 497.975 600.561 500.552 600.561 cv
503.129 600.561 505.219 602.65 505.219 605.228 cv
cp
f
395.509 494.479 mo
395.509 497.057 393.419 499.146 390.842 499.146 cv
388.265 499.146 386.175 497.057 386.175 494.479 cv
386.175 491.902 388.265 489.813 390.842 489.813 cv
393.419 489.813 395.509 491.902 395.509 494.479 cv
cp
f
375.316 504.064 mo
375.316 506.642 373.226 508.731 370.649 508.731 cv
368.072 508.731 365.982 506.642 365.982 504.064 cv
365.982 501.487 368.072 499.397 370.649 499.397 cv
373.226 499.397 375.316 501.487 375.316 504.064 cv
cp
f
408.691 457.887 mo
408.691 460.464 406.601 462.554 404.024 462.554 cv
401.447 462.554 399.357 460.464 399.357 457.887 cv
399.357 455.31 401.447 453.22 404.024 453.22 cv
406.601 453.22 408.691 455.31 408.691 457.887 cv
cp
f
404.024 437.262 mo
404.024 439.839 401.934 441.929 399.357 441.929 cv
396.78 441.929 394.69 439.839 394.69 437.262 cv
394.69 434.685 396.78 432.595 399.357 432.595 cv
401.934 432.595 404.024 434.685 404.024 437.262 cv
cp
f
364.638 451.408 mo
364.638 453.985 362.548 456.075 359.971 456.075 cv
357.394 456.075 355.304 453.985 355.304 451.408 cv
355.304 448.831 357.394 446.741 359.971 446.741 cv
362.548 446.741 364.638 448.831 364.638 451.408 cv
cp
f
354.085 475.248 mo
354.085 477.825 351.996 479.915 349.418 479.915 cv
346.841 479.915 344.751 477.825 344.751 475.248 cv
344.751 472.671 346.841 470.581 349.418 470.581 cv
351.996 470.581 354.085 472.671 354.085 475.248 cv
cp
f
446.141 431.749 mo
446.141 434.326 444.051 436.416 441.474 436.416 cv
438.897 436.416 436.807 434.326 436.807 431.749 cv
436.807 429.172 438.897 427.082 441.474 427.082 cv
444.051 427.082 446.141 429.172 446.141 431.749 cv
cp
f
425.335 407.341 mo
425.335 409.918 423.246 412.008 420.668 412.008 cv
418.091 412.008 416.001 409.918 416.001 407.341 cv
416.001 404.764 418.091 402.674 420.668 402.674 cv
423.246 402.674 425.335 404.764 425.335 407.341 cv
cp
f
412.124 425.487 mo
412.124 428.064 410.034 430.154 407.457 430.154 cv
404.879 430.154 402.79 428.064 402.79 425.487 cv
402.79 422.91 404.879 420.82 407.457 420.82 cv
410.034 420.82 412.124 422.91 412.124 425.487 cv
cp
f
394.69 383.801 mo
394.69 386.378 392.6 388.468 390.023 388.468 cv
387.446 388.468 385.356 386.378 385.356 383.801 cv
385.356 381.224 387.446 379.134 390.023 379.134 cv
392.6 379.134 394.69 381.224 394.69 383.801 cv
cp
f
396.281 362.85 mo
396.281 365.427 394.191 367.517 391.614 367.517 cv
389.037 367.517 386.947 365.427 386.947 362.85 cv
386.947 360.272 389.037 358.183 391.614 358.183 cv
394.191 358.183 396.281 360.272 396.281 362.85 cv
cp
f
449.42 372.894 mo
449.42 375.471 447.331 377.561 444.753 377.561 cv
442.176 377.561 440.086 375.471 440.086 372.894 cv
440.086 370.316 442.176 368.227 444.753 368.227 cv
447.331 368.227 449.42 370.316 449.42 372.894 cv
cp
f
459.635 389.24 mo
459.635 391.817 457.545 393.907 454.968 393.907 cv
452.391 393.907 450.301 391.817 450.301 389.24 cv
450.301 386.663 452.391 384.573 454.968 384.573 cv
457.545 384.573 459.635 386.663 459.635 389.24 cv
cp
f
467.448 361.73 mo
467.448 364.308 465.358 366.397 462.781 366.397 cv
460.204 366.397 458.114 364.308 458.114 361.73 cv
458.114 359.153 460.204 357.063 462.781 357.063 cv
465.358 357.063 467.448 359.153 467.448 361.73 cv
cp
f
463.948 349.905 mo
463.948 352.481 461.858 354.571 459.281 354.571 cv
456.704 354.571 454.614 352.481 454.614 349.905 cv
454.614 347.328 456.704 345.238 459.281 345.238 cv
461.858 345.238 463.948 347.328 463.948 349.905 cv
cp
f
475.614 340.738 mo
475.614 343.314 473.524 345.404 470.947 345.404 cv
468.37 345.404 466.28 343.314 466.28 340.738 cv
466.28 338.161 468.37 336.071 470.947 336.071 cv
473.524 336.071 475.614 338.161 475.614 340.738 cv
cp
f
408.031 326.821 mo
408.031 329.398 405.941 331.488 403.364 331.488 cv
400.787 331.488 398.697 329.398 398.697 326.821 cv
398.697 324.244 400.787 322.154 403.364 322.154 cv
405.941 322.154 408.031 324.244 408.031 326.821 cv
cp
f
396.406 335.785 mo
396.406 338.361 394.316 340.451 391.739 340.451 cv
389.162 340.451 387.072 338.361 387.072 335.785 cv
387.072 333.208 389.162 331.118 391.739 331.118 cv
394.316 331.118 396.406 333.208 396.406 335.785 cv
cp
f
406.53 315.258 mo
406.53 317.834 404.44 319.924 401.863 319.924 cv
399.286 319.924 397.196 317.834 397.196 315.258 cv
397.196 312.681 399.286 310.591 401.863 310.591 cv
404.44 310.591 406.53 312.681 406.53 315.258 cv
cp
f
390.172 304.008 mo
390.172 306.584 388.083 308.674 385.505 308.674 cv
382.928 308.674 380.838 306.584 380.838 304.008 cv
380.838 301.431 382.928 299.341 385.505 299.341 cv
388.083 299.341 390.172 301.431 390.172 304.008 cv
cp
f
369.838 275.841 mo
369.838 278.418 367.749 280.508 365.171 280.508 cv
362.594 280.508 360.504 278.418 360.504 275.841 cv
360.504 273.264 362.594 271.174 365.171 271.174 cv
367.749 271.174 369.838 273.264 369.838 275.841 cv
cp
f
350.422 281.091 mo
350.422 283.668 348.332 285.758 345.755 285.758 cv
343.178 285.758 341.088 283.668 341.088 281.091 cv
341.088 278.514 343.178 276.424 345.755 276.424 cv
348.332 276.424 350.422 278.514 350.422 281.091 cv
cp
f
349.258 252.905 mo
349.258 255.482 347.168 257.572 344.591 257.572 cv
342.014 257.572 339.924 255.482 339.924 252.905 cv
339.924 250.328 342.014 248.238 344.591 248.238 cv
347.168 248.238 349.258 250.328 349.258 252.905 cv
cp
f
329.592 269.322 mo
329.592 271.899 327.501 273.989 324.924 273.989 cv
322.347 273.989 320.257 271.899 320.257 269.322 cv
320.257 266.745 322.347 264.655 324.924 264.655 cv
327.501 264.655 329.592 266.745 329.592 269.322 cv
cp
f
375.842 251.165 mo
375.842 253.741 373.751 255.831 371.174 255.831 cv
368.597 255.831 366.507 253.741 366.507 251.165 cv
366.507 248.587 368.597 246.498 371.174 246.498 cv
373.751 246.498 375.842 248.587 375.842 251.165 cv
cp
f
376.657 227.251 mo
376.657 229.828 374.566 231.917 371.989 231.917 cv
369.412 231.917 367.322 229.828 367.322 227.251 cv
367.322 224.674 369.412 222.584 371.989 222.584 cv
374.566 222.584 376.657 224.674 376.657 227.251 cv
cp
f
356.99 212.418 mo
356.99 214.995 354.899 217.084 352.322 217.084 cv
349.745 217.084 347.655 214.995 347.655 212.418 cv
347.655 209.841 349.745 207.751 352.322 207.751 cv
354.899 207.751 356.99 209.841 356.99 212.418 cv
cp
f
332.823 192.668 mo
332.823 195.245 330.732 197.334 328.155 197.334 cv
325.578 197.334 323.488 195.245 323.488 192.668 cv
323.488 190.091 325.578 188.001 328.155 188.001 cv
330.732 188.001 332.823 190.091 332.823 192.668 cv
cp
f
314.66 193.691 mo
314.66 196.268 312.569 198.358 309.992 198.358 cv
307.415 198.358 305.325 196.268 305.325 193.691 cv
305.325 191.114 307.415 189.024 309.992 189.024 cv
312.569 189.024 314.66 191.114 314.66 193.691 cv
cp
f
287.793 178.964 mo
287.793 181.541 285.702 183.631 283.125 183.631 cv
280.548 183.631 278.458 181.541 278.458 178.964 cv
278.458 176.387 280.548 174.297 283.125 174.297 cv
285.702 174.297 287.793 176.387 287.793 178.964 cv
cp
f
270.21 207.464 mo
270.21 210.041 268.119 212.131 265.542 212.131 cv
262.965 212.131 260.875 210.041 260.875 207.464 cv
260.875 204.887 262.965 202.797 265.542 202.797 cv
268.119 202.797 270.21 204.887 270.21 207.464 cv
cp
f
398.744 190.473 mo
398.744 193.05 396.653 195.14 394.076 195.14 cv
391.499 195.14 389.409 193.05 389.409 190.473 cv
389.409 187.896 391.499 185.806 394.076 185.806 cv
396.653 185.806 398.744 187.896 398.744 190.473 cv
cp
f
414.077 197.282 mo
414.077 199.859 411.986 201.949 409.409 201.949 cv
406.832 201.949 404.742 199.859 404.742 197.282 cv
404.742 194.705 406.832 192.615 409.409 192.615 cv
411.986 192.615 414.077 194.705 414.077 197.282 cv
cp
f
438.715 207.546 mo
438.715 210.123 436.625 212.212 434.047 212.212 cv
431.47 212.212 429.38 210.123 429.38 207.546 cv
429.38 204.969 431.47 202.879 434.047 202.879 cv
436.625 202.879 438.715 204.969 438.715 207.546 cv
cp
f
436.494 224.692 mo
436.494 227.269 434.403 229.359 431.826 229.359 cv
429.249 229.359 427.159 227.269 427.159 224.692 cv
427.159 222.115 429.249 220.025 431.826 220.025 cv
434.403 220.025 436.494 222.115 436.494 224.692 cv
cp
f
456.244 224.593 mo
456.244 227.17 454.153 229.26 451.576 229.26 cv
448.999 229.26 446.909 227.17 446.909 224.593 cv
446.909 222.016 448.999 219.926 451.576 219.926 cv
454.153 219.926 456.244 222.016 456.244 224.593 cv
cp
f
433.327 252.427 mo
433.327 255.003 431.236 257.093 428.659 257.093 cv
426.082 257.093 423.992 255.003 423.992 252.427 cv
423.992 249.85 426.082 247.76 428.659 247.76 cv
431.236 247.76 433.327 249.85 433.327 252.427 cv
cp
f
443.51 235.335 mo
443.51 237.912 441.419 240.001 438.842 240.001 cv
436.265 240.001 434.175 237.912 434.175 235.335 cv
434.175 232.758 436.265 230.668 438.842 230.668 cv
441.419 230.668 443.51 232.758 443.51 235.335 cv
cp
f
479.26 243.168 mo
479.26 245.745 477.169 247.835 474.592 247.835 cv
472.015 247.835 469.925 245.745 469.925 243.168 cv
469.925 240.591 472.015 238.501 474.592 238.501 cv
477.169 238.501 479.26 240.591 479.26 243.168 cv
cp
f
413.826 220.039 mo
413.826 222.616 411.735 224.706 409.158 224.706 cv
406.581 224.706 404.491 222.616 404.491 220.039 cv
404.491 217.462 406.581 215.372 409.158 215.372 cv
411.735 215.372 413.826 217.462 413.826 220.039 cv
cp
f
391.786 220.426 mo
391.786 223.003 389.695 225.093 387.118 225.093 cv
384.541 225.093 382.451 223.003 382.451 220.426 cv
382.451 217.849 384.541 215.759 387.118 215.759 cv
389.695 215.759 391.786 217.849 391.786 220.426 cv
cp
f
408.421 277.174 mo
408.421 279.751 406.332 281.841 403.754 281.841 cv
401.177 281.841 399.087 279.751 399.087 277.174 cv
399.087 274.597 401.177 272.507 403.754 272.507 cv
406.332 272.507 408.421 274.597 408.421 277.174 cv
cp
f
430.449 275.499 mo
430.449 278.076 428.359 280.166 425.782 280.166 cv
423.205 280.166 421.115 278.076 421.115 275.499 cv
421.115 272.922 423.205 270.832 425.782 270.832 cv
428.359 270.832 430.449 272.922 430.449 275.499 cv
cp
f
453.197 304.206 mo
453.197 306.783 451.107 308.873 448.53 308.873 cv
445.953 308.873 443.863 306.783 443.863 304.206 cv
443.863 301.629 445.953 299.539 448.53 299.539 cv
451.107 299.539 453.197 301.629 453.197 304.206 cv
cp
f
479.943 372.894 mo
479.943 375.471 477.853 377.561 475.276 377.561 cv
472.699 377.561 470.609 375.471 470.609 372.894 cv
470.609 370.316 472.699 368.227 475.276 368.227 cv
477.853 368.227 479.943 370.316 479.943 372.894 cv
cp
f
366.622 400.968 mo
366.622 403.545 364.532 405.635 361.955 405.635 cv
359.377 405.635 357.288 403.545 357.288 400.968 cv
357.288 398.391 359.377 396.301 361.955 396.301 cv
364.532 396.301 366.622 398.391 366.622 400.968 cv
cp
f
359.971 418.718 mo
359.971 421.295 357.881 423.385 355.304 423.385 cv
352.727 423.385 350.637 421.295 350.637 418.718 cv
350.637 416.141 352.727 414.051 355.304 414.051 cv
357.881 414.051 359.971 416.141 359.971 418.718 cv
cp
f
308.34 416.675 mo
308.34 419.252 306.25 421.342 303.673 421.342 cv
301.096 421.342 299.006 419.252 299.006 416.675 cv
299.006 414.098 301.096 412.008 303.673 412.008 cv
306.25 412.008 308.34 414.098 308.34 416.675 cv
cp
f
314.59 439.015 mo
314.59 441.592 312.5 443.682 309.923 443.682 cv
307.346 443.682 305.256 441.592 305.256 439.015 cv
305.256 436.438 307.346 434.348 309.923 434.348 cv
312.5 434.348 314.59 436.438 314.59 439.015 cv
cp
f
299.715 452.43 mo
299.715 455.007 297.625 457.097 295.048 457.097 cv
292.471 457.097 290.381 455.007 290.381 452.43 cv
290.381 449.853 292.471 447.763 295.048 447.763 cv
297.625 447.763 299.715 449.853 299.715 452.43 cv
cp
f
290.858 442.097 mo
290.858 444.674 288.768 446.764 286.191 446.764 cv
283.614 446.764 281.524 444.674 281.524 442.097 cv
281.524 439.52 283.614 437.43 286.191 437.43 cv
288.768 437.43 290.858 439.52 290.858 442.097 cv
cp
f
276.327 462.222 mo
276.327 464.799 274.237 466.889 271.66 466.889 cv
269.083 466.889 266.993 464.799 266.993 462.222 cv
266.993 459.645 269.083 457.555 271.66 457.555 cv
274.237 457.555 276.327 459.645 276.327 462.222 cv
cp
f
264.577 473.453 mo
264.577 476.03 262.487 478.12 259.91 478.12 cv
257.333 478.12 255.243 476.03 255.243 473.453 cv
255.243 470.876 257.333 468.786 259.91 468.786 cv
262.487 468.786 264.577 470.876 264.577 473.453 cv
cp
f
239.702 473.453 mo
239.702 476.03 237.612 478.12 235.035 478.12 cv
232.458 478.12 230.368 476.03 230.368 473.453 cv
230.368 470.876 232.458 468.786 235.035 468.786 cv
237.612 468.786 239.702 470.876 239.702 473.453 cv
cp
f
222.827 461.328 mo
222.827 463.905 220.737 465.995 218.16 465.995 cv
215.583 465.995 213.493 463.905 213.493 461.328 cv
213.493 458.751 215.583 456.661 218.16 456.661 cv
220.737 456.661 222.827 458.751 222.827 461.328 cv
cp
f
187.702 452.453 mo
187.702 455.03 185.612 457.12 183.035 457.12 cv
180.458 457.12 178.368 455.03 178.368 452.453 cv
178.368 449.876 180.458 447.786 183.035 447.786 cv
185.612 447.786 187.702 449.876 187.702 452.453 cv
cp
f
176.452 442.203 mo
176.452 444.78 174.362 446.87 171.785 446.87 cv
169.208 446.87 167.118 444.78 167.118 442.203 cv
167.118 439.626 169.208 437.536 171.785 437.536 cv
174.362 437.536 176.452 439.626 176.452 442.203 cv
cp
f
182.452 433.14 mo
182.452 435.717 180.362 437.807 177.785 437.807 cv
175.208 437.807 173.118 435.717 173.118 433.14 cv
173.118 430.563 175.208 428.473 177.785 428.473 cv
180.362 428.473 182.452 430.563 182.452 433.14 cv
cp
f
196.484 422.39 mo
196.484 424.967 194.395 427.057 191.817 427.057 cv
189.24 427.057 187.15 424.967 187.15 422.39 cv
187.15 419.813 189.24 417.723 191.817 417.723 cv
194.395 417.723 196.484 419.813 196.484 422.39 cv
cp
f
233.557 427.765 mo
233.557 430.342 231.467 432.432 228.89 432.432 cv
226.313 432.432 224.223 430.342 224.223 427.765 cv
224.223 425.188 226.313 423.098 228.89 423.098 cv
231.467 423.098 233.557 425.188 233.557 427.765 cv
cp
f
209.682 392.988 mo
209.682 395.565 207.592 397.655 205.015 397.655 cv
202.438 397.655 200.348 395.565 200.348 392.988 cv
200.348 390.411 202.438 388.321 205.015 388.321 cv
207.592 388.321 209.682 390.411 209.682 392.988 cv
cp
f
241.182 387.988 mo
241.182 390.565 239.092 392.655 236.515 392.655 cv
233.938 392.655 231.848 390.565 231.848 387.988 cv
231.848 385.411 233.938 383.321 236.515 383.321 cv
239.092 383.321 241.182 385.411 241.182 387.988 cv
cp
f
238.722 371.363 mo
238.722 373.94 236.632 376.03 234.055 376.03 cv
231.478 376.03 229.388 373.94 229.388 371.363 cv
229.388 368.786 231.478 366.696 234.055 366.696 cv
236.632 366.696 238.722 368.786 238.722 371.363 cv
cp
f
181.972 365.627 mo
181.972 368.204 179.882 370.294 177.305 370.294 cv
174.728 370.294 172.638 368.204 172.638 365.627 cv
172.638 363.05 174.728 360.96 177.305 360.96 cv
179.882 360.96 181.972 363.05 181.972 365.627 cv
cp
f
160.847 388.127 mo
160.847 390.704 158.757 392.794 156.18 392.794 cv
153.603 392.794 151.513 390.704 151.513 388.127 cv
151.513 385.55 153.603 383.46 156.18 383.46 cv
158.757 383.46 160.847 385.55 160.847 388.127 cv
cp
f
160.472 405.627 mo
160.472 408.204 158.382 410.294 155.805 410.294 cv
153.228 410.294 151.138 408.204 151.138 405.627 cv
151.138 403.05 153.228 400.96 155.805 400.96 cv
158.382 400.96 160.472 403.05 160.472 405.627 cv
cp
f
140.847 395.707 mo
140.847 398.284 138.757 400.374 136.18 400.374 cv
133.603 400.374 131.513 398.284 131.513 395.707 cv
131.513 393.13 133.603 391.04 136.18 391.04 cv
138.757 391.04 140.847 393.13 140.847 395.707 cv
cp
f
148.597 412.67 mo
148.597 415.247 146.507 417.337 143.93 417.337 cv
141.353 417.337 139.263 415.247 139.263 412.67 cv
139.263 410.093 141.353 408.003 143.93 408.003 cv
146.507 408.003 148.597 410.093 148.597 412.67 cv
cp
f
131.722 415.74 mo
131.722 418.317 129.632 420.407 127.055 420.407 cv
124.478 420.407 122.388 418.317 122.388 415.74 cv
122.388 413.163 124.478 411.073 127.055 411.073 cv
129.632 411.073 131.722 413.163 131.722 415.74 cv
cp
f
118.097 410.394 mo
118.097 412.971 116.007 415.061 113.43 415.061 cv
110.853 415.061 108.763 412.971 108.763 410.394 cv
108.763 407.816 110.853 405.727 113.43 405.727 cv
116.007 405.727 118.097 407.816 118.097 410.394 cv
cp
f
126.266 366.894 mo
126.266 369.471 124.176 371.561 121.599 371.561 cv
119.021 371.561 116.932 369.471 116.932 366.894 cv
116.932 364.316 119.021 362.227 121.599 362.227 cv
124.176 362.227 126.266 364.316 126.266 366.894 cv
cp
f
106.667 360.87 mo
106.667 363.447 104.577 365.537 102 365.537 cv
99.4224 365.537 97.3325 363.447 97.3325 360.87 cv
97.3325 358.293 99.4224 356.203 102 356.203 cv
104.577 356.203 106.667 358.293 106.667 360.87 cv
cp
f
115.281 351.593 mo
115.281 354.17 113.191 356.26 110.614 356.26 cv
108.037 356.26 105.947 354.17 105.947 351.593 cv
105.947 349.016 108.037 346.926 110.614 346.926 cv
113.191 346.926 115.281 349.016 115.281 351.593 cv
cp
f
144.156 358.218 mo
144.156 360.795 142.066 362.885 139.489 362.885 cv
136.912 362.885 134.822 360.795 134.822 358.218 cv
134.822 355.641 136.912 353.551 139.489 353.551 cv
142.066 353.551 144.156 355.641 144.156 358.218 cv
cp
f
103.781 341.718 mo
103.781 344.295 101.691 346.385 99.1143 346.385 cv
96.5371 346.385 94.4473 344.295 94.4473 341.718 cv
94.4473 339.141 96.5371 337.051 99.1143 337.051 cv
101.691 337.051 103.781 339.141 103.781 341.718 cv
cp
f
117.542 330.343 mo
117.542 332.92 115.453 335.01 112.875 335.01 cv
110.298 335.01 108.208 332.92 108.208 330.343 cv
108.208 327.766 110.298 325.676 112.875 325.676 cv
115.453 325.676 117.542 327.766 117.542 330.343 cv
cp
f
134.667 330.093 mo
134.667 332.67 132.578 334.76 130 334.76 cv
127.423 334.76 125.333 332.67 125.333 330.093 cv
125.333 327.516 127.423 325.426 130 325.426 cv
132.578 325.426 134.667 327.516 134.667 330.093 cv
cp
f
154.542 330.093 mo
154.542 332.67 152.453 334.76 149.875 334.76 cv
147.298 334.76 145.208 332.67 145.208 330.093 cv
145.208 327.516 147.298 325.426 149.875 325.426 cv
152.453 325.426 154.542 327.516 154.542 330.093 cv
cp
f
81.8101 374.356 mo
81.8101 376.934 79.7202 379.023 77.1431 379.023 cv
74.5659 379.023 72.4761 376.934 72.4761 374.356 cv
72.4761 371.779 74.5659 369.689 77.1431 369.689 cv
79.7202 369.689 81.8101 371.779 81.8101 374.356 cv
cp
f
70.0068 355.718 mo
70.0068 358.295 67.917 360.385 65.3398 360.385 cv
62.7627 360.385 60.6729 358.295 60.6729 355.718 cv
60.6729 353.141 62.7627 351.051 65.3398 351.051 cv
67.917 351.051 70.0068 353.141 70.0068 355.718 cv
cp
f
56.6753 354.954 mo
56.6753 357.531 54.5854 359.621 52.0083 359.621 cv
49.4312 359.621 47.3413 357.531 47.3413 354.954 cv
47.3413 352.377 49.4312 350.287 52.0083 350.287 cv
54.5854 350.287 56.6753 352.377 56.6753 354.954 cv
cp
f
34.6021 369.579 mo
34.6021 372.156 32.5122 374.246 29.9351 374.246 cv
27.3579 374.246 25.2681 372.156 25.2681 369.579 cv
25.2681 367.002 27.3579 364.912 29.9351 364.912 cv
32.5122 364.912 34.6021 367.002 34.6021 369.579 cv
cp
f
29.7271 355.663 mo
29.7271 358.24 27.6372 360.33 25.0601 360.33 cv
22.4829 360.33 20.3931 358.24 20.3931 355.663 cv
20.3931 353.086 22.4829 350.996 25.0601 350.996 cv
27.6372 350.996 29.7271 353.086 29.7271 355.663 cv
cp
f
29.9771 337.663 mo
29.9771 340.24 27.8872 342.33 25.3101 342.33 cv
22.7329 342.33 20.6431 340.24 20.6431 337.663 cv
20.6431 335.086 22.7329 332.996 25.3101 332.996 cv
27.8872 332.996 29.9771 335.086 29.9771 337.663 cv
cp
f
60.4839 336.788 mo
60.4839 339.365 58.394 341.455 55.8169 341.455 cv
53.2397 341.455 51.1499 339.365 51.1499 336.788 cv
51.1499 334.211 53.2397 332.121 55.8169 332.121 cv
58.394 332.121 60.4839 334.211 60.4839 336.788 cv
cp
f
45.3262 328.065 mo
45.3262 330.643 43.2363 332.732 40.6592 332.732 cv
38.082 332.732 35.9922 330.643 35.9922 328.065 cv
35.9922 325.488 38.082 323.398 40.6592 323.398 cv
43.2363 323.398 45.3262 325.488 45.3262 328.065 cv
cp
f
33.6143 298.44 mo
33.6143 301.018 31.5244 303.107 28.9473 303.107 cv
26.3701 303.107 24.2803 301.018 24.2803 298.44 cv
24.2803 295.863 26.3701 293.773 28.9473 293.773 cv
31.5244 293.773 33.6143 295.863 33.6143 298.44 cv
cp
f
63.7598 295.002 mo
63.7598 297.58 61.6699 299.669 59.0928 299.669 cv
56.5156 299.669 54.4258 297.58 54.4258 295.002 cv
54.4258 292.425 56.5156 290.335 59.0928 290.335 cv
61.6699 290.335 63.7598 292.425 63.7598 295.002 cv
cp
f
80.8848 259.423 mo
80.8848 262 78.7949 264.09 76.2178 264.09 cv
73.6406 264.09 71.5508 262 71.5508 259.423 cv
71.5508 256.846 73.6406 254.756 76.2178 254.756 cv
78.7949 254.756 80.8848 256.846 80.8848 259.423 cv
cp
f
59.0098 238.448 mo
59.0098 241.025 56.9199 243.115 54.3428 243.115 cv
51.7656 243.115 49.6758 241.025 49.6758 238.448 cv
49.6758 235.871 51.7656 233.781 54.3428 233.781 cv
56.9199 233.781 59.0098 235.871 59.0098 238.448 cv
cp
f
51.5171 247.854 mo
51.5171 250.431 49.4272 252.521 46.8501 252.521 cv
44.2729 252.521 42.1831 250.431 42.1831 247.854 cv
42.1831 245.276 44.2729 243.187 46.8501 243.187 cv
49.4272 243.187 51.5171 245.276 51.5171 247.854 cv
cp
f
98.3994 253.718 mo
98.3994 256.295 96.3096 258.385 93.7324 258.385 cv
91.1553 258.385 89.0654 256.295 89.0654 253.718 cv
89.0654 251.141 91.1553 249.051 93.7324 249.051 cv
96.3096 249.051 98.3994 251.141 98.3994 253.718 cv
cp
f
72.0879 220.344 mo
72.0879 222.921 69.998 225.011 67.4209 225.011 cv
64.8438 225.011 62.7539 222.921 62.7539 220.344 cv
62.7539 217.767 64.8438 215.677 67.4209 215.677 cv
69.998 215.677 72.0879 217.767 72.0879 220.344 cv
cp
f
87.8438 209.439 mo
87.8438 212.016 85.7539 214.106 83.1768 214.106 cv
80.5996 214.106 78.5098 212.016 78.5098 209.439 cv
78.5098 206.862 80.5996 204.772 83.1768 204.772 cv
85.7539 204.772 87.8438 206.862 87.8438 209.439 cv
cp
f
110.818 192.614 mo
110.818 195.191 108.729 197.281 106.151 197.281 cv
103.574 197.281 101.484 195.191 101.484 192.614 cv
101.484 190.037 103.574 187.947 106.151 187.947 cv
108.729 187.947 110.818 190.037 110.818 192.614 cv
cp
f
119.469 184.16 mo
119.469 186.737 117.379 188.827 114.802 188.827 cv
112.225 188.827 110.135 186.737 110.135 184.16 cv
110.135 181.583 112.225 179.493 114.802 179.493 cv
117.379 179.493 119.469 181.583 119.469 184.16 cv
cp
f
140.563 192.106 mo
140.563 194.684 138.473 196.773 135.896 196.773 cv
133.319 196.773 131.229 194.684 131.229 192.106 cv
131.229 189.529 133.319 187.439 135.896 187.439 cv
138.473 187.439 140.563 189.529 140.563 192.106 cv
cp
f
134.468 173.442 mo
134.468 176.02 132.378 178.109 129.801 178.109 cv
127.224 178.109 125.134 176.02 125.134 173.442 cv
125.134 170.865 127.224 168.775 129.801 168.775 cv
132.378 168.775 134.468 170.865 134.468 173.442 cv
cp
f
154.218 158.872 mo
154.218 161.449 152.128 163.539 149.551 163.539 cv
146.974 163.539 144.884 161.449 144.884 158.872 cv
144.884 156.295 146.974 154.205 149.551 154.205 cv
152.128 154.205 154.218 156.295 154.218 158.872 cv
cp
f
151.968 192.817 mo
151.968 195.395 149.878 197.484 147.301 197.484 cv
144.724 197.484 142.634 195.395 142.634 192.817 cv
142.634 190.24 144.724 188.15 147.301 188.15 cv
149.878 188.15 151.968 190.24 151.968 192.817 cv
cp
f
223.093 140.942 mo
223.093 143.52 221.003 145.609 218.426 145.609 cv
215.849 145.609 213.759 143.52 213.759 140.942 cv
213.759 138.365 215.849 136.275 218.426 136.275 cv
221.003 136.275 223.093 138.365 223.093 140.942 cv
cp
f
215.559 123.317 mo
215.559 125.895 213.469 127.984 210.892 127.984 cv
208.315 127.984 206.225 125.895 206.225 123.317 cv
206.225 120.74 208.315 118.65 210.892 118.65 cv
213.469 118.65 215.559 120.74 215.559 123.317 cv
cp
f
240.059 115.151 mo
240.059 117.728 237.969 119.818 235.392 119.818 cv
232.815 119.818 230.725 117.728 230.725 115.151 cv
230.725 112.574 232.815 110.484 235.392 110.484 cv
237.969 110.484 240.059 112.574 240.059 115.151 cv
cp
f
249.642 119.758 mo
249.642 122.335 247.552 124.425 244.975 124.425 cv
242.398 124.425 240.308 122.335 240.308 119.758 cv
240.308 117.181 242.398 115.091 244.975 115.091 cv
247.552 115.091 249.642 117.181 249.642 119.758 cv
cp
f
260.726 131.008 mo
260.726 133.585 258.636 135.675 256.059 135.675 cv
253.481 135.675 251.392 133.585 251.392 131.008 cv
251.392 128.431 253.481 126.341 256.059 126.341 cv
258.636 126.341 260.726 128.431 260.726 131.008 cv
cp
f
276.392 135.841 mo
276.392 138.418 274.302 140.508 271.725 140.508 cv
269.147 140.508 267.058 138.418 267.058 135.841 cv
267.058 133.264 269.147 131.174 271.725 131.174 cv
274.302 131.174 276.392 133.264 276.392 135.841 cv
cp
f
293.892 144.341 mo
293.892 146.918 291.802 149.008 289.225 149.008 cv
286.647 149.008 284.558 146.918 284.558 144.341 cv
284.558 141.764 286.647 139.674 289.225 139.674 cv
291.802 139.674 293.892 141.764 293.892 144.341 cv
cp
f
285.083 110.258 mo
285.083 112.835 282.994 114.925 280.417 114.925 cv
277.839 114.925 275.75 112.835 275.75 110.258 cv
275.75 107.681 277.839 105.591 280.417 105.591 cv
282.994 105.591 285.083 107.681 285.083 110.258 cv
cp
f
307.667 109.637 mo
307.667 112.214 305.577 114.304 303 114.304 cv
300.423 114.304 298.333 112.214 298.333 109.637 cv
298.333 107.06 300.423 104.97 303 104.97 cv
305.577 104.97 307.667 107.06 307.667 109.637 cv
cp
f
323.667 110.303 mo
323.667 112.88 321.577 114.97 319 114.97 cv
316.423 114.97 314.333 112.88 314.333 110.303 cv
314.333 107.726 316.423 105.636 319 105.636 cv
321.577 105.636 323.667 107.726 323.667 110.303 cv
cp
f
336.5 111.22 mo
336.5 113.797 334.41 115.887 331.833 115.887 cv
329.256 115.887 327.166 113.797 327.166 111.22 cv
327.166 108.643 329.256 106.553 331.833 106.553 cv
334.41 106.553 336.5 108.643 336.5 111.22 cv
cp
f
354.667 112.958 mo
354.667 115.535 352.577 117.625 350 117.625 cv
347.423 117.625 345.333 115.535 345.333 112.958 cv
345.333 110.381 347.423 108.291 350 108.291 cv
352.577 108.291 354.667 110.381 354.667 112.958 cv
cp
f
366.943 114.275 mo
366.943 116.853 364.853 118.942 362.277 118.942 cv
359.7 118.942 357.61 116.853 357.61 114.275 cv
357.61 111.698 359.7 109.608 362.277 109.608 cv
364.853 109.608 366.943 111.698 366.943 114.275 cv
cp
f
390.679 137.662 mo
390.679 140.239 388.589 142.329 386.013 142.329 cv
383.436 142.329 381.346 140.239 381.346 137.662 cv
381.346 135.084 383.436 132.995 386.013 132.995 cv
388.589 132.995 390.679 135.084 390.679 137.662 cv
cp
f
412.561 123.995 mo
412.561 126.572 410.471 128.662 407.895 128.662 cv
405.318 128.662 403.228 126.572 403.228 123.995 cv
403.228 121.417 405.318 119.328 407.895 119.328 cv
410.471 119.328 412.561 121.417 412.561 123.995 cv
cp
f
420.894 151.328 mo
420.894 153.905 418.804 155.995 416.228 155.995 cv
413.651 155.995 411.561 153.905 411.561 151.328 cv
411.561 148.751 413.651 146.661 416.228 146.661 cv
418.804 146.661 420.894 148.751 420.894 151.328 cv
cp
f
432.481 160.578 mo
432.481 163.155 430.391 165.245 427.815 165.245 cv
425.238 165.245 423.148 163.155 423.148 160.578 cv
423.148 158.001 425.238 155.911 427.815 155.911 cv
430.391 155.911 432.481 158.001 432.481 160.578 cv
cp
f
444.561 136.078 mo
444.561 138.655 442.471 140.745 439.895 140.745 cv
437.318 140.745 435.228 138.655 435.228 136.078 cv
435.228 133.501 437.318 131.411 439.895 131.411 cv
442.471 131.411 444.561 133.501 444.561 136.078 cv
cp
f
471.094 158.662 mo
471.094 161.239 469.004 163.329 466.428 163.329 cv
463.851 163.329 461.761 161.239 461.761 158.662 cv
461.761 156.084 463.851 153.995 466.428 153.995 cv
469.004 153.995 471.094 156.084 471.094 158.662 cv
cp
f
482.344 178.044 mo
482.344 180.622 480.254 182.711 477.678 182.711 cv
475.101 182.711 473.011 180.622 473.011 178.044 cv
473.011 175.467 475.101 173.377 477.678 173.377 cv
480.254 173.377 482.344 175.467 482.344 178.044 cv
cp
f
467.473 189.294 mo
467.473 191.872 465.383 193.961 462.807 193.961 cv
460.23 193.961 458.14 191.872 458.14 189.294 cv
458.14 186.717 460.23 184.627 462.807 184.627 cv
465.383 184.627 467.473 186.717 467.473 189.294 cv
cp
f
498.473 160.628 mo
498.473 163.205 496.383 165.295 493.807 165.295 cv
491.23 165.295 489.14 163.205 489.14 160.628 cv
489.14 158.051 491.23 155.961 493.807 155.961 cv
496.383 155.961 498.473 158.051 498.473 160.628 cv
cp
f
524.39 178.344 mo
524.39 180.921 522.3 183.011 519.724 183.011 cv
517.147 183.011 515.057 180.921 515.057 178.344 cv
515.057 175.767 517.147 173.677 519.724 173.677 cv
522.3 173.677 524.39 175.767 524.39 178.344 cv
cp
f
537.974 187.692 mo
537.974 190.27 535.884 192.359 533.308 192.359 cv
530.731 192.359 528.641 190.27 528.641 187.692 cv
528.641 185.115 530.731 183.025 533.308 183.025 cv
535.884 183.025 537.974 185.115 537.974 187.692 cv
cp
f
546.224 196.276 mo
546.224 198.853 544.134 200.943 541.558 200.943 cv
538.981 200.943 536.891 198.853 536.891 196.276 cv
536.891 193.699 538.981 191.609 541.558 191.609 cv
544.134 191.609 546.224 193.699 546.224 196.276 cv
cp
f
559.474 211.692 mo
559.474 214.27 557.384 216.359 554.808 216.359 cv
552.231 216.359 550.141 214.27 550.141 211.692 cv
550.141 209.115 552.231 207.025 554.808 207.025 cv
557.384 207.025 559.474 209.115 559.474 211.692 cv
cp
f
570.557 224.609 mo
570.557 227.187 568.467 229.276 565.891 229.276 cv
563.314 229.276 561.224 227.187 561.224 224.609 cv
561.224 222.032 563.314 219.942 565.891 219.942 cv
568.467 219.942 570.557 222.032 570.557 224.609 cv
cp
f
572.057 236.443 mo
572.057 239.02 569.967 241.11 567.391 241.11 cv
564.814 241.11 562.724 239.02 562.724 236.443 cv
562.724 233.866 564.814 231.776 567.391 231.776 cv
569.967 231.776 572.057 233.866 572.057 236.443 cv
cp
f
538.474 232.591 mo
538.474 235.168 536.384 237.258 533.808 237.258 cv
531.231 237.258 529.141 235.168 529.141 232.591 cv
529.141 230.014 531.231 227.924 533.808 227.924 cv
536.384 227.924 538.474 230.014 538.474 232.591 cv
cp
f
554.641 246.091 mo
554.641 248.668 552.551 250.758 549.975 250.758 cv
547.398 250.758 545.308 248.668 545.308 246.091 cv
545.308 243.514 547.398 241.424 549.975 241.424 cv
552.551 241.424 554.641 243.514 554.641 246.091 cv
cp
f
566.808 269.925 mo
566.808 272.502 564.718 274.592 562.142 274.592 cv
559.565 274.592 557.475 272.502 557.475 269.925 cv
557.475 267.348 559.565 265.258 562.142 265.258 cv
564.718 265.258 566.808 267.348 566.808 269.925 cv
cp
f
576.891 277.097 mo
576.891 279.674 574.801 281.764 572.225 281.764 cv
569.648 281.764 567.558 279.674 567.558 277.097 cv
567.558 274.52 569.648 272.43 572.225 272.43 cv
574.801 272.43 576.891 274.52 576.891 277.097 cv
cp
f
562.141 286.068 mo
562.141 288.646 560.051 290.735 557.475 290.735 cv
554.898 290.735 552.808 288.646 552.808 286.068 cv
552.808 283.491 554.898 281.401 557.475 281.401 cv
560.051 281.401 562.141 283.491 562.141 286.068 cv
cp
f
570.518 302.568 mo
570.518 305.146 568.428 307.235 565.852 307.235 cv
563.275 307.235 561.185 305.146 561.185 302.568 cv
561.185 299.991 563.275 297.901 565.852 297.901 cv
568.428 297.901 570.518 299.991 570.518 302.568 cv
cp
f
545.101 318.152 mo
545.101 320.729 543.011 322.819 540.435 322.819 cv
537.858 322.819 535.768 320.729 535.768 318.152 cv
535.768 315.575 537.858 313.485 540.435 313.485 cv
543.011 313.485 545.101 315.575 545.101 318.152 cv
cp
f
528.101 317.235 mo
528.101 319.812 526.011 321.902 523.435 321.902 cv
520.858 321.902 518.768 319.812 518.768 317.235 cv
518.768 314.658 520.858 312.568 523.435 312.568 cv
526.011 312.568 528.101 314.658 528.101 317.235 cv
cp
f
512.601 316.735 mo
512.601 319.312 510.511 321.402 507.935 321.402 cv
505.358 321.402 503.268 319.312 503.268 316.735 cv
503.268 314.158 505.358 312.068 507.935 312.068 cv
510.511 312.068 512.601 314.158 512.601 316.735 cv
cp
f
513.518 349.901 mo
513.518 352.479 511.428 354.568 508.852 354.568 cv
506.275 354.568 504.185 352.479 504.185 349.901 cv
504.185 347.324 506.275 345.234 508.852 345.234 cv
511.428 345.234 513.518 347.324 513.518 349.901 cv
cp
f
564.518 336.652 mo
564.518 339.229 562.428 341.319 559.852 341.319 cv
557.275 341.319 555.185 339.229 555.185 336.652 cv
555.185 334.075 557.275 331.985 559.852 331.985 cv
562.428 331.985 564.518 334.075 564.518 336.652 cv
cp
f
601.601 349.985 mo
601.601 352.563 599.511 354.652 596.935 354.652 cv
594.358 354.652 592.268 352.563 592.268 349.985 cv
592.268 347.408 594.358 345.318 596.935 345.318 cv
599.511 345.318 601.601 347.408 601.601 349.985 cv
cp
f
586.321 368.151 mo
586.321 370.729 584.231 372.818 581.655 372.818 cv
579.078 372.818 576.988 370.729 576.988 368.151 cv
576.988 365.574 579.078 363.484 581.655 363.484 cv
584.231 363.484 586.321 365.574 586.321 368.151 cv
cp
f
540.405 361.984 mo
540.405 364.562 538.315 366.651 535.739 366.651 cv
533.162 366.651 531.072 364.562 531.072 361.984 cv
531.072 359.407 533.162 357.317 535.739 357.317 cv
538.315 357.317 540.405 359.407 540.405 361.984 cv
cp
f
544.572 390.15 mo
544.572 392.728 542.482 394.817 539.906 394.817 cv
537.329 394.817 535.239 392.728 535.239 390.15 cv
535.239 387.573 537.329 385.483 539.906 385.483 cv
542.482 385.483 544.572 387.573 544.572 390.15 cv
cp
f
559.003 387.607 mo
559.003 390.185 556.914 392.274 554.337 392.274 cv
551.76 392.274 549.67 390.185 549.67 387.607 cv
549.67 385.03 551.76 382.94 554.337 382.94 cv
556.914 382.94 559.003 385.03 559.003 387.607 cv
cp
f
508.003 383.657 mo
508.003 386.234 505.914 388.324 503.337 388.324 cv
500.76 388.324 498.67 386.234 498.67 383.657 cv
498.67 381.08 500.76 378.99 503.337 378.99 cv
505.914 378.99 508.003 381.08 508.003 383.657 cv
cp
f
584.528 264.681 mo
584.528 267.258 582.438 269.348 579.862 269.348 cv
577.285 269.348 575.195 267.258 575.195 264.681 cv
575.195 262.104 577.285 260.014 579.862 260.014 cv
582.438 260.014 584.528 262.104 584.528 264.681 cv
cp
f
591.778 253.431 mo
591.778 256.008 589.688 258.098 587.112 258.098 cv
584.535 258.098 582.445 256.008 582.445 253.431 cv
582.445 250.854 584.535 248.764 587.112 248.764 cv
589.688 248.764 591.778 250.854 591.778 253.431 cv
cp
f
196.559 148.794 mo
196.559 151.372 194.469 153.461 191.892 153.461 cv
189.315 153.461 187.225 151.372 187.225 148.794 cv
187.225 146.217 189.315 144.127 191.892 144.127 cv
194.469 144.127 196.559 146.217 196.559 148.794 cv
cp
f
208.684 153.358 mo
208.684 155.935 206.594 158.025 204.017 158.025 cv
201.44 158.025 199.35 155.935 199.35 153.358 cv
199.35 150.781 201.44 148.691 204.017 148.691 cv
206.594 148.691 208.684 150.781 208.684 153.358 cv
cp
f
226.597 180.858 mo
226.597 183.435 224.507 185.525 221.93 185.525 cv
219.353 185.525 217.263 183.435 217.263 180.858 cv
217.263 178.281 219.353 176.191 221.93 176.191 cv
224.507 176.191 226.597 178.281 226.597 180.858 cv
cp
f
215.828 206.858 mo
215.828 209.435 213.738 211.525 211.161 211.525 cv
208.583 211.525 206.494 209.435 206.494 206.858 cv
206.494 204.281 208.583 202.191 211.161 202.191 cv
213.738 202.191 215.828 204.281 215.828 206.858 cv
cp
f
193.453 237.958 mo
193.453 240.535 191.363 242.625 188.786 242.625 cv
186.208 242.625 184.119 240.535 184.119 237.958 cv
184.119 235.38 186.208 233.291 188.786 233.291 cv
191.363 233.291 193.453 235.38 193.453 237.958 cv
cp
f
184.107 251.708 mo
184.107 254.285 182.018 256.375 179.44 256.375 cv
176.863 256.375 174.773 254.285 174.773 251.708 cv
174.773 249.13 176.863 247.041 179.44 247.041 cv
182.018 247.041 184.107 249.13 184.107 251.708 cv
cp
f
196.392 282.583 mo
196.392 285.16 194.302 287.25 191.725 287.25 cv
189.147 287.25 187.058 285.16 187.058 282.583 cv
187.058 280.005 189.147 277.916 191.725 277.916 cv
194.302 277.916 196.392 280.005 196.392 282.583 cv
cp
f
244.767 277.833 mo
244.767 280.41 242.677 282.5 240.1 282.5 cv
237.522 282.5 235.433 280.41 235.433 277.833 cv
235.433 275.255 237.522 273.166 240.1 273.166 cv
242.677 273.166 244.767 275.255 244.767 277.833 cv
cp
f
249.365 291.094 mo
249.365 293.671 247.275 295.761 244.698 295.761 cv
242.121 295.761 240.031 293.671 240.031 291.094 cv
240.031 288.517 242.121 286.427 244.698 286.427 cv
247.275 286.427 249.365 288.517 249.365 291.094 cv
cp
f
233.615 292.231 mo
233.615 294.808 231.525 296.898 228.948 296.898 cv
226.371 296.898 224.281 294.808 224.281 292.231 cv
224.281 289.654 226.371 287.564 228.948 287.564 cv
231.525 287.564 233.615 289.654 233.615 292.231 cv
cp
f
206.115 294.442 mo
206.115 297.019 204.025 299.109 201.448 299.109 cv
198.871 299.109 196.781 297.019 196.781 294.442 cv
196.781 291.865 198.871 289.775 201.448 289.775 cv
204.025 289.775 206.115 291.865 206.115 294.442 cv
cp
f
178.845 309.067 mo
178.845 311.644 176.755 313.734 174.178 313.734 cv
171.601 313.734 169.511 311.644 169.511 309.067 cv
169.511 306.49 171.601 304.4 174.178 304.4 cv
176.755 304.4 178.845 306.49 178.845 309.067 cv
cp
f
185.125 328.817 mo
185.125 331.394 183.035 333.484 180.458 333.484 cv
177.88 333.484 175.791 331.394 175.791 328.817 cv
175.791 326.24 177.88 324.15 180.458 324.15 cv
183.035 324.15 185.125 326.24 185.125 328.817 cv
cp
f
182.843 214.817 mo
182.843 217.395 180.753 219.484 178.176 219.484 cv
175.599 219.484 173.509 217.395 173.509 214.817 cv
173.509 212.24 175.599 210.15 178.176 210.15 cv
180.753 210.15 182.843 212.24 182.843 214.817 cv
cp
f
105.385 296.801 mo
105.385 299.378 103.295 301.468 100.718 301.468 cv
98.1406 301.468 96.0508 299.378 96.0508 296.801 cv
96.0508 294.224 98.1406 292.134 100.718 292.134 cv
103.295 292.134 105.385 294.224 105.385 296.801 cv
cp
f
148.51 303.676 mo
148.51 306.253 146.42 308.343 143.843 308.343 cv
141.266 308.343 139.176 306.253 139.176 303.676 cv
139.176 301.099 141.266 299.009 143.843 299.009 cv
146.42 299.009 148.51 301.099 148.51 303.676 cv
cp
f
48.6021 387.329 mo
48.6021 389.906 46.5122 391.996 43.9351 391.996 cv
41.3579 391.996 39.2681 389.906 39.2681 387.329 cv
39.2681 384.752 41.3579 382.662 43.9351 382.662 cv
46.5122 382.662 48.6021 384.752 48.6021 387.329 cv
cp
f
57.2173 394.829 mo
57.2173 397.406 55.1274 399.496 52.5503 399.496 cv
49.9731 399.496 47.8833 397.406 47.8833 394.829 cv
47.8833 392.252 49.9731 390.162 52.5503 390.162 cv
55.1274 390.162 57.2173 392.252 57.2173 394.829 cv
cp
f
167.847 414.583 mo
167.847 417.16 165.757 419.25 163.18 419.25 cv
160.603 419.25 158.513 417.16 158.513 414.583 cv
158.513 412.006 160.603 409.916 163.18 409.916 cv
165.757 409.916 167.847 412.006 167.847 414.583 cv
cp
f
261.702 461.221 mo
261.702 463.798 259.612 465.888 257.035 465.888 cv
254.458 465.888 252.368 463.798 252.368 461.221 cv
252.368 458.644 254.458 456.554 257.035 456.554 cv
259.612 456.554 261.702 458.644 261.702 461.221 cv
cp
f
325.316 447.599 mo
325.316 450.176 323.226 452.266 320.649 452.266 cv
318.072 452.266 315.982 450.176 315.982 447.599 cv
315.982 445.021 318.072 442.932 320.649 442.932 cv
323.226 442.932 325.316 445.021 325.316 447.599 cv
cp
f
378.971 389.868 mo
378.971 392.445 376.881 394.535 374.304 394.535 cv
371.727 394.535 369.637 392.445 369.637 389.868 cv
369.637 387.291 371.727 385.201 374.304 385.201 cv
376.881 385.201 378.971 387.291 378.971 389.868 cv
cp
f
344.818 389.868 mo
344.818 392.445 342.728 394.535 340.151 394.535 cv
337.574 394.535 335.484 392.445 335.484 389.868 cv
335.484 387.291 337.574 385.201 340.151 385.201 cv
342.728 385.201 344.818 387.291 344.818 389.868 cv
cp
f
338.193 366.397 mo
338.193 368.975 336.103 371.064 333.526 371.064 cv
330.949 371.064 328.859 368.975 328.859 366.397 cv
328.859 363.82 330.949 361.73 333.526 361.73 cv
336.103 361.73 338.193 363.82 338.193 366.397 cv
cp
f
302.846 363.863 mo
302.846 366.44 300.756 368.53 298.179 368.53 cv
295.602 368.53 293.512 366.44 293.512 363.863 cv
293.512 361.286 295.602 359.196 298.179 359.196 cv
300.756 359.196 302.846 361.286 302.846 363.863 cv
cp
f
304.512 350.03 mo
304.512 352.607 302.422 354.697 299.845 354.697 cv
297.268 354.697 295.178 352.607 295.178 350.03 cv
295.178 347.453 297.268 345.363 299.845 345.363 cv
302.422 345.363 304.512 347.453 304.512 350.03 cv
cp
f
303.624 329.28 mo
303.624 331.857 301.534 333.947 298.957 333.947 cv
296.379 333.947 294.29 331.857 294.29 329.28 cv
294.29 326.703 296.379 324.613 298.957 324.613 cv
301.534 324.613 303.624 326.703 303.624 329.28 cv
cp
f
293.298 306.28 mo
293.298 308.857 291.208 310.947 288.631 310.947 cv
286.054 310.947 283.964 308.857 283.964 306.28 cv
283.964 303.703 286.054 301.613 288.631 301.613 cv
291.208 301.613 293.298 303.703 293.298 306.28 cv
cp
f
286.131 296.613 mo
286.131 299.19 284.042 301.28 281.464 301.28 cv
278.887 301.28 276.797 299.19 276.797 296.613 cv
276.797 294.036 278.887 291.946 281.464 291.946 cv
284.042 291.946 286.131 294.036 286.131 296.613 cv
cp
f
302.715 273.929 mo
302.715 276.506 300.625 278.596 298.048 278.596 cv
295.471 278.596 293.381 276.506 293.381 273.929 cv
293.381 271.352 295.471 269.262 298.048 269.262 cv
300.625 269.262 302.715 271.352 302.715 273.929 cv
cp
f
281.298 246.095 mo
281.298 248.672 279.208 250.762 276.631 250.762 cv
274.054 250.762 271.964 248.672 271.964 246.095 cv
271.964 243.518 274.054 241.428 276.631 241.428 cv
279.208 241.428 281.298 243.518 281.298 246.095 cv
cp
f
315.298 280.981 mo
315.298 283.559 313.208 285.648 310.631 285.648 cv
308.054 285.648 305.964 283.559 305.964 280.981 cv
305.964 278.404 308.054 276.314 310.631 276.314 cv
313.208 276.314 315.298 278.404 315.298 280.981 cv
cp
f
339.58 292.609 mo
339.58 295.186 337.49 297.276 334.913 297.276 cv
332.335 297.276 330.246 295.186 330.246 292.609 cv
330.246 290.032 332.335 287.942 334.913 287.942 cv
337.49 287.942 339.58 290.032 339.58 292.609 cv
cp
f
323.79 340.859 mo
323.79 343.436 321.7 345.526 319.123 345.526 cv
316.546 345.526 314.456 343.436 314.456 340.859 cv
314.456 338.282 316.546 336.192 319.123 336.192 cv
321.7 336.192 323.79 338.282 323.79 340.859 cv
cp
f
476.891 430.654 mo
476.891 433.231 474.801 435.321 472.224 435.321 cv
469.647 435.321 467.557 433.231 467.557 430.654 cv
467.557 428.077 469.647 425.987 472.224 425.987 cv
474.801 425.987 476.891 428.077 476.891 430.654 cv
cp
f
477.766 409.214 mo
477.766 411.791 475.676 413.881 473.099 413.881 cv
470.522 413.881 468.432 411.791 468.432 409.214 cv
468.432 406.637 470.522 404.547 473.099 404.547 cv
475.676 404.547 477.766 406.637 477.766 409.214 cv
cp
f
487.891 434.101 mo
487.891 436.678 485.801 438.768 483.224 438.768 cv
480.647 438.768 478.557 436.678 478.557 434.101 cv
478.557 431.523 480.647 429.434 483.224 429.434 cv
485.801 429.434 487.891 431.523 487.891 434.101 cv
cp
f
478.779 44.8658 mo
475.192 44.8658 li
472.422 36.6987 li
463.213 36.6987 li
460.518 44.8658 li
457.046 44.8658 li
465.91 18.9018 li
469.916 18.9018 li
478.779 44.8658 li
467.76 21.8686 mo
467.375 23.3706 466.99 24.9878 466.452 26.5673 cv
463.906 34.0782 li
471.763 34.0782 li
469.184 26.6054 li
468.607 24.9117 468.221 23.3706 467.835 21.8686 cv
467.76 21.8686 li
level3{
gsave
clp
[1160.17 0 0 1160.17 342.819 402.826 ]ct
/1 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.596078 .596078 .596078 ]
/C1 [.772549 .772549 .772549 ]
/N 1.02184 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.596078 .596078 .596078 ]
/C1 [.596078 .596078 .596078 ]
/N 1 
>>
]
/Bounds [.721212 ]
/Encode [1 0 0 1 ]
>>
>>/Gradient add_res /1 /Gradient get_res clonedict shfill grestore
}if
np
491.643 45.2896 mo
488.945 45.2896 486.788 44.2491 485.362 41.8228 cv
485.288 41.8228 li
485.091 44.8658 li
482.203 44.8658 li
482.281 43.5948 482.358 41.7056 482.358 40.0498 cv
482.358 17.5152 li
485.709 17.5152 li
485.709 29.2261 li
485.786 29.2261 li
486.981 27.1459 489.136 25.835 492.14 25.835 cv
496.802 25.835 500.04 29.6866 500.04 35.3121 cv
500.04 41.9766 495.799 45.2896 491.643 45.2896 cv
491.025 28.4927 mo
488.75 28.4927 486.597 30.1109 485.901 32.6533 cv
485.786 33.0766 485.709 33.5405 485.709 34.0782 cv
485.709 37.3912 li
485.709 37.8145 485.748 38.2397 485.864 38.626 cv
486.478 40.9741 488.481 42.5933 490.951 42.5933 cv
494.53 42.5933 496.613 39.7035 496.613 35.4267 cv
496.613 31.6904 494.682 28.4927 491.025 28.4927 cv
level3{
gsave
clp
[1160.17 0 0 1160.17 342.819 402.826 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
np
508.242 45.2896 mo
506.2 45.2896 504.314 44.7505 503.002 43.9781 cv
503.81 41.4366 li
504.852 42.0538 506.622 42.7451 508.316 42.7451 cv
510.745 42.7451 511.901 41.5538 511.901 39.9736 cv
511.901 38.3545 510.938 37.5083 508.472 36.5836 cv
505.082 35.3505 503.504 33.5405 503.504 31.3057 cv
503.504 28.2998 505.969 25.835 509.939 25.835 cv
511.822 25.835 513.481 26.3355 514.484 26.9916 cv
513.674 29.4565 li
512.941 28.9941 511.593 28.3389 509.859 28.3389 cv
507.856 28.3389 506.777 29.4951 506.777 30.8824 cv
506.777 32.4229 507.856 33.1158 510.284 34.0782 cv
513.481 35.273 515.176 36.8916 515.176 39.6655 cv
515.176 42.9785 512.593 45.2896 508.242 45.2896 cv
level3{
gsave
clp
[1160.17 0 0 1160.17 342.819 402.826 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
np
525.266 45.2896 mo
523.686 45.2896 522.416 44.7505 521.605 43.8647 cv
520.684 42.8242 520.296 41.1675 520.296 38.9712 cv
520.296 28.8017 li
517.406 28.8017 li
517.406 26.2207 li
520.296 26.2207 li
520.296 22.7534 li
523.61 21.751 li
523.61 26.2207 li
528.463 26.2207 li
528.463 28.8017 li
523.61 28.8017 li
523.61 38.8569 li
523.61 41.1675 524.264 42.476 526.154 42.476 cv
527.079 42.476 527.617 42.3999 528.118 42.2461 cv
528.27 44.8282 li
527.617 45.0586 526.577 45.2896 525.266 45.2896 cv
level3{
gsave
clp
[1160.17 0 0 1160.17 342.819 402.826 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
np
535.667 44.8658 mo
532.277 44.8658 li
532.277 32.0372 li
532.277 29.8428 532.24 27.9546 532.123 26.2207 cv
535.087 26.2207 li
535.244 29.9184 li
535.357 29.9184 li
536.205 27.4141 538.286 25.835 540.558 25.835 cv
540.906 25.835 541.177 25.873 541.485 25.9122 cv
541.485 29.1094 li
541.136 29.0332 540.791 29.0332 540.327 29.0332 cv
537.939 29.0332 536.244 30.8041 535.784 33.3476 cv
535.704 33.81 535.667 34.3881 535.667 34.9278 cv
535.667 44.8658 li
level3{
gsave
clp
[1160.17 0 0 1160.17 342.819 402.826 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
np
548.917 45.2896 mo
545.142 45.2896 543.215 42.6313 543.215 39.9345 cv
543.215 35.4619 547.159 33 554.258 33 cv
554.314 33 554.369 33.0002 554.425 33.0005 cv
554.425 32.6152 li
554.425 31.1227 554.007 28.3385 550.268 28.3385 cv
550.242 28.3385 550.216 28.3387 550.19 28.3389 cv
548.415 28.3389 546.605 28.8398 545.294 29.7266 cv
544.526 27.4532 li
546.067 26.4889 548.339 25.835 550.69 25.835 cv
556.389 25.835 557.778 29.7266 557.778 33.4248 cv
557.778 40.3969 li
557.778 42.0146 557.854 43.5948 558.047 44.8658 cv
555.004 44.8658 li
554.733 42.5152 li
554.618 42.5152 li
553.579 43.9781 551.577 45.2896 548.917 45.2896 cv
553.953 35.3447 mo
550.4 35.3447 546.605 36.1064 546.605 39.5503 cv
546.605 41.7847 548.07 42.7851 549.765 42.7851 cv
552.23 42.7851 553.808 41.2442 554.351 39.6655 cv
554.462 39.2802 554.502 38.895 554.502 38.5869 cv
554.502 35.3505 li
554.32 35.3467 554.137 35.3447 553.953 35.3447 cv
level3{
gsave
clp
[1160.17 0 0 1160.17 342.819 402.826 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
np
571.18 45.2896 mo
565.556 45.2896 561.896 41.4746 561.896 35.774 cv
561.896 30.0337 565.824 25.835 571.912 25.835 cv
573.914 25.835 575.69 26.3355 576.612 26.8369 cv
575.841 29.4175 li
575.033 28.9941 573.762 28.5318 571.912 28.5318 cv
567.636 28.5318 565.327 31.7304 565.327 35.582 cv
565.327 39.8964 568.1 42.5552 571.798 42.5552 cv
573.721 42.5552 574.996 42.0919 575.958 41.6675 cv
576.537 44.2099 li
575.649 44.6353 573.686 45.2896 571.18 45.2896 cv
level3{
gsave
clp
[1160.17 0 0 1160.17 342.819 402.826 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
np
586.744 45.2896 mo
585.161 45.2896 583.892 44.7505 583.082 43.8647 cv
582.158 42.8242 581.772 41.1675 581.772 38.9712 cv
581.772 28.8017 li
578.882 28.8017 li
578.882 26.2207 li
581.772 26.2207 li
581.772 22.7534 li
585.085 21.751 li
585.085 26.2207 li
589.937 26.2207 li
589.937 28.8017 li
585.085 28.8017 li
585.085 38.8569 li
585.085 41.1675 585.739 42.476 587.627 42.476 cv
588.555 42.476 589.091 42.3999 589.593 42.2461 cv
589.745 44.8282 li
589.091 45.0586 588.052 45.2896 586.744 45.2896 cv
level3{
gsave
clp
[1160.17 0 0 1160.17 342.819 402.826 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
np
624.854 45.2896 mo
622.159 45.2896 620.001 44.2491 618.576 41.8228 cv
618.499 41.8228 li
618.306 44.8658 li
615.419 44.8658 li
615.494 43.5948 615.572 41.7056 615.572 40.0498 cv
615.572 17.5152 li
618.924 17.5152 li
618.924 29.2261 li
618.999 29.2261 li
620.192 27.1459 622.351 25.835 625.355 25.835 cv
630.019 25.835 633.253 29.6866 633.253 35.3121 cv
633.253 41.9766 629.016 45.2896 624.854 45.2896 cv
624.238 28.4927 mo
621.965 28.4927 619.808 30.1109 619.114 32.6533 cv
618.999 33.0766 618.924 33.5405 618.924 34.0782 cv
618.924 37.3912 li
618.924 37.8145 618.961 38.2397 619.077 38.626 cv
619.693 40.9741 621.694 42.5933 624.162 42.5933 cv
627.747 42.5933 629.826 39.7035 629.826 35.4267 cv
629.826 31.6904 627.899 28.4927 624.238 28.4927 cv
level3{
gsave
clp
[1160.17 0 0 1160.17 342.819 402.826 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
np
640.875 44.8658 mo
637.486 44.8658 li
637.486 32.0372 li
637.486 29.8428 637.449 27.9546 637.334 26.2207 cv
640.3 26.2207 li
640.453 29.9184 li
640.57 29.9184 li
641.416 27.4141 643.496 25.835 645.77 25.835 cv
646.115 25.835 646.386 25.873 646.693 25.9122 cv
646.693 29.1094 li
646.345 29.0332 646 29.0332 645.54 29.0332 cv
643.15 29.0332 641.456 30.8041 640.995 33.3476 cv
640.915 33.81 640.875 34.3881 640.875 34.9278 cv
640.875 44.8658 li
level3{
gsave
clp
[1160.17 0 0 1160.17 342.819 402.826 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
np
654.127 45.2896 mo
650.353 45.2896 648.426 42.6313 648.426 39.9345 cv
648.426 35.4619 652.371 33 659.469 33 cv
659.525 33 659.58 33.0002 659.636 33.0005 cv
659.636 32.6152 li
659.636 31.1227 659.216 28.3385 655.476 28.3385 cv
655.45 28.3385 655.424 28.3387 655.398 28.3389 cv
653.626 28.3389 651.815 28.8398 650.505 29.7266 cv
649.735 27.4532 li
651.276 26.4889 653.548 25.835 655.899 25.835 cv
661.598 25.835 662.987 29.7266 662.987 33.4248 cv
662.987 40.3969 li
662.987 42.0146 663.065 43.5948 663.258 44.8658 cv
660.213 44.8658 li
659.943 42.5152 li
659.83 42.5152 li
658.789 43.9781 656.787 45.2896 654.127 45.2896 cv
659.167 35.3447 mo
655.613 35.3447 651.815 36.1064 651.815 39.5503 cv
651.815 41.7847 653.28 42.7851 654.974 42.7851 cv
657.442 42.7851 659.018 41.2442 659.56 39.6655 cv
659.675 39.2802 659.716 38.895 659.716 38.5869 cv
659.716 35.3505 li
659.534 35.3467 659.351 35.3447 659.167 35.3447 cv
level3{
gsave
clp
[1160.17 0 0 1160.17 342.819 402.826 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
np
671.846 44.8658 mo
668.457 44.8658 li
668.457 26.2207 li
671.846 26.2207 li
671.846 44.8658 li
670.072 23.0625 mo
668.842 23.0625 668.033 22.1373 668.033 20.9814 cv
668.033 19.8256 668.879 18.8632 670.154 18.8632 cv
671.386 18.8632 672.233 19.7875 672.233 20.9814 cv
672.233 22.1373 671.423 23.0625 670.072 23.0625 cv
level3{
gsave
clp
[1160.17 0 0 1160.17 342.819 402.826 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
np
693.341 44.8658 mo
689.952 44.8658 li
689.952 34.1163 li
689.952 31.1123 688.833 28.6088 685.635 28.6088 cv
683.442 28.6088 681.708 30.1894 681.092 32.0761 cv
680.936 32.4999 680.858 33.0766 680.858 33.6547 cv
680.858 44.8658 li
677.468 44.8658 li
677.468 31.2676 li
677.468 29.3022 677.431 27.7623 677.316 26.2207 cv
680.32 26.2207 li
680.513 29.3022 li
680.59 29.3022 li
681.515 27.5694 683.672 25.835 686.754 25.835 cv
689.336 25.835 693.341 27.377 693.341 33.7719 cv
693.341 44.8658 li
level3{
gsave
clp
[1160.17 0 0 1160.17 342.819 402.826 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
np
583.214 69.7128 mo
579.133 69.7128 576.696 67.0005 576.696 63.0034 cv
576.696 59.0064 579.052 55.8837 582.914 55.8837 cv
587.266 55.8837 588.387 59.6636 588.387 62.1002 cv
588.387 62.5933 588.363 62.9482 588.308 63.2226 cv
579 63.2226 li
579.052 66.4809 581.106 67.8227 583.542 67.8227 cv
585.268 67.8227 586.335 67.5219 587.211 67.1381 cv
587.648 68.8627 li
586.801 69.2465 585.324 69.7128 583.214 69.7128 cv
582.721 57.6083 mo
580.256 57.6083 579.215 59.8271 579.026 61.4975 cv
586.062 61.4975 li
586.088 59.9907 585.431 57.6083 582.721 57.6083 cv
level3{
gsave
clp
[1160.17 0 0 1160.17 342.819 402.826 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
np
593.754 74.8329 mo
591.372 74.8329 li
591.372 60.4858 li
591.372 58.7866 591.317 57.4179 591.264 56.1577 cv
593.399 56.1577 li
593.536 58.4291 li
593.589 58.4291 li
594.547 56.8139 596.136 55.8837 598.301 55.8837 cv
601.532 55.8837 603.941 58.5943 603.941 62.5933 cv
603.941 67.357 601.011 69.7128 597.888 69.7128 cv
596.136 69.7128 594.603 68.9449 593.81 67.6318 cv
593.754 67.6318 li
593.754 74.8329 li
597.564 57.8003 mo
595.917 57.8003 594.356 58.9507 593.919 60.7589 cv
593.835 61.0581 593.754 61.415 593.754 61.7158 cv
593.754 64.0171 li
593.754 64.3721 593.782 64.7007 593.864 65.0029 cv
594.303 66.6729 595.755 67.8227 597.48 67.8227 cv
600.025 67.8227 601.505 65.7417 601.505 62.7026 cv
601.505 60.0737 600.109 57.8003 597.564 57.8003 cv
level3{
gsave
clp
[1160.17 0 0 1160.17 342.819 402.826 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
np
609.773 69.7128 mo
608.32 69.7128 606.979 69.3287 606.047 68.7808 cv
606.623 66.9737 li
607.364 67.4121 608.622 67.9047 609.827 67.9047 cv
611.552 67.9047 612.373 67.0562 612.373 65.9332 cv
612.373 64.7837 611.69 64.1807 609.937 63.5234 cv
607.527 62.647 606.403 61.3608 606.403 59.7724 cv
606.403 57.6371 608.156 55.8837 610.978 55.8837 cv
612.32 55.8837 613.499 56.2402 614.208 56.7056 cv
613.633 58.4585 li
613.113 58.1299 612.155 57.664 610.922 57.664 cv
609.498 57.664 608.734 58.4864 608.734 59.4712 cv
608.734 60.5669 609.498 61.0581 611.223 61.7432 cv
613.499 62.5933 614.703 63.7426 614.703 65.7138 cv
614.703 68.0698 612.868 69.7128 609.773 69.7128 cv
level3{
gsave
clp
[1160.17 0 0 1160.17 342.819 402.826 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
np
630.39 69.4106 mo
628.062 69.4106 li
628.062 53.8578 li
628.006 53.8578 li
624.914 55.5287 li
624.446 53.6929 li
628.334 51.6118 li
630.39 51.6118 li
630.39 69.4106 li
level3{
gsave
clp
[1160.17 0 0 1160.17 342.819 402.826 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
np
642.546 69.7128 mo
639.068 69.7128 636.687 66.4532 636.632 60.5669 cv
636.632 54.5693 639.234 51.311 642.848 51.311 cv
646.572 51.311 648.733 54.6519 648.733 60.3208 cv
648.733 66.3716 646.462 69.7128 642.546 69.7128 cv
642.684 53.1734 mo
640.601 53.1734 639.068 55.747 639.068 60.5937 cv
639.068 65.2222 640.494 67.8506 642.684 67.8506 cv
645.12 67.8506 646.297 64.9751 646.297 60.4293 cv
646.297 56.0489 645.202 53.1734 642.684 53.1734 cv
level3{
gsave
clp
[1160.17 0 0 1160.17 342.819 402.826 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
np
464.204 30.9258 mo
461.625 23.4531 li
461.047 21.7593 460.662 20.2183 460.275 18.7163 cv
460.201 18.7163 li
459.815 20.2183 459.43 21.8354 458.892 23.415 cv
456.346 30.9258 li
464.204 30.9258 li
cp
455.654 33.5464 mo
452.958 41.7134 li
449.487 41.7134 li
458.35 15.7495 li
462.356 15.7495 li
471.219 41.7134 li
467.632 41.7134 li
464.863 33.5464 li
455.654 33.5464 li
cp
0 0 0 rgb
f
478.15 34.2388 mo
478.15 34.6621 478.189 35.0874 478.304 35.4736 cv
478.918 37.8218 480.921 39.4409 483.391 39.4409 cv
486.97 39.4409 489.053 36.5513 489.053 32.2744 cv
489.053 28.5381 487.123 25.3403 483.465 25.3403 cv
481.191 25.3403 479.038 26.9585 478.341 29.501 cv
478.226 29.9243 478.15 30.3882 478.15 30.9258 cv
478.15 34.2388 li
cp
474.798 14.3628 mo
478.15 14.3628 li
478.15 26.0737 li
478.226 26.0737 li
479.421 23.9937 481.577 22.6826 484.581 22.6826 cv
489.243 22.6826 492.48 26.5342 492.48 32.1597 cv
492.48 38.8242 488.24 42.1372 484.083 42.1372 cv
481.385 42.1372 479.228 41.0967 477.802 38.6704 cv
477.728 38.6704 li
477.532 41.7134 li
474.643 41.7134 li
474.721 40.4424 474.798 38.5532 474.798 36.8975 cv
474.798 14.3628 li
cp
f
496.25 38.2842 mo
497.292 38.9014 499.063 39.5928 500.756 39.5928 cv
503.185 39.5928 504.341 38.4014 504.341 36.8213 cv
504.341 35.2021 503.378 34.356 500.913 33.4312 cv
497.523 32.1982 495.945 30.3882 495.945 28.1533 cv
495.945 25.1475 498.41 22.6826 502.379 22.6826 cv
504.262 22.6826 505.921 23.1831 506.924 23.8394 cv
506.115 26.3042 li
505.381 25.8418 504.034 25.1865 502.299 25.1865 cv
500.296 25.1865 499.217 26.3428 499.217 27.73 cv
499.217 29.2705 500.296 29.9634 502.724 30.9258 cv
505.921 32.1206 507.617 33.7393 507.617 36.5132 cv
507.617 39.8262 505.034 42.1372 500.682 42.1372 cv
498.64 42.1372 496.754 41.5981 495.443 40.8257 cv
496.25 38.2842 li
cp
f
516.05 18.5986 mo
516.05 23.0684 li
520.904 23.0684 li
520.904 25.6494 li
516.05 25.6494 li
516.05 35.7046 li
516.05 38.0151 516.705 39.3237 518.594 39.3237 cv
519.519 39.3237 520.057 39.2476 520.558 39.0938 cv
520.71 41.6758 li
520.057 41.9063 519.017 42.1372 517.707 42.1372 cv
516.126 42.1372 514.857 41.5981 514.045 40.7124 cv
513.125 39.6719 512.737 38.0151 512.737 35.8188 cv
512.737 25.6494 li
509.846 25.6494 li
509.846 23.0684 li
512.737 23.0684 li
512.737 19.6011 li
516.05 18.5986 li
cp
f
524.717 28.8848 mo
524.717 26.6904 524.68 24.8022 524.563 23.0684 cv
527.528 23.0684 li
527.684 26.7661 li
527.797 26.7661 li
528.645 24.2617 530.727 22.6826 532.999 22.6826 cv
533.346 22.6826 533.618 22.7207 533.925 22.7598 cv
533.925 25.957 li
533.577 25.8809 533.231 25.8809 532.767 25.8809 cv
530.379 25.8809 528.684 27.6519 528.224 30.1953 cv
528.144 30.6577 528.107 31.2358 528.107 31.7754 cv
528.107 41.7134 li
524.717 41.7134 li
524.717 28.8848 li
cp
f
546.943 32.1982 mo
543.244 32.1206 539.045 32.7759 539.045 36.3979 cv
539.045 38.6323 540.51 39.6328 542.206 39.6328 cv
544.67 39.6328 546.249 38.0918 546.792 36.5132 cv
546.903 36.1279 546.943 35.7427 546.943 35.4346 cv
546.943 32.1982 li
cp
550.218 37.2446 mo
550.218 38.8623 550.294 40.4424 550.488 41.7134 cv
547.445 41.7134 li
547.173 39.3628 li
547.058 39.3628 li
546.019 40.8257 544.017 42.1372 541.357 42.1372 cv
537.583 42.1372 535.656 39.479 535.656 36.7822 cv
535.656 32.2744 539.662 29.8091 546.866 29.8481 cv
546.866 29.4629 li
546.866 27.96 546.442 25.1475 542.63 25.1865 cv
540.856 25.1865 539.045 25.6875 537.735 26.5742 cv
536.966 24.3008 li
538.507 23.3364 540.78 22.6826 543.13 22.6826 cv
548.83 22.6826 550.218 26.5742 550.218 30.2725 cv
550.218 37.2446 li
cp
f
568.977 41.0576 mo
568.089 41.4829 566.126 42.1372 563.621 42.1372 cv
557.997 42.1372 554.336 38.3223 554.336 32.6216 cv
554.336 26.8813 558.264 22.6826 564.352 22.6826 cv
566.355 22.6826 568.13 23.1831 569.052 23.6846 cv
568.282 26.2651 li
567.473 25.8418 566.203 25.3794 564.352 25.3794 cv
560.077 25.3794 557.767 28.5781 557.767 32.4297 cv
557.767 36.7441 560.541 39.4028 564.239 39.4028 cv
566.162 39.4028 567.436 38.9395 568.399 38.5151 cv
568.977 41.0576 li
cp
f
577.526 18.5986 mo
577.526 23.0684 li
582.377 23.0684 li
582.377 25.6494 li
577.526 25.6494 li
577.526 35.7046 li
577.526 38.0151 578.179 39.3237 580.068 39.3237 cv
580.996 39.3237 581.532 39.2476 582.034 39.0938 cv
582.186 41.6758 li
581.532 41.9063 580.493 42.1372 579.184 42.1372 cv
577.602 42.1372 576.333 41.5981 575.523 40.7124 cv
574.598 39.6719 574.212 38.0151 574.212 35.8188 cv
574.212 25.6494 li
571.323 25.6494 li
571.323 23.0684 li
574.212 23.0684 li
574.212 19.6011 li
577.526 18.5986 li
cp
f
611.365 34.2388 mo
611.365 34.6621 611.402 35.0874 611.517 35.4736 cv
612.133 37.8218 614.134 39.4409 616.602 39.4409 cv
620.187 39.4409 622.266 36.5513 622.266 32.2744 cv
622.266 28.5381 620.339 25.3403 616.678 25.3403 cv
614.406 25.3403 612.249 26.9585 611.554 29.501 cv
611.439 29.9243 611.365 30.3882 611.365 30.9258 cv
611.365 34.2388 li
cp
608.012 14.3628 mo
611.365 14.3628 li
611.365 26.0737 li
611.439 26.0737 li
612.632 23.9937 614.792 22.6826 617.795 22.6826 cv
622.459 22.6826 625.694 26.5342 625.694 32.1597 cv
625.694 38.8242 621.457 42.1372 617.294 42.1372 cv
614.599 42.1372 612.442 41.0967 611.016 38.6704 cv
610.94 38.6704 li
610.747 41.7134 li
607.86 41.7134 li
607.934 40.4424 608.012 38.5532 608.012 36.8975 cv
608.012 14.3628 li
cp
f
629.926 28.8848 mo
629.926 26.6904 629.889 24.8022 629.774 23.0684 cv
632.741 23.0684 li
632.893 26.7661 li
633.01 26.7661 li
633.857 24.2617 635.936 22.6826 638.21 22.6826 cv
638.555 22.6826 638.827 22.7207 639.133 22.7598 cv
639.133 25.957 li
638.786 25.8809 638.44 25.8809 637.98 25.8809 cv
635.59 25.8809 633.896 27.6519 633.435 30.1953 cv
633.355 30.6577 633.316 31.2358 633.316 31.7754 cv
633.316 41.7134 li
629.926 41.7134 li
629.926 28.8848 li
cp
f
652.157 32.1982 mo
648.457 32.1206 644.255 32.7759 644.255 36.3979 cv
644.255 38.6323 645.72 39.6328 647.415 39.6328 cv
649.882 39.6328 651.458 38.0918 652 36.5132 cv
652.116 36.1279 652.157 35.7427 652.157 35.4346 cv
652.157 32.1982 li
cp
655.427 37.2446 mo
655.427 38.8623 655.505 40.4424 655.699 41.7134 cv
652.654 41.7134 li
652.383 39.3628 li
652.27 39.3628 li
651.23 40.8257 649.227 42.1372 646.568 42.1372 cv
642.793 42.1372 640.867 39.479 640.867 36.7822 cv
640.867 32.2744 644.874 29.8091 652.077 29.8481 cv
652.077 29.4629 li
652.077 27.96 651.651 25.1475 647.838 25.1865 cv
646.067 25.1865 644.255 25.6875 642.946 26.5742 cv
642.175 24.3008 li
643.716 23.3364 645.989 22.6826 648.339 22.6826 cv
654.039 22.6826 655.427 26.5742 655.427 30.2725 cv
655.427 37.2446 li
cp
f
660.897 41.7134 mo
660.897 23.0684 li
664.287 23.0684 li
664.287 41.7134 li
660.897 41.7134 li
cp
664.673 17.8291 mo
664.673 18.9849 663.864 19.9102 662.512 19.9102 cv
661.283 19.9102 660.473 18.9849 660.473 17.8291 cv
660.473 16.6733 661.32 15.7109 662.594 15.7109 cv
663.827 15.7109 664.673 16.6353 664.673 17.8291 cv
cp
f
669.909 28.1152 mo
669.909 26.1499 669.872 24.6099 669.756 23.0684 cv
672.76 23.0684 li
672.954 26.1499 li
673.031 26.1499 li
673.956 24.417 676.113 22.6826 679.195 22.6826 cv
681.776 22.6826 685.782 24.2246 685.782 30.6196 cv
685.782 41.7134 li
682.392 41.7134 li
682.392 30.9639 li
682.392 27.96 681.274 25.4565 678.076 25.4565 cv
675.882 25.4565 674.149 27.0371 673.533 28.9238 cv
673.376 29.3477 673.298 29.9243 673.298 30.5024 cv
673.298 41.7134 li
669.909 41.7134 li
669.909 28.1152 li
cp
f
580.688 59.2568 mo
580.715 57.75 580.057 55.3677 577.348 55.3677 cv
574.883 55.3677 573.842 57.5864 573.653 59.2568 cv
580.688 59.2568 li
cp
573.625 60.9819 mo
573.679 64.2397 575.732 65.582 578.168 65.582 cv
579.894 65.582 580.962 65.2813 581.838 64.8975 cv
582.275 66.6221 li
581.428 67.0059 579.95 67.4722 577.841 67.4722 cv
573.76 67.4722 571.323 64.7598 571.323 60.7627 cv
571.323 56.7656 573.679 53.6431 577.54 53.6431 cv
581.892 53.6431 583.014 57.4224 583.014 59.8594 cv
583.014 60.3521 582.989 60.7075 582.935 60.9819 cv
573.625 60.9819 li
cp
f
588.381 61.7759 mo
588.381 62.1313 588.409 62.46 588.491 62.7622 cv
588.929 64.4321 590.381 65.582 592.106 65.582 cv
594.652 65.582 596.131 63.501 596.131 60.4619 cv
596.131 57.833 594.735 55.5596 592.191 55.5596 cv
590.543 55.5596 588.983 56.71 588.545 58.5181 cv
588.461 58.8174 588.381 59.1743 588.381 59.4751 cv
588.381 61.7759 li
cp
585.999 58.2446 mo
585.999 56.5459 585.944 55.1772 585.89 53.917 cv
588.026 53.917 li
588.162 56.1885 li
588.216 56.1885 li
589.174 54.5732 590.763 53.6431 592.927 53.6431 cv
596.158 53.6431 598.568 56.3535 598.568 60.3521 cv
598.568 65.1162 595.638 67.4722 592.514 67.4722 cv
590.763 67.4722 589.23 66.7041 588.436 65.3911 cv
588.381 65.3911 li
588.381 72.5923 li
585.999 72.5923 li
585.999 58.2446 li
cp
f
601.25 64.7329 mo
601.991 65.1714 603.249 65.6641 604.454 65.6641 cv
606.179 65.6641 607 64.8154 607 63.6924 cv
607 62.543 606.317 61.9399 604.564 61.2827 cv
602.153 60.4063 601.03 59.1196 601.03 57.5317 cv
601.03 55.3965 602.783 53.6431 605.604 53.6431 cv
606.946 53.6431 608.125 53.9995 608.834 54.4648 cv
608.259 56.2178 li
607.739 55.8892 606.781 55.4233 605.548 55.4233 cv
604.125 55.4233 603.361 56.2456 603.361 57.2305 cv
603.361 58.3262 604.125 58.8174 605.849 59.5024 cv
608.125 60.3521 609.33 61.502 609.33 63.4731 cv
609.33 65.8291 607.494 67.4722 604.399 67.4722 cv
602.946 67.4722 601.605 67.0879 600.673 66.54 cv
601.25 64.7329 li
cp
f
622.688 51.6172 mo
622.633 51.6172 li
619.54 53.2881 li
619.073 51.4521 li
622.96 49.3711 li
625.017 49.3711 li
625.017 67.1699 li
622.688 67.1699 li
622.688 51.6172 li
cp
f
633.695 58.353 mo
633.695 62.981 635.12 65.6099 637.31 65.6099 cv
639.747 65.6099 640.923 62.7344 640.923 58.1885 cv
640.923 53.8081 639.829 50.9326 637.31 50.9326 cv
635.228 50.9326 633.695 53.5063 633.695 58.353 cv
cp
643.36 58.0801 mo
643.36 64.1309 641.088 67.4722 637.173 67.4722 cv
633.695 67.4722 631.314 64.2124 631.258 58.3262 cv
631.258 52.3286 633.861 49.0703 637.474 49.0703 cv
641.199 49.0703 643.36 52.4111 643.36 58.0801 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 /1 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 15.0.0
%%For: (Jora) ()
%%Title: (112.eps)
%%CreationDate: 12/25/2012 5:09 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bl@6HQ8U^p%Hp#%hE_Te9Uic$h8MMoJ;^_eDmRS-bLKmNG/KtNBpifb8W]0BmU&3A3D2cqbaY#%Z<UH)]Fq_;)>eI6CiSGF
%IlP&eF8P8!p@[+ph`bC(Mbi0'C\[5K7t:<O5@&cPIN57F8\IbO/3]of>\\\]ZiIf;FDZqp(O)o=S+Z0t<tBMUp#G*.h9Fcnj6)?l
%?`n8_J%Br#T3NuIht>7=h9V"cS#b)#Piq[so\K*7B"bj(fN^Qkg679-n/Z0@b9Q,C!q<h]?ehf%hRm$A7JYQ=^=^fqO8MTD*WPY=
%rU`L[VHUM\?iTYtD@Cj>LUQLNrR/'p[uPoWIIGXhq"UK\q8L4YMs$]TkPn,kK)ZqmgUE_thfc!t[Yp`+7f&Oem5cUZ'>>C_rpQBG
%oSZc(raL;*ol0SGI<S>$U?9i&O6OR$`VTJ42`FO\WC9BI^HR(OOK-(.#P,sH>&&`Rm#D!go"WM$rMOB-Zqe(,)h.O>Y_Z3'='o7+
%%PJ.BAe>])lnsFMW;t#[gdk,X2s\`ec.1:3QUjZS%Mg2tpg/EYUbp&\/GYJ@L48Z,f:39:U5du#gGZEtphrl4f$X>llh/Sr0E,[6
%okOGubN8BTl,E=Fd^#OBLG+@rIWMiEpri't'+LEF1rr)_l0d*u7b33(?f#$rL"(amh_iA3<tDLd:UCApDVebB5%!rmQ9W.;>[IB7
%IX&4$L[Vsi?f-<RpFk=K:O@1;;U:k+_b"MH/?lR"4.=6&=S,n.n1E6/$.:hu$+26Z*_Nbb3m?,U['m_s\:/jSqmeSkqsKLUf<<>K
%n,/oHDqpbE^A8c79A<,bnFX*%[8&^]h>*[88[P>ooKqm=k(bmbQa^&J(d['N=-!QVXf3lg=&2mSoe`Eac-bDaB>6S!G&6AL#l%/Y
%9E0_Ihp9UXV&TNnnL8#jn6J4`/igOSCKi'Zd;/7mak@NPg31$66AGSUL&kumqT%9E!Qg&sam^7`,MDlQP+A3ilhNP)3Bp$&jV"1<
%QV>Eg$PG"WP"?QD9pQPdSan58g?0VUG5OT\oF'Q=%/mKgb%KoP^*=(JL%!f@)\0uKIc3Bf6Ds;n7EJq/dHD:YF5QKq@.Xi7b*Yd/
%O:5F4GGJ@oJ_;Soj(5#t/7kdL?*[)kV$#.nBq<c"NOPmm,k;JfcprIR;)49^F88KW%_j,(qIhZ:6R/#H7sr?akb,!ZI+Q@?_KR7m
%+7WV`;jN=MY-\1Og03FSgIecNP:"H),FJt3NK*R:3l$`AVFf$1[S<5:Z%#;s%b_gi#<BEg>WtV!nK#_^XeUq4/s7+0OTli%m'b&R
%-ctjL*O=+13SU:5FiTK.,pS>b2Mo\\N4uYp`a3DG_;iPi`*!&8q+,,j9CYo1HnPH+nZl#'A]rlP!(dbqr[1@Lm!d&DfkpJLI:e+3
%p49;egB2"5EqZf-D!./<[]qHkJMu2#EqV76em*!reLUks<p(D#LS%0gSc84e4t8eY?]=Q"q'l=lHV+@)TCS&g;uTjIb.kZW^\^4H
%hWqr*;u*BiP^d=YnosmYs![c`Kg=atr-SEJr[pFs?^(L=S];`0]?IJVD1BZ'o[1_NR$PqE*ri-emf1-QFsP07SpfDGjb;SJ#.m*@
%mDkDcrN'a`Rp(=ATj(h[OgB6J`tFH&h-J[jg@opK'E.RZP.i<94;CSuTF1[8aM0$sU?qeJLW'$T2g<AamI*5XmjJ!qHI6"DmlUG;
%T9<RPGPPG9p*jqhS;ob<"/\9VQ2pr]+O%pt_O^.&4PKRS>I"nU=9#Z$8=QE'kQ^1jo3A!_?4rcK%rIo#:pL/A86F2h=T8o_rZTOu
%oi\jUMjc(H@/7)Li\0r=F9K:CT&Y#6:7cYK1-`=ahLSe^kf[ep[)kF$#;B)hj(*SkGJNu,LipnHfR2H'I/nBg=(^>r?[;EENK=+b
%FIor%479TPH-4A08Y'NjRHAT-R_A'$qJZsfq0dJBHcSAtWS2RNa5$8G*[X,Jq`To9>Kj_'K@*m`%kqS#H23h(l8niL>NYC;?02B6
%7OS_[1OHoR_+o%)M9W4Dq,ods]B8k!hhC*1PH4/ebf%2]m!0s:3W!a'j5,@8dNh!U:l"K5aA17Kq95Pes7<^:r&ZR$6<QLjOoKc>
%cg1R9[g^!(l,6A+Ms3?.f&s5bm5a(e:0j/48ornPCF48AXMa8jV.I]hKbMX)D\3ARfC,^4GKNZ*4a6*"D,9IVfTTKnAQd%PPb/eJ
%V%+$.DXZ<S3HID6!gc*c[un-k4]PX6PeG;G%$QNUp3.CWED_2rQ?XKiEF@X7i>OdI81ua29WgpP>.a-8@Bj\;9C5X$dDjMej4"\@
%>AY6\W$_.W=*c)n2Mjc3UpHM\R<&:0D\8Dt6i6k22-tsJq*VZ]SThF4<.oYJB:rb/ij6U>Umm&M)%'O0bJ$_`8b\eF>CD"5,C0YV
%cMIGhk?T!EEeX-#'3V\F[[GNGl&]KnEEZA39Dg]U#.F:)DmS?a#XPaPFi0Xl9DVsAZ>Qo6os4QQSX5Cj1t^M@'kbX/Yjk6Xq#p.D
%F6I03g.'A&8NEGTS]aFk+gmQKa\SCCr$<#8nW>9OTp*FCDkhZRmZbS*.D=>YQSj7h4#,!(R3k_[IF8r/=P!+hmS/<a4$X[kV(*Q<
%PALU$WVt,a9q*PGhdp.$@T-XS]9=-'D16K]f2h9ZMV6:`hNnsSVcBj]m;\PBaXZW3MCX<,j)j#0)U,VD#J[;/j$h@c*a&MQ>c=u'
%YCaWsnD?:RC6p[Ch$.E&$;?dgeDSnPm^k$cRVUb#KgTs2[^^2-7Vgj!C\592n_K3RbJ)2t%I*WTN8)IWo<=JD[=RI,NO(+4l1Wgl
%r3]T?R^_nA/i-h$1,7PTO'_EY?.K]s-dJ/c#_ho`*k3Z`7MW$\*KmQ(\=Bl1f)5'Pc5aEsm++=5I%IDI[82dggG118_%$MD1nC]g
%)tLP@MoqQVm4We&YRo<R@?8Cb<lj=FrP"$kN5fFEkX5NU4&5eofr+[ml^iusGsi">"%%m,k*HjJFhmmF%ftL%bImCh:!:OlRi,\b
%pLDF`Zt-XYkfO=WM-e-+qV]rE)a?9QI;,pB!4K+#K44""\Zja'm_SZ-ZNEi(7FDb$aL/blGo3Z6GeaY;o.&"ohkg'j,#rHQ%+90S
%oedpj%`t.@W.)HuP`0iq'8tk*)LJ?eeTf.%gWrAj_Vm'kL>"@0CPQt6\=DAgQjEnYUupr8$JEeC(`Kq]_bDT5(h4MGHH$>^0]K0m
%=DsCV6XNjNVZah&ZjY&,oO"IoCDZtp9\ZE47AD`smm>ZKkX:.R]?Jj;0nM8]][_3TZ0\EXO#XQd.U#pM^ADK)XA!.B'A]l]Jru,;
%*(pZM*6NShVCQjfP1c"ss"ZsQ1!,_N=5B5TR/!A=\Ld&TMK(V%9^LLl16n-MC:s,\ShJ<?//TTV]&/EjDgXtk/6h`-Z_C1BrGEN?
%4.>H&2cYN>jYL>ohHEQ73HR^R\(+Qk@I(a_5P\"PdWmJJ;XZG(0Pk;7$?',rgYY`9;Fn&)8RibJ8L\_sHsP"/^R[cDlkeDsUrdN9
%5Zm`fcG"BcV$T/gCINb*ReiqhcGi<!30T6bjL-b"T8@jI(e66S_V&_Y<rB(crGm\23(tqO,Y;L1l;LGK\?<D0)ND0U_9VC63GT#%
%PR].M&Y;9l@&b$b/hCJZ(h\kls%2VC<FqA'P,g#mAfVQ>?fUf%/E3&b<K7_NT4@\2WCi8X*XWY'-`hSfQ.8jtM_PV%qd9h"5%1ol
%@*uj7?lAJi@T(YEL7LsgG#Ki*<#1-iHO@;?q:X>G3TW#uX/T_D[uKYhC-U-#=R@laG%sU3?%0XMcI/kdg'^8)LKJA0)-\0%%Mf4M
%^!;=2D2iqj'@tk\UNa/*[REMG+q%1P['2F<d;E5HVa`FX'.Z:SlJ(,?LQ7>8ARjot(b6V*o!q`6c3D/J=B''I*LQ!!&.mkbGiF\\
%P[5:N>o1GjR_dRQadH;rA1,U,dSA#Sq(6;)T/T`9R<+>1/).R9Mt3/gM.o*,AXaV&Y%M#dkhXo5$Qluf<d^M5V4MLWVjQo>pufT.
%mn,-c$\9pgXPtj+d&`)`EbTA?P@[H1A[c_L3%(2DZ."LU60bnc`bCCA8mP);dMQi1"(Z^/FuZPi_dR:*b)r81lt*)_,/ERE[`cqZ
%@[!+S803N"3'b[XYTdpY'PVa?GZj.9Qr,tIMi:NC\p@'j[7uU,>mq`VHVed@[LpbB+pHW(D(B-BLtNgbU7f,'^Pr,u1hBD&oLeh8
%-J:GD"X/\a-_gsjhNUpH(1nJID(XCnfh=OZf)NUMe7*T(EOP&:[Fj,a_G;)Dc>FiWd(U3&DOc$qn,^lP6)<)Nf)fSZ8;nn/Kl*PF
%DgIW7Mu6=[/WI-4he%=AWiME4=V.na5R,2fK5s60P`9JqX<Bfn^5S%S`YNGB*JuIjA=GQ-,hOM9j7eXnHDQI[:rMbW1_jY'PCc`p
%i++"cL6D4;JuL5'A_)QG'G$CrUY'IVEE9YZpE_mH6WTN"m58KgNNoC)hXSN`XJ+2t_Ec?G'Kq/D67,B*0S(>WSLalrpM+b[`k_@c
%>8-&ITTlmP.?@j6WE6nl\LTLLl-pK%OW_)f`[jhc/E:.973S_CBFF.2bsRjTA\*MgKU%6;oA5t>`ccIW<JNUnngPT_kM<?/OiX&X
%OWZaKbp'Che$_%K-b$I!VJX?i2SeYm:kf_!Z;+c+I>ZZW2n3\\WSS_-&'WO"BPl]gjci^6hcc*X7_dhHaQ=fW@`C]9du3=!eF:2V
%#U[q_1Udft(q''H9EiQNIZW,T*=d8k`c,.[=b=rM%UF/!S6bBq78^O_l88t-jYXC@278&X&N]N0qXa(hF^;4o<)/oFD+jc?D]Z>F
%XPSfU9?2un2Q9TE.E6P,M>^f0[\?d(FHnUl6E1AU1!7)We$k-?VSUG&Ca6s-[S$A;b#16#`?1WEHEku7(S^$Yejb(YCA[2$1iHT"
%BjK+!e69_pk::s<T*<71jYO(7qA::t%BO^G;I"&dIg[QD^>bP3F)b?NEBNT:A`j(e<m._U81NW/j>@K+Koeorj3gHH7[omaW)g=b
%aEYtZ)TaA([uiHn1Ssc,<!sXkg@Ak;9m]pbM:pe+qHb`!/F5mO@^FjYi,@qT3oA1+;:\`M/7s*r7H[<n$_]D*ST[kW?7hYBG9La"
%4T<#j+e)S>o>V-&hCE_'V8om??#2H'5q5SC+^k1(Z!B'7?6AD.e;RJXQk_:.pVNc\_C57g_ef$`8k1cgj!'ic?k?L>;*:m8c\3oU
%?1WbD0X5L'D)(uTIC^EcqhXf5Rp+8e'^#=]3PaBu/,'![7^/`iVg=S<[86V.keE,Q2&1XP/W>qM_R<s!Un:XFJSi^kn(XkhRHJpb
%pX3%f(NsD-g\-Pghj>.ji)f(#RJ@KM%_"<$2MoOn7SI>+94@X\1%gQpYk)VEBN1s;36TaP[hSigCXM<.1\:RRnmu&'+57&jb(jtD
%Q$]blD-8c4Z'UjRV\4\u'<9<jc%(*9eEfQASBUrc?40nS;]I!@cICA$[!AR7SOsbUg\NgR2)VQh5kR`'AmL2[ZnDF_/5%G/fKga^
%2AUVUmV[ilIttbH7%p>,0#$A6_NpsBBq'K\erf'/)G25_ol(ZUQ=/AM?.9:[)-*ALBfa[OWA`a>YspUQ&X%:\Qo=7,^;D*=R6e3V
%XD>P;dVLj\hkA+P]S[nD&U:r>b&#hf(8>NsUF\)QA(FY["g5\;WgZIkE]RA9#I_j=@:LWi[0QAF=Dgua,@+mLQ_2UJ*Ojl>Kj]dk
%<I/TU7g0X^EON?6^frT&VnI@0)[W(*pU;5uSY7QXSP.;2F2`.>AkHX&]'h!@8l6<4;F=AG&sX_RmMT&i0l*YUYF.bkcaJ45Skek`
%B!!18U1cD?B17ZA-'opJeNQEbbKECW5VXP9^ZR-.G5N+36K-a8p;Aq9Mfkcjq6:QZb)^iEYc.DIA?\P8Xb^E.*c.tKC0;5`;=8K>
%J[mgQN*Fs^&#OHLmEqe?DVAjUe[gBM[J$[Zs7SYSPLQJ\?&]@dF/uR*oITkX<J"&0W,2rR@2I(%eS+Y[X_.lXb&Mh&mtcVE`:;\c
%>@r5`D%6oN;h!G&kaFG5\^D!X4%Y=*<B+e.bq_Y()2ktGfmC-;;&5L@m4C;unTNUMqlBiK+-\=,f;tpNgQpA$=a`_gO_%1n^Xr%>
%)3M&aVTZ<%:IXfW6YERKo1284'#t0\ajm'AeM<;tIWc7+=Y;&u6N;u2f`VrTHa,[MI4aVWO`PP6,\81lJ?D\Q@g$8R$JpphYJ4&]
%]1\HlIQKY;EB3F0`K.[h:X.<oZ!LIqE3huo:c^;8B_OLt9_En`\1m*Hg2U]JZ$`CIA(/:s't@M;4ZFs[NVpsi`<pJ3[>]gH<2M_b
%,J$GB69&i:**NSopA;#)i`fu\YBgCfIa1&,Zi/^Iid0S;#ab^mB$]W%V.CI_ZfhJ8n"fZ%47/rs_qrE%;aHAWG3q'FIE+e\j/$:0
%b\@LI!TLn?@0R+I0-1Bc*f:HT9PZ]X`F)bMTdIk0N/;mc#%<7H>*c,R7GIdlW]]`m6VZ>aa+_o'lXhG3RTk`u',*XRV5+"ds2_hp
%li!3W=s!U@lGh'>M6[``>F%o,It];<Rt-GeG>\'&;)9#Ze^E+>XE6QclN`^!^O!YU^WM!Y1U4XYEg+ZRY<@8-6#kU3c%p1>5Zq1-
%Dn>-cp7M:FNSeAN3&5UQk.7L;W\(>FP0,eh\2r7$k@n;Knu8U9$P@W`,JW5cT@<OkT/Lif[Z2C1*;Q6E22_2-<f;.1kPM1HaNts^
%_N`kf.4o*YUj@f_W!li-0imnkgRJpoS%=1M:)!@Pk?YfZXgu#Jd9Fgo]6J%JHPEjGD/-2?dWn@QoRr6,,FL*TFPgY<9\O,+HrEMO
%`TcTTT.tG/q5F$AET>VEY.FIBI1rst4^)ij^O"SGbN.p+:%rE&-?Wt$Ot!ubIHo<ldlI;a)c,gIOJL`3p8l%[MS.uLoi\]klgn<j
%h#U,P:Kh1UMG/G3!iu;!/ee#,9O)<#7/#>/V"Oh6&%,4*rEXc1J!9g.J^$7*5*20iR_*";^Lf<OQO^e'U>>S:5-ip:X.lfTmhGIr
%[;XIM#oR[,clJJ_aj-fa.5s#O<118i'f%hGB!8]!NCftqr3,!i^ZVigbM$+X=4]XH@:^^6`M/p6@1Q5h6U-KWhUGDnq,'q!H-=3'
%%FWa&D6K)ZkC>H^-X0(609$jW:\XD+IJb=LT/ZAC]C9^;\r0`ZG<#I]%pe#)BD&sZG@'n04aSnl'^a/KW-ru,h`%Za],cB#RMc&]
%04L+qFsO%ofm#,amtq#en9+H4F"?j!6t*Jtm.T[,"^*uPOd>s_mBC24qb1uKfi^6%3cq][n,6i32`pnN^MT%W'(jppfY-JFgIolf
%qK7DBh",sgB6BcR^5M#q!cIso`ZGT%qEZ,8gXiioXb+\23L]mdFRZt$IVJrA-X172N*UA)pG2<OUU5e6Reud4Oc.[cE/`M#IqJCa
%5Q;c[m%Lt>X(AVc-Zs-ss5$]7pV3dc]cqninR!<5hKHn3#Cieo^XIY(p[bj3q>&7mLG818Q$pXi[pQi?HT1rubl1Y(UjQ:(hnOu,
%dU'R\K\lIOpig*VrdI3n-Q<!pBD(6.qu/H,\S1TK58oge^VkkT:YE4PnfJ^[3G[T_D#CPZhSoLm,QHM25Q7D&#J]/W2`ta!qtl".
%UjeBkEur9R,=0)r`kQZ`eF97Us5Ee@X,F$V/,f/=DR3L'5!@oOZh<YMgTM[dDXLisVr\Hgm)Ahcbrr*%,(7MIGCR?%%+hsaf=."0
%cgk6=h,cORkefVKgqC8uiqE8]B-2PLqWdM1HL]7teV[6W^3o_uldaH3MiYU^hL?Kuk1^I3X**uu)So<E3.7A\5,[J1s2CJnVtJ0^
%p&-7.l<E+M4ffIj.:q[,l0%g93@FjGqYRm[9e##Td%ECURR:Ff,JU"aaXu^\e2Ge%2ULpbe]!6,p&+N]p!);UlF1+:=1>@Ks*F?W
%5Gp)?h-AcB4Y6A\?eL\D6()GS]:_Mt9gRB.k1IctaFk2L*;g>Iq==A0C<[JfqQ+;4+!0lbZ8iSra^$lpT_`>&<EDs\/C&.a\$$j&
%r;aB'1@i6=B<q/T%&Bm`/UR$2k2kFDp#Ce]jg6W4fQ._#<5kJTh%EG"ZP5jCG%f!lbZT&91sV<SJQn@u`2.cOJPJ\R&iN^,fZ`l6
%>!LekGq0!qnE07r`A`!b2nsgGI?6n<]g/cD!SSskWl,6<9c:C"BB&RB8K.7$NumB#n$VhkPuZ=Z?%H<#a9DRHenaTtYAS6\?U%fO
%s)>Yt^E)eY]eu5tWcKn0gPmO?UW3U$\#6pG#hFlWb'#G/Xmh3gn_]o0(ak45fEb5/HDO!'-[KFDaic)_'^\lqhkZrJ?Jf,I^7m1&
%\-UjL`XRlMb\H0kNlPldk^)GZD?pSU<X"h%V!j+`X*M$I5CN6f>FaO#]\=MMY$PBIlhC57j1jC+?>\8s(9\HV3(F-H_@*jBMmHL2
%55Ma$+8oQm5&0T525,k$C>,P'L?>QtD_@KTCRfJ&"W(HbSa5+i:>M="GL,*n47@Ue&\!UEmg"@-cht>gnB[_TjHlPHNX0Bq^!KZ,
%q_3]PE#-a:7<fl>Z&(+08=M'*fZ#Q;EM3?0nLU9PMtfCe'/en)8,meh5+c'3E>q^<5MCs[51d6/f!a:=Bee=h_6'SDW-tN0mAT^5
%Iek_b7h7rS6`9meSt,7`T=++R8BYNh9=p_&.T$"c>B[h7>NV%g\#cr0`gB8Ae@t\OcV]O:o\WaM"94G[5OiQt4C]Cm9@%*(aR!(,
%8@3ZV]NCaYc^(KP@G*<GA\1XZ\.$km[qqWhT0IgSnbi=\g%3\U_t3kQpUkpGT#^#FVTM&?/s[="0.nm&0?u1F089iIO=n,&p**d1
%)@1iO/t2Cnq=F39oCMR[o@*<i]Kbl1g[fM.BbER'6$'IsUVb>0cHab]c;)]?Zi7$fC]@K5hF%2"iXaq;4YWjTMe3QV';%T]^CgBq
%8D/2soSeIUk+m,%d38?B22fbP?t\Qme"7iAfgR'S7MlXD\o0r2dj-eF,@]AsGhV36JDXV`%'A^MB[(c!>LW4qpWlE<J#gT18m#0r
%$d6;hm.<rC^H;^oW<VOVZHK2]6WVh:b.:HcOh$r@#*1/chBgJjT+NmTiouf!2)XX)J%iVnq3M%aHqnb_Dr5`VP&q8i3]bAE@Q3K]
%qP)l(-gBjin*'!(kd9fip>8);I.h2V.uSnMP$VC3mVg[eW+PRrXG2ICq;T1Co)GmpaRV3o%*m=98I;uBCOKCUB'?L@:51C0fKo<4
%f2LaLp=Ctml[R?$s$>;`2!0]\/cP.pS&MF@o\nES##ko2i6PLMYkZ7O+"][g=FZB=G[tJEX)U-`^gCC'XGOVWXj,k+QZ(8j$o5(f
%4KcUpnJDqKg^sq75AbdXU@CY_s8&?C1NP?8qrk'qO*r*tO7iuLlh\O/UOrn(ZZ0j:"tWV\21,8LZud3J?I$5[_rB^+qWAY&f.NY1
%)h+S@A4UJ1lDtCn*fd^6JsY)M:[bOSG3;O+HH1Hm)Ym4:$n1Cj1Rng,7ebH+?+[UN]n*%YFdM!6AcQuXrk)Q#?/OIE4oD%i?iP6D
%kIXg]4Wj^aio@djDJgo>Vo6kF>eb[X[!qoU4,srG5!3*K?&Nu([8cBk5@!*YH<B'>._kcF$Q?&C0togL!c934r:0f,qtSuC<tCAl
%8>PDPeStD3SG&k]Rl<>^5'YkH&8.N1e(-XAs84N7<4@(\lT(_^F1;!crG'n;=jhfp+?K:\A4gU@S'sr41G@<TJ*,V3k\-ObI4gCa
%5:GshTZe@4l`6@2lWH;Zc:n9+$fUK0_WO/.-OWKB@4ZZqF7n\cl#-(nOMB[pM15GK"`=rc..+qJ/+rA9Dl>rD>'p6qD<8h,J,TH!
%pO<39rciLtqX6ekS!2@6[.s"Rp!q<\=e@Y5*sg-jP^;F^XuY(6?Y8urQOfln?.0e\dEgFJSpm'W.o#hjoZWj__>C"`qdFpOqM/2Y
%5u.8BFHEHHg"kJXT"Vd`+qEXRrVb33&(g/D18BoBR6DI"JuRgh]/L8$p"A.?G.RGK:2`2S5)=Auek]ANLs:5VN>[1fA,c4(W[jLF
%k,QporSPQ-D>lk<,?;@TfI>&WV(;O#>uR7rfS0^7>H[nr$g/:.J\uA:E7T>]>2QJ)(105++4j;H8ka&;GFa1;/FK_0.FI2KjpgFF
%9tiJt894Cmo^_G8iRMC[GB<Ld)e5?cKRA7(?bLcn?.J*&n]1%ArHNhd[%6XMk1[7MB11b0rUl"V;'B\r6Q+q50,CI(T'dA$?TgTT
%+0PW"PE@cq+a:jokks`>VlRiS-!?^88:16GE/U&op61QOhk/KOBoeSWYhg6FSkE9CMsJDFR[#`F\n3OGV@M]u6b.\M5Q6cAcBGd5
%H;-EW<:dYuJfeq"<^5HSH!7ir0/4>&5;)uZ2c'14j@B_M8#Gq0=37$TY&5?MY@rQkI\BeI^S8.2T<h&botriZm%_I(-[)9Ti'$Z#
%dsCQ/qJT/fkHD%\Y$PGl>X/0b7Seruh.`3W\$+[o]j<A+]"9U_fMl"B`V4X:54B\DqU9c`6u@6qF`V];Rb3t%4>]8]f=1(bj3tp%
%O83<IQMQHL@Pl-%PNJ[?8B-^g?S(*igfRYWAc;*h1J+36$r:1(lK7r7`Y2hMhe5>`;l7S[=mg-Cms\G)gd<#t3DuK9=ll1K7p6#P
%I19fLq;7bNh)pc9#Pok9Y1,-h`F#]bror^)3e)Fa]".oRI,kFZB7<TMo=9>FiaS.\rqm]@\u7Z>7L`\[4hOt5RV:=4ZTm>1NB_X[
%140#NMoD%;6WO`'?P)&j;J5mGhR,(1p.\[(<Fq>(]<5YG[2&[D@@BCWO1U`+[,"!S[]8"U`Dp4"h!CQC3sfV>&WM$`XMDjuYO>iH
%G5C`m_p*O1;b%q]kfCZc2B!le4PEn1=Z?*t1Qd5_msj3-KIbNG=smh6bk""Y?00GI]dp^/EIH"lo'Z$/%m$'d3(4_b!+.a-W-`_8
%K9s\'`aWS'SqC:</%PG$6nZ'X[Jo63q<VIA17jIRUJ'-g,g":hc#2EZ!cFW$ULR2B?"-c/+!_X9qjgu0B/U7l@fOr;2rnnroqBBX
%1X\,72!*(DO%2mlcPYk#_k?g;%/%5/R/?c9'2^D)fXscICAn+]S""eQ%-]$JJU'=o/_p*JSIBjDNl:">`EbBEj.422(94pGI3dK_
%<@9jgnP_9rGk%@&A=C0(p=g/m^Y?WUG%^NH)KfS*TK*a.B1JrX\66Eih)q3D82**WVMA5#G7UlQ%Q@W+rD]ugl"#isYci+^7hblD
%W;2tKratiHJJBPh<k"+pLQiE7&RUqDq8ig>HLp1=,MWH_,pI6%(*KIfXWHou&%)62gS^6:2riSZ9_A,BAaWciWpK9:L/-<h6bDpZ
%jQ/6Wqk5o4T%pJU?\,[JS8*1jqo#r'6]#\#:<'?4?1PFhnF;8a@L(I!Rl-TB>j^qTET[b2PPsnJAB`V#%0\$Z.t+)`PiD+[Fa#CU
%j.R(C'X-BkG"f_QAOkqaYsgL&Df/V]#n!TA]"QA"JHO#S*X&N<9mJod^E^bjeRJ@9+29uK_rBF3^Nf;1_YH*5TDHmu&<#FpZDVnG
%d/Cl<pXa[lqWZ^i+^8=2*[1Y.QnPY82HLHKG(fKZi^mpV\@j9R9-0->c"nQ._Q-&*Yg?8flrV525UjIG`VRL._ggBS\gJ@OTqg'0
%&92IHc.2b$C9IpSd:XeIlWXX%Y7<0&Tng9kWeij"QDWs3qPb%c';$TX"4@go!PWL<n==GJ7%.m(!fj+0J5&B1YmHSB6-8ZflJ_9[
%OHsD:mecI0?@Vu35P<L]rVXSEA*2cQE`(&M*bTEfc.0^mO'=3.Oh.oI7cM#@1Qmf&5'c@O3r7uYI;u_W_k2^-ZCK)3&)Z:#*o-:5
%%W4O&*fhia3o\^d>K9fYp)Ft]4-YR*Yc4G%B+Zj<G='3=FqkS;#t<NilnfSuqoN>P:*#U^*Zknlc88jl<NF@t#Dm(bH2$queg'++
%Fnn@<.!O2a%G2sr4%[CIH1J&I]=D(N?o41OGFJ'sFCSbie,8!_l#Mnkdo@dgJ[G0TE-U6pc>U]#@1%sh6@__OC%=Npa7Y2.jDcB/
%;jM9L=P/heofbSknk&]*7R&#Cd4ToR+)J3<?eaflq1Mi8a6V?d2>s.V40kmOV-4?>QH:Rk:?Gs$X%2,K-?WIhQ=6CD.huXk=4_q+
%hgDh\pjPAko#9-TlT`bu]"Yp^T5JAtZ9i/-n,)*&[qi-Y[I,8#o$t_M4&c-.EHC`+:YWJd=9*%)SmU<3*T26lLi,Jg,R*_BIW;uo
%JuCD2h;)=KTlGBG=B7/]SDW/:@fGVM=#=I>hd7JT:g2^sSG_PD2;bB6W3pQ9[.-X7cB4Wl](b9XDb`9XHeL)-.?qN"($<k@q;]BC
%0B_H4rI<[/<CS2$pXG_>?JPL,.mASmJ>SjN]_cE=iLH<]8nGOlX0.IGD/S5Tk<E>2^8bDL9A/GG,7fhLfDEi\[?^WN;L#h<oB`";
%@.f#\]=g;Qp37kKlA(/,c$F]_VqJK6h!_aLN!u;\*q!?@4^DCmZHg>*,U7+C^Z:Sp8Q?GcrqZ!@a3,^_q;.';+61'/jub^T5jZbl
%9kG>n@g.^s5kXgB\`i@?PMEhb>ceKRHl1alYOC=@<.dV^aGlpd]O,8ncU-`gj-th)qthV$\u#@/"Q3XeU,=!CKQ:30CJ('G]m:UC
%M'S$Kkq8Z6[K[t&M\;[k7oHG*N[0T<n^T#BMMpSj7#B!i%QG/VXq1H5EFb/#6;++(2H(>^+h9^$D`&sk$OM?)W"FmPqF&Aaf5ZaL
%6$8->j6c`!727[)BT"mZ6`;=V<cP%3`Vf6PB,<.>[6eA5>KlF^NO:eP+k_`aA[<WCN@*:)e;Q2RV$[=A"3\]QH5ZX5c>)d974QHf
%F"a=pMe^UKl!0dD)ohg_3iTG(eV;&q16fu,P@.=SMe]7m:l6oD0@nQFL_)[cg`IaMph@agSI)FM;a%$@abNoF4Y_5MG14(,g8B4j
%3EVU))G=D1-i9kmPDY:kj6GV"rqKo7WJSIS'7Rm+mNGh*r+g[@`(,B(qh>sKb2_ijKRk!toe2AAQH6e>ND#''s5N;.p(b\O1YBJp
%T!pb$N_YB>n]VYabiRFBk'VW]b&qr038`;o*9+/f`"i:;qW5IsYCE.k.b=)p?Jk`AVqY<S=&8.#IX&2EH$a[^F&7QPY+]f<;`;27
%<uAcV7kSY6a&Jq*32G5%.;[Kt27Y%5k2CXXVlPRps0]:#+)4RE9U[\1<qmgiLnuEc@Op]*5(7puA3O1$B-U^[I^Y^kKJ,g'J0U$j
%Z+B@r9^q&d9CTN:[ng@@+!)KgaI?4qdrRF#:rI9%s33R[(&]AsrL;ehrJuktksJm7cSIqV5MXfP;umT>Y-K;!k"]G](1ni)K%"BA
%ptcGfkPKs/8Re&DMp%I55-f]:_0DT+qda\lbA&BX&Q:WOrpn%Iiq(,a`pY=NBZuq6-mtkfUbr*56tP<G&:aWr9fqHTpD0!&IaEnR
%_5/Elcs&W>q)/M[J9smC<9RnIEZWi@!%n3b2TgIA;?BF/TTUDDh!(J4T-AAEKD5lI9,Cff&2E,HTc6leqGbOO.`Aa>M/.rK"8T>%
%8W;%gCmnekL[LrYR^b>PIXR8(S=T&:$m!tZH#.%W?X)<G`?1_#j?%i(A(rY7LDi47na]Xrle@"gIspT1ToT=c1kK.'f=FCcLQeG+
%"+uh`#YdeqrCKX6]p)^3^2me#5`csnoLg*uQJPIjDHN]`3:VFG)b?_H=P'>PI;mX/I4%SO4<pu'Z"51XRWI!*T*.nY2'eVMCWa0)
%"MQuRKHX0u,O4TnWPl\k'Pgmk;SN3ng(Y9q:,(]+:lpt'o:8P7A5-kt,:5>PGLFOY1ZC.CkK'#VRXrcS'Td-M1(8iDl,:Q.7[U+(
%iu;=B_%.oeUIq#I\t=R_I7aLOPJ2%MA5;cD',K*'PKri*+B9)m^_9uXKk@*FJ_V-A)2%7L5B4%k(,>WK5W]URHYcRZrA+3$dj"6p
%PS2Oa/]g]j`Z^lEK6OWl>FIaETLcq5U7j7pcmf89?#4']VN]Mk>VcEd.R)5?a#';Sn)G7DNgB1]k"UG='eu[^^BHMpB!3/\VmYZD
%BMX8F]nt20JTB3@j*KpM0h)W;I%RM)6dJKq:7C$PY]"6*!VEN&f'tZH[N0p]MX"n!`?A,(HoD*]_?8(#J:Y#TkGaFgLrMBjH5cG>
%K4+d+"^hRm!MntbrdiF'KM_PnP`.3A$)S1MCs`rp:"c-))%.:0BflhW%0PVa@=`Ct&krU>Tr3/<&GqJ$V4]'["ens![#$h/D5&JR
%e"UUoe4qsD&thq*_J&6J(5Qo`7[1%BBRA939B<qJ:ncoA(LP"7;E(t&)5KI)36rRAEnh<GK1%t[,RYMu(gP6lcb1HSM)HT0H4d-!
%1kH-XSIjWZG%ccVm@t>rVm`s#=GC]%2@(t$46IcjoUmME2([\^9+Qmuo>%0K]+MJ7'f2^?7G1)&ji,X<rpFI]cl&.S9>L\n4CMZk
%I/tJ<<WM'*(E)E<Omgk"s+s@>f;1!@3DnfV.d?..F<E2X$oC+#1(4/"7YZ/Z/d:R?/MZ1Nm^YOB*GC!+j.iNlBWgPq@B?B?*Jkqs
%1mc;lkpME;$WuVlIKF2I*<RA*)$51I,R,0K^[o%E&Y%Z-*-GXYVn%F^A_*8DNKm8ffS5D'fG_Y&DJ4%17$P#nJmo`t;8r[B%9W6s
%.t:K$"sSQRS9./UckT`X6gVG4JF9d[ehPdJ$nWCYM&C&T?=sEeU=D1C\"&h;'.62?G02LnYkXk_!uP]MVhDUSF04h-#)A!gG#Yi8
%D<=Z@9.9nMT(X%`1j">&0LSAmp,J.GTZ$#VOiSBkclc<TAW>*YJ1'IP2+!,G^.*C3!hu%'8T+C\[Bq4+j.V`,<^7QB5/fKCSQS@E
%(=<^;B_rB299C,A$q@BI&='IeZ3%#Hn[M=\4h*Ig2m$4V:]LY;66(R(;9^r?f'`'ub!H(a7`Q2-l!#&7*!jK"qR46n"\V^]R"gDS
%7dZr,!slUU+OLK"TLi*H(*mmD%IKpL5t%E1Y)Ar81so&nAX).eE<eP=Rj=^:jm<YVP,=Dp5j9/pA"o5i@iiiXL'<f(["Di3ZiH"l
%!<@40IfV7l8O/21M]lOa2bXMZ(j\5EkZF_nKc.l!d(qNTW!B\qOcK-Gk]qEb8FoU"3j^"RZ3%Ii<X,(.17ban_G^sacXI=3jW8FN
%JR(or"V@7e7Nu\o-HeBB1'/5^5WnNt:.BVuPi%T;a@JW[HmtRDgppt>+L+&G4JRd'.s3#V#sseF@"^K)W;TGrd^D4p7o\_l%at`O
%5^DUaifPoK2FQ6_(m9&n-Zh2e`5<'N%b_!D`)YZWkfjF`h3_9@$oR1'<734+=QCb0Yf6DE,gbKm88JI'_(E`#1=EuVa2nO%H:G[u
%P4V(.RKR>7cO<_Q5s^`FioSTu/Q!V"4X6&7gBO>k!Kn-g5!1I?p1=^8Ql7t:b>`RYB'aPRIX'9Tgn*9Vq;5L*UUAPoaJ0HX1RW;b
%!9tMZU3kTEase$@^sU\U[P4,(:4kqbR%`P`1do"W-=U!\iT2lZL-?[h!*d["K;*tCS->"*AdAAW1n\%u@Y!uk"&[C<F#&jb'&t>Z
%iT3I'B(UPFX\73kRA9]&"pu?gaFkg*ZpiOO.kLOg+X14jU4j!W%N!nJ0kC@5!'Zs(VGFk[#)l:FQjrHgOg]H`SC'm3r-Z3`aG-dk
%,"[kSJ7ktV_D8N,[Y\S6U$@f^4#d5.XVkWePCklgn`ge+FH.0[5jP'D@9LW,&>Ga@3p@Noghk[`^'95l"="'&l<nBuj@bNCb7%_.
%TVktFN0JtIb+"h0'g(IcCRFJ18P@MUB4VNM5Ihn$5_]XAoHn:H"_]nX8#/5&hT8(]D/!I'rh_$H+Egn1MON82DN%SD3]8t3Vl:g_
%7h/r\;dDXtJXfY](i?`AUb+:I,&@=hD.(?t(eO*?VG9I64,lDD=\58Y0'iUQeIk+1XcfB;E=@HB8DG0t@$NJ>4etWC6IR&PmOjC>
%N^uLWK1_orG/>L+oT#=kQpk1YmVS$3XC3E$ck46JNe04LV?2Bg1,&$O`itUBZfZ9qP3;uKG)]&l7#F,8D]Wpknfs6=+[aQ!4;mc>
%IFiCg3&IuY!'>i7#M9N=kB/g^*_(IQ]WI+q'G&4A'p+efhhbmUgZ:H6OCTKTFqBp#joc\!Yq?C\D</B\%e<OlREZfr8OEAM1HY`<
%e?UekmkB8d!GSMnOt_RB<WNllcoPTSRE\P^iV5\3(fD,ZGSd-L.&tCJTgcE<*33#MT%hQUf+A:&W0(@@cn]5;=c\b<B&,<UoHVjA
%*Rmd##Y^5XL_PdSa)_>$#rN*uVB6EQ!L)bMie$a4!J;onIg/b;n)]YeR[4mJ8Q$m8dbpLd-.t7iE1piS%NP+eJD0q,#,r?n+?W$.
%&WK_[AsY[r(62usFE$0UA\iFKgA:q/ZLe,,%JC?4<o3]T[K?09.+_*B)\=`4Z?D^$LPZ$H%+%F26u_UKN=AjP)fYT"U@>IVK;4V2
%kAq)Aj0E(43cM;F$3ho\T\=9t"%`,,HP=FB8K6Ao<(&L(gB))\4-j-,]M9XI1l0LA![0(GCd:5#XPX;"<:mm=`Hi1h?K:up.ej"t
%40UF%#G3.ZSUd5R4@#\*=DhX"#oIed<)=1NR>=]D$r,T9Tn18jG0J?k891B_E:mP_e&F'P"Y5QN.!=\O1IuOj)FWWr!=H)?$`%YR
%]m%EIdACcL$k>FAHUM\8gS'7)9K,B1@+FKMF:c)Ib8*AQ(UWkh2XLNlE!=D/dN3)W^`CQLU/!IVLRo0)QGN4?'"&a@&SmFt?pqMI
%*F`1VX@0rAkn.Js_9N2r^mde-XdIlr-DP"DBu_[UFIfAkK,u*<,YIDa>8sqW#4SS""YQ_H`@RG(M2%656*![Y:NG<t9M!>Ob-'$_
%W$G>mAIY)#19Ii/"f-F'Y44CYb[7$2NGJ+!8_kMj"S8ddSQ0j'S&if-_O)LS\d-=2g`CCbW!(ptj&Ab$\IjYc`6bL=U']3:eEBkE
%O9QQJm0IAm1^VmGbnt833:g]aOhReK(f>qT@^PHX6rB-fR-dXkh\l&?X`g-G/.tO-$mrF<&.)dQ3=lu0kt%meKNI9GA/(-*B_6*D
%U#OnIN,fJ5;SZK7^YP)69.`G-,;,gH&jOH0UMV9Fo-S&].AS("$8TV\*.\Pj>$`*eU(]*u$iXJ6#lm,,30N(M@`-lmr<G4!)Xt!R
%K<QCC,8N!%6l#i;okNRpdM!m5BHqA,)VAK`@V[)*:&sio!>>60P50bPfK]FmbR3]qc(+<?<H:a"%$8%p%5qV(N%Vpdijp/7n%G[l
%c.XaWf;T+,;#LZY`Ag;5i<=!Ji=L.3>VT*=2:cV+#(7lSr2$?T@',p:=SY%#<m(J+!ihsI8n3t:6QPZ>(pohP,D_lQ@tQ[hjF0%I
%OpJ1&&jn+q%O+C^K,-rYC$YXNegp]2&/KgR#h\YM'AH,,*@&626Kf*;*=7NnFEe\!$DQh$G:.NnbVR&Y%Mo@`hHUbWLUID_)qZjV
%?H*h;,-C6M#GfgT;A'<#q<T)K'#`80/I8W&KEQ;X30u+L!R.d!QXUlQgL0A95r--_F-U+dR0I(al<J,;8)LYt(1<2/*2q+ic.L6.
%q[EfOT]4uD?su9dMur8]>Y^7$/FLs0Z:HtD>]SuR+X#Pu3p"=Cr$p,3F#8;Qr+!h7E9S`PS(-ebaP`<-.=IQb.6Cb4[3"5A0-g`Z
%U(OXR@S*:Gm<&1NqdEn29gR8l@W8*)4SG%+]k5tN@,GU$0K<g1)`e!]LhlJ`JOu.>/:K;/WTV%.-FTZ5=,b94:%,/,j+3f.dU<N&
%IEUATn=mfN+Rr'1ATeVahLZIH<u#t#VmabmHcA)j-B3=KJFuCei+]D!2lStOFFplPQar(eKJ(6)LueK<#7P>p[fm*lRgR&1-:H%n
%@&!s4"rj@;c4Xa<2RkoClbrFc2e?>cm;cqikNi[gHQbL+0>(.N$6)nfX>7Mt.`26lH&A#V@%W\oH^RY#Y3g?CP#BI/Q+'@C-CD$@
%;&mS"9H7</!cr(5/]=co+(9/^\s9``8#9p]EYBrfk3Z#?<qGePI)^+7n2M'sdl/kB'&jl+Yg(g3L!`qFC4DnXIE+J91c@a1[Wu"A
%00=luOO"K\gGVkF<uCQDbkf1Gklt:h%\s7dg^,P(K@j8@!n-o(M%c>p^g3Dq#,9-J9dJ68)ATYGNu@C(@j;o_dT5kA=Sj/;JZH%@
%[%ra,?TQmV@Len0dHX"ELUAh?4]^5/KZofNk*ju$@j'_1_uRA(g5i4e+:]?T.P:oY.]u@%k]BGF=P/hr]E5>p,k54cXJ=fn!U8;0
%A2#GlE0(Ym3+3.M7_C<)6;_GoI3+Cc,LF?\hZQse&jPHt+:5o;npHIe6+Ihc+"%V9@g4&iPVI\XQi:Iee]ttS+lI=7JG+])RXNA.
%)\0;/34i_j;EuX>=W[u_d]qd9)V:qE4c[%OctXI0_\flrBN.7t1O*&TOF'[9%&%]l3<10QQEW'*^adDZcr'0R4%?0f]fN]qf:=Vb
%EiNbnkUA?Pd&)=3ZV0(CGQSt'Iq%Cee1V,sG[e8:_,X9b/ofap[5A$3']YmdM?^L(J8+L4U$4DtTT!TU/tC]*iiRPb!q!F5c>J31
%LA1fC$lk_gMe3hS$liiO>uT1p+Imu``h?6GO=6PrOK!&90ed#4RdDFO7lgr#qiFc1%0hNE*4!Qn+T%m$a>(dG@j1sp=0MI0",T=A
%E^Zi,4m[Iu'7=C3c7fm4!3gOMO\>cA@W>_:<p2uI\]ek#fUR!dln#dui'c0Df(`][Gdoub0?j7]Wfa!C`!5q4OR4b.A'.n_?ZOPH
%1B=md&'%W$ggRnd^"=MCl5O`c]AuF,ee(t#qq\M]`,K0<o'lG6V_k8:ldk/c=(QX!oER@'3a$*e'pkVEQNHl5f]H)XM@lqL4u!Zi
%HkCopYQ`I*ZCKOIcG4`TH8mpR;\jor"YpA6-P0T75R(snDCu$ajl]QjQpX-`-jJ"$[WL#26]`hI>653RHuB#%M\Sd9Y*]f$L\bP2
%Xs?eu>6S"64t$-o#_H_J4XjAHFogP(XHlADc\Fg/81J:cON*iiV/h:.%)rSD$_*T&AUpKI!ZE^h5^4e.DbF_gf?g3TL#Ij4c=m@p
%dnoC)J]rg/SPWDjnA_A=0jh;D%O1M+iXXVY2@hM$btCM1ehnhC$6UT?92F2snm&2.K<IOX$m^akgZ!f'YnR:Mi(^?XF_e55Va-1C
%]:#UF_Z!N`+?N4(;Z^N041(aYG.qr@O;F;LV05q5/6h#qH=OosUM>T3M/]!$b6l0+MErM;8#HbjlYUHgjVo=h!>909oGV4-4=$PO
%5_qGh)/8>?is",s[BJNM<!-bRBP,hK]q?+4)0V-YHNdgsA2hZX.RO$.==K^f>h++:\cbZ@DNBbnB?=j!\i[*UL5e6^9S6a*Pn>[O
%Scl/G8kZuDp,nniH>X)>(@N?T?8*\^!PpDh%%_`"64ufoj>"Bj"9cG8:nDi_-p/Mt@sS\S"#"GoX%^T=XckZletMIL`A64Wh/"Pi
%)>ZH.f)/'\L;(ou6>5;()#HH=8VeY<qN3m'%Dq=@p*_$5WtNEedhiu/m_d*+9^3%*?CD'A?q,!rF`S2>I@nDkng/nka*Y$SKBT]M
%#[\rZj2.#gjous!afsePiF1ZBdlE?u+hl!=ZOT'S$EeomBW"rXCdjlK");<uVcl'T>::qGbCfoMe6qp:Es3t4"G,R0mQ0m-!5c<$
%+L6m"(PN8k,oK)]FLKg%inRjZaKr;/_E"sA7bn&o#*ORicBa#Dmqn7?\89Z'mlY/[TWB7_(@2c\Gh'a=+]92d3-[XhV4s&;EB4:0
%EKBL.=OKI-3b+(l!8FNh9!Zhm\l#1K_Z%jBKPn'LYOabH5?49MTFSaV]rVGD*Ips)nO5b[i`OoBT-r0._2YE#0$):%"$?99.0fp\
%@VYUfn/a8j+P<c8A?t@$D=Rj$p3?_,HI_Co&-au)_jI['p`e,hQAWZ8_hHE&Z>ENKkh*'L5&C:T0ZNmfA="r)b(*3<Tt!t[f_/X!
%%K`d.6125s?[B[DCWsUokLJhRr8B"hllr>jJu*C9+7CIG"I6n[kpD@/m-$M?H4^cBl_[I0V<u;V?oW:l\&RYToW8m>/KTI$1/WJM
%\$.If.?W5=e,fG,W!s/e]=#r:%$4^7gh`Z$9m!g9;e\k?d:JE/MG#m).h3+uR_F<^X"\Ksebp,\qo4"K<B_e%Sm?=0JAoPCK[%n!
%4U.T>_;-rtDJKe+d=[aMW5385i#W!<p)%m&3$h\?oi<NGXpH\4lrVNiBl&eP7"dWg4C8rtl<&&/df,mU=3\KlG9H'>?Z<(Q+E>m]
%hhXq+%m^C'>&CU#$eVnhs#+EiepD3;c]6dt+!d\(Eh`[Y.fg+?6%LODdlBmL,kDJpF.<gp]Pq#.K@.5/+_HuT(\;0-U+pPA4h%Y>
%_(bSE`Cf>oZM(@0l+QB"27J/+3H*DI#/$D[TrB`N3Qh;a^/<E3mK^.?Zc5!=FM%mRE5O&h[+l,rm@=C-TXIY]X1CG%9$5@G'*_T&
%lu1\%'lq2E\$55GBpPD`0K(oQ7HhqF9S-8-7orUks'iBq7pNCQe0(8Gm"14R/hgV!%t"E2\QeeK>j@saL'(lXY;QrX+u=:JgBLp%
%8^N1s]ag@E1l-s_oRW:ZgE>C8A,BQuKS`AcC4Uik;:Wlk_SQa0VFERq_an+Yl8ZL8a-Y/aX9?]hH9tQ]O$lM3?T0\sK5lt\LC@Y,
%3:U*0H)6&<!N=aRQCO@CF*cY$bLeKMBt/qm=-s&W_mCGn1US]J_4h2f+%*m]O"f[U9rFt@QQpH3kaHo4/D6(_Z9^n"m%&re5S;SS
%EXP(10b#8qIc=PqL,RL.%M4/;lGVhp0ut_;!SLn#)MGu+<R5VF\`mf#lrof1EVgkBmsHish&lm>Xn(P2EeoBX@e.sgs37n*eEd:B
%$BhuQX/A(\UK&[N:qb3":OX48N]EKmI3V#qA-j[Kb$a<F\iU_7-4h\p#]#)h,hNBo^a++h,HdUeA^"OsBI;OhQF3VVpp>-hfhqtB
%.B%gHT<ae)$p?Zn9n8?`C)W*4C']',7J:a->@?d9Z?@Z$)W.uD[sU^bO!'(oXQPG(@f>=NbRBn9+;2rQ#ND>83r#!!V$7CF/kKl?
%q+N9a[k^n3CTSOYlaX$`Z-*K,P6EhhYee5"@M4X0<j#L28i;f?WTU5LM(;7ZGeEJk%KV5Y)Om%XPJ.iGq+H6EDUl%sUN\=NG">.T
%V=\V(%+,8U,T)Wo4RM(kT6^^dduJWM0A>2VSNe@?8sB]k3Ln/c,7jJ6j%hg5I*,9>a#c@E?*2t"^:kOLm?-ii6,f`i]b=btN55bS
%Li5og$U0bmbNg&u+NIf.C-1X52&2.]pEPbQ#3`HkLSD@49nU<nlWo=T(#b9Hk"qKl+E$)*$(hK?Qh]E)a?D0ZA0lqu@A*3fWFbCC
%1[#j7!Ua(Z+5jJ+[GM*VOlhS>16-4c9aS%*Qd2/LS?WLoZ%h)\P'p2$AuH7c[OnM^-e#>7OHso*T:D*AWT&/$2*+<<m;EW<[PBmk
%J&De!dUEWNQX3GPb]6F1\/V0+h*Iq)AZZY!c9U_/*>+CS#%<X/$mC5da94tk%g%4l0*JIA+=%4\7c;c&TKuh9o=A]A?;C0;%TtMT
%XE^!@k,"FH?f>k-^F@4(l(_Jfj4ft%3Ecdb0jJEDar%jY*dFjA9[+e+3.O!A"L:bY_6G)5D)sbd9rBZSp2VTLZcfJT)MB!I3t_@B
%C5+&&'f\VT!`1%p,NHSbSlADF?6V-l'GG.mY-uWM9d!>lMdr)+nR$4G0h>Luhn.-#4:1;_cT/<SFUI`A2u5HJ#Z7b4H\2V$_N'._
%+k0^o:AitWZ(>k8Z8W-iAku5GXF]FH"5c+j1:dqWC;H7T%HHF.Q.W-.Bu.D$(iG1ci.Juu:lm,7X*c+'UB?lUj9f4"O?&a#<MHra
%$?Lq3pS:oX9HlZ<HEi5Fhb&MT!J?rG8U/>L/;;M<fpP?<0<?h4F*&N,HZg<[18*G)iN&\SflQ7RQo/Oe6$'m1Ij=.jP;D!7K<>AZ
%_T`)kQdjY<V8@2rKe7``2qZ'GO>/Et)Bkm;i%U?+2"&%JCqY^%I.L2uQJ&SPmeS0TiA)Ph2KBI)0hag9!@iR!1ljfoMcEd34V\\O
%`!WFCEoT%m"rTJD=UCLlBBs/jbtJ8fMq^jS+PX^G(l'u=%<-AbNF*R(]"V,'*/_?&q&(]p;^a!/3Pj"&c`8>sf8?(:(hdl-XFLWC
%':UF>3!5iJF<lkW!035^+e9nX7E-r1bf/r''@ee^GH9X-(cg.Pr=/48q4"cQ!17`#E5ScFbVsDsIFa#$&4>f,NrU5jB0"=9`\)$8
%)c9Uh-1`BaEZ^i,>^d)$]`jOYKMd7[Q7ob#p10;kCZYKP_`fpE(j+bl"0BJ,H0>t,CuRuL2$d9\kk#-L!0>4q9dd^ZP0p;NNu2"_
%mKkk4P;iX>k$4BobdC9DZ$:.&GaL^0,qr54$'TTOEho\c*.!6D]WInS0o4",Fi^H9JX]#a9cq2$;`,1h?n7P99*%s%IsN(E\2=GC
%Q-hj!:R-&<5[*A;c7;=QY2XK%hDm)#!T#L529c0S&'AB!=X[[k*-:gFn1CSr-_=I7>[`_E*LdXsb&o_]RYM/4e"DIt\oL'G)9MFB
%4>*rN&pTIt'@/k,"9/F$,i[u@!]EP9nHm9rd:7U&Kep:D(-dEB5S,G!"HN_8/4u52;c"u^K+%GVhjWJ]A.!ng1=g2B]g`&5!Gg2-
%#U*_\&q^(5<C.&`20h.`RO/^1DK`a)Yh(DGE0c-%-M](!d'OkFLF5pN7bsoGA)PT<0L_,j3E0APe.-!nBJ@IR@eOtr%t#k-E/9B/
%i`;1N@mN=HG1-T8&emU@<rl\U1uScLnP>*7:N2.$:,#AOE?ZTQ;?OtX?D@^Bc,%Uk%Um(4GS\(_`0VSWST5g%MX18kX'rH@O#e14
%f=2Bu-E6Y<?pYQ&X@^uR@?SF:_`c116Z6.h*p`t]9li9o]orP:5?qg_S&'9?(cTrP,R.p_OrRX2g"#39_KMXl]@d`MRa?Y\6*Aga
%G&RIKJB":+Z#K!`:g_t16SV)J"@F(rX9?UjG(@5`J\\&kakF!a561ih8K\$PQuf5M_"3'albnR%G8046nXuU&Xu-Z'#76#hq.%c!
%h)(N!+F5:@&rJ^TBJ;RS8J<M.K8CtYUX:cqW2@Q%6Y;5]Z!6rB=or^FcYVb&&TWW>:8.m>K[`:6b)#)$1!F.3'%d8C<#'IH%*"g!
%I6*JE0#PTmLYWuu8@;[ieifqIf]Fm]iNa![hp>bEB5taKM1&>=(oqJXeH.j<>G"u&A7AJhKE4cG&PHVk6:2sL>RBRea$?Pm+7>OV
%4ZV1!"phgM!HIHqd`TK0n/+9hYXZK8YphJ9$/+agh"bCe/IMl*pDAN%>4<D+jsKCnPj?[.$`ph<.H"$r+AN1]B1iZ,#l#%5*dC;W
%j]XWj*U>$=-A`fH;R-r_&G?D5iWd(:,Cuf+C6m2BM?-JK\GPZ?4*@4LLFs$FK_fLRYJF+*Vlgun/$"=5>$ODd\cX8<Tnn$8HY7`g
%$n@dcLL)M;FLF_Z>C\\/:f?3*!Tl5m2WV,TaNI*Md1+b:($d&g(fK:Jdkl>EYq@;B-uW=Qe5FmRAqi!I:,M0j5A<L6Me84"=Uh>;
%ORID/>1*#;HU`PG#\onuCE>5:LM]3hh4WH1]0:9Hp455M>$=3#2R9ZVWV5!Q!?Gc2;$L$9&!1?UcJGJ)0h5g#BLk`j%T*A))k]rV
%F:4FXa"_BLM-5JK+7ZEpa'CrT=L"FuPah'e!p]`1@<Xa=N#D8t#87c5+E0Hi<jQS;#\:F&&rC0\^,eDfLG^ofLDg/c3>s7NaqcFg
%pE,%$>RBT'HcfFr#U-R73Pt<(he03SSQmuVVe:1!X8rQ[6UH`H@hYP-AEjJ>;:k+$l6HEZVeir'Fbg;F=WuALWe>s6l.Dj,;X,$@
%/!L<30e,*`0\9#^ic'gGd`<`1(Z@l:KJm8CA\0;Oa(q&\jQ6FTk[Wn5>gKq?F-]nn,pidXJ=X:;!T\d<HlKle8ck,slpfgoi"lCh
%^(.M88_lYJ=a#lP=Z*!`W#4UR2:-Mi6YG*6\d;%>HFjZ[CU>:Lq1qJ(=<_Dkqme2t&Z8_`G+,YAqbi)i109;QA6K9G_*R/W<\ZQi
%(k6LoL4LB^eln%<FZqZDEu#mW!&1#TkgLZ=UVekne7qk)$&sH_(5H#1LhIn5>]Jb-'`^6hQ%@;Lo2VY9:?NVe&;k[^b.@]7(BmW0
%dq^KIW"`HFr=H>0n#<(ALo(<?S7coXL6<BWnatW$`!gRn";;s<&%(gSBk/Y9iX5:#cjAHUJkY%lKtTZc,'i]g$,CH5%8'-!MF*'u
%)Z.cc$p@rAkTh>eVARpmTYL]OB!P'D&ZZ^&J">;^Z&+n%76;HZ%(KsnWZ54'HWsg9E:&%$6*K/j2\-17o+h8JM4W&HGqmAb#)Jfa
%]]_H0=UsgePbfu])0ER1VLmu_>sEm:`o^9Ok/G-@U7n*/k<c6>LY,MD&eIg\5oC?Gkqk*Cib6n&@c7/fQKakYklW'?EWHRe-AbY2
%NO6bU=a.*9iMHp'7]OpmT#qQp!]2nM<Jk*fDZH64%m9;?g^hmJ**?7X`52"r`Zt[Rb@qM>#3&se-lNfn)oe%*T,QHE'8$"(1`j.K
%-E]N=(Pd!;W%"FJJFP3hJ:'@7Z18uP#94jUJ.[g,"_@\b#hmdQ3JdblJ`3@\MLJ9A0#E344:6TEYc5@<!1Ck/fO9Kn`+ArQ+FFn-
%#kJe&YB9)4TSe2;r18Mlk9%//3es^YRL4Ci79)[)XL1Xf1]S494$sYI!f+6UJfL[/jHaYQ5%P4a]o`&c9a5muBEMi7mD/hU1;Tgi
%PRr3S="/*_ih40b"2\LHJ@J(CMu[B-$7`817(`Db7FHlN,fCFRapd9]5GTHQ0f=4iYQlF=$XUh\@XA3IeFf\%,20h@%"9H?U^3+8
%fi2%295m-%K>sH!eF:Rt"]0b9`q(aa$sl7l!TAfRJFNC8_A>Vdjj7FO!=O\*ST"7?cA3Uq$nKGi`#@G[L6tO4R2KCckL3#Xbq\-%
%C:&MnJ99R=$pWm"TGN.dSH0=U)MsQ#0"`b@3TESB4>USE,o-ZOp!-4O(QP&;gV$.<W04Xq"FtD^SPO?@c60>p08Lb&-8E/&B]8c`
%(f2P*QiNQCJ2X+1ckSNV6/;NU,S$1X#@+HcW+=bj!Kf">Qp="u!eu;$b5kLG4t6W:OlG#*:otB2=`MdE?><I#q`d%n;,OmSPJk'M
%$B?Z:_8d#tZd;A^PgaT(S=Sji?TJB.QjV35MpgX+C5?J!iZnPc,/W7gWTj(R+\mLrrZ!p0(R@SCg)UR@pc;)MHsc@ab5g[W4W$o%
%iRjH&>UB9Clm&Vc<Yn(2='#mc<YFI-\Xbd[m'Lb-^MmD@".ulQ3uN[hJHg\qHu^`haKZ^-c4j+]_:rpbN&FTek_hHo87t%-,&O-A
%]qDDS.<p5p@s?p1R,/8Ukk&;U:;cXD6?$A[EO8IU-*Z\oI)Uo/lUL>=6-n"hPJ^nX\:!o[Zijd?hK])iV1NnFoQ:=R?G:*3n]OTG
%Cm\$ZbFl;SaEl4qCeTLBBr,Wm4:Xu*kB\SH\/SkcTabYJ:ss;$#(jmG2^(Bl`X<Yf(W#1R6)XiG=Vc8Z#%Q!YTS*0uX$IFf('YJS
%9(R=bI+JY!fd?6e\Wdk")"`&-C:F:ndf\/PA@IZ!!2DN^%Isj`b'qQ3"3a@j7(WTAF.q#-6C)S(E:=Y:1m(jGP-ne*)&a]'16nWr
%-35_L/e&^1IZ=deQj2FOf\i&kjI#'*:r`4AbaD,XgZ#K/3`2Mc']^^[XD0F9I^k-m7,Uh(M+Jh(js"Ce#Y=qX43/QTL^)iNY`kX1
%BflO>5liGWQK!$3@]g8pM=!(#neF72S3mj\+(:mUhCU:,-Xi;p"'I^<bK*&6GbIihSUp._^^<c=M[$(=hB.9oEuW'c/=_E4eIaiR
%!s:cKJM;ut\e4+5i:'&1>%0=INVL$A@6XFkT:kXJ5-+Sn)S#$7h"+\,_Qb6R'HgmE4r>\Zil!Xh&4-g_6EC]22'n&RBI-u9/MAGq
%@&4]6+Y+fOmKj$FfkX"ci[/YaH+g0&-WR'rTi9JBL[5O&20^8E$M$Ii0T4HMATQR"YIE@JDD?LQ5[8MJ!bt_lmPu>Qme%\G">RiS
%`YlX(6j^QVao(C.p)N'kkdqJL?C*[Z7!c*X9>QDqYLcEIL%(6."6fF&.QG+p:2^U*$U;8hE6cJq/PD,6cc9sP=FaB7L2`F31qa/^
%6>_Pf3fVdO82)[]KhYn,$Ao;nc:*`HjUa3P([aZAk90,%gF:d1*/?Dg)1^IO]0E;rh/dBH<M6Z+jWJR:btj=03n8KV2!ZnLr=,<.
%B=mp"7)*BWQ@->iLb;Q!MfI6cQ=V5<W#%W_$0'n_Z,>dOj4;+Ef+7_D)@R<V2R)l"U;A\<[JW]'1]!Q2\N-I-Wd=hD`,VO`=Z\+B
%f(WWNi3riX?;D`B@8oL<K'IlCNem!)hNBUA/Mr)#8'c*^3f#-HN4V8H]P,9=!g=baleMifg.9OULgo4uHt/Y:4#CsagLUqQ!a]tl
%)Ii5*m]am;mT?Z?ceO:J%"kjZLFNA1@^=CYP?Uo>+u>>`jD[g9*R7uDl9s)2YVS<O1sQdb@LX8h%s!ciNds96a1E6E:(RuG<?d)P
%"gTI9j>CNW0%mK3&r+<s3eJDScg/+*TtN7LF(PD-1Yd,X'NhWD/f5RYJT&Ob:$rou>uiuqk(9:R*f\>DO?#"2,AXG"oOpjC@?E&Y
%Js,-\g1N5[;27U2lLc/sIPT#=:E3D:?bGnAba%)QCdm=e./#`QC?Q*P[5c:bit0?VO6(lrX)5RN4-^n&n]-[?'e.CMHGD8RH;p4"
%3dF%F@P,FR%M&PMLP9'o]0X$8GS:K0GS7fheR\b9)#PUDI^2A&]*+6'Z-MaZHt;!Z+OTTJ;;YM=1'ArQ.kC[U&6f>8?m+ncZopo$
%h!*1U)2@G^gse=5'-c@L<6P%&?BSFL$Q0;[8Na>k&JGm04X4_X)S%:7TR-ec3]SUqiBb7M.fiX1W[V9q+2COj5XSm!jiV$\>TWP7
%G\pD$):8/:CpHf%ho8PO#EEeoZa#0q!lb89iG4jG^^Zj5^&kW,b,GpXdhRWjEr,J@=Jh*cgW?=7-u*<,G;6kGLesogP8K>A@j[gS
%24b*!XS6_.=^YBchp,4nPX36\B!4]<+F<!BJ.7Laorop*,MHjo'"!lR%jlGjTK.E?J.7DDZLo)Aa,M_3U$'5"87tTu%RaPnKKlQi
%a>UPPbsFA$egc0'm>WD#+]SET&f^ZdR@$9-k9jo)(Qntd<"S+Pi+3s2=ZkYp`&B:&N/cHF*8UbfB6M+E@(?k*"aak&9*G*e8F/c3
%`OdY#gjnsVhhM<4p\?'3h"sj:LZEAY5)JX8gpYnibhh-2gWek,"$(0!idBDP`so&"QXHH!jA@1pNN@def-i$k&Z#me+57F<d2EQ*
%TF%N4L]nq'2;kP0QT>[GLVuDWm5d=]1Qu$Q\VamL,;de;5eU:WR'r$7,Ktr::q-+PZ(/V$B1D:8Tr<-VM]N+brOOsl;2X&6,/c5H
%fu6Ou7\$)TA_)$/3JW4[lApr%kU(9RIX.7h5:nC^0?&3p5DS>pYOK=F:/BtH*(MX#o8Oj_6KZX^^<)9L*/kncce"&-%haNW.h%Nm
%*@S>LBXu0CSAVSXB_'Q*pic#AW*7(]%lAS%h76LH4h;1?5ss;09p1o.IN5LBL<:Zs:R<N06k^FYK4aM/HkdoM>eAHDB`OlsN1#-`
%j*=+.VEO[:SAjIH(bht6`Ohe7hbiY0*Dm$7XlTgL-HP4k&2+6Qq"!T%?/sbQenI:gh$P"DOpG7/Q>_R#k2Ea)R^9Nt7UEKB:-!IJ
%]1&FX!5i1W8^N!,:lHjh!p'I;FTFu)DN@Y[LQ8RARd$c5=NG_0arW3DKbY:.!'<&'6@r_?Zt&"HR*A;F/iDRpC3D:>">$iooKilr
%*.s:/W04b>/0c>o-U;s^3U1Z4N-N(JmR8)[m-T[OWK9[oRV'mN`2FXU8$n-g#R6.g?g4*@mKLlkQc`6em+oZM@XKtaXZdru#r$4C
%j\h32UU%L122<enP`ej$FueCr`e<./aQ/2+0::ekZ<&YI*Pim&TE]))P.R@sOrShneA1uU:FhQ^SBn@_b[N<(C+].'k1Ce%1prkp
%".csQnD+5\T[.W9q&)i<p8.o1:4HlH[]RJO@7q'jKoPaaMF3Y7c/gD[ISL?F52at+&-FWB`%iSW/pR^-bR1.i+:7%:Y%>*!3?B&;
%>MgnH`6\05+.M=SG(e6&>D\[J-A_1)Dcf/B@)9_:B2Gd_!#uR@&_a9d7:oM`RPZF2eS$XVpm`OS(H?q?`!-E-cm=/8&=tgGfU2a+
%0auQg]kVO;*?Ooh`not&SB6AT2a@!En_V@qc2aO<a--]]as'"gLaN9Ik<KYZMMue"O[h%4Y9NtHnN]),-0?c-%/eA:UO^FeiDE3r
%J3HA([HCJjR^Mlh3Q]!BXZ;<DpCqCKI?T*VfW0hY<3!T=jrTF%=%tc!Dh3Tmh`k\`HRXR@+L-P\nSpLLYEfV9*.nh?3EYoAJV*NG
%YY_UQN:=g*_Id?`,8_:@*!2N?juA,s//%-o2SSq0VGRr;RAFO:2PN=7DNR:]3A1mj3?p"mO[/hK;;O>K*J0[&0n;HfEN)t*'u6d%
%(']E*)J?6uD3+]JN^OsfM#;:"V^`Cgf"s#:GH/g%CLFZ/(u[6RG?6#,dti&\/29>(,WTOZjB(,9Ke`eA]['@tW_*n)9BI+;/@0P*
%P#0J@b3X7]&G)3iDB547U:`ILpfUld8)t*t4snoVCX>3N'bsr-E?R9?X7/lfkHLco]&DYhVCD/Sa`+q;_4J4FV`@ee,Nq2WUS,HJ
%q6]F(oYe=rLDGlkK5I#$Uu8(dFf&^[UXtD`r$%2Rm.eKTaVrs**<O$XE$QtD7*<M\3&^s+L?rZs5uVa%,c[mj(aY2(!6'Ob*%3gC
%0uECK;2B(CY[A]UbQ.[(PiV1hG^IrHb7pKHn>F<ja6-(F7ftQ&-?]0t0Q`VS'@WJ%I'))b-ZGI8g>`o[#R-d\JAJ;l<L*H!RBmB7
%GdHod]-o/MNIgRD7AMm(OO+P&ZpH7)P6HUl$8Z5,F?='Zg%&##h#q?9e0>)7?#\U"m=%^rF'q.ehPS4K1R=Zd"rOr\nr)[U`)9P)
%36I0Q0mb_Wj>2skOrUb27(fXc(S4;:Z?V'.AL8,P(Ns)_N-q`kK>q<V)CUOa4N^?7^!lR5_ZdRUbRhEK2)Kbm-Qp?>9.o*lm??>l
%!iB3W0YW2Ppo+Rt"#sCjr?V-n%"u8@O54R?#0J6<)HLs[;bS:PbEV+)Z];p20^&n$6OXjnBC/&t57A*BJoiB-Pm/-Wa;p(+@FdL%
%kb1N0?l"`i8R&`^`,B4e>&Iu+AhClm!F/d8.c(^6*'$?0:il2%[)d_17oc_@^s<]uDi9Rs65]hs!Z\e54/Hj1ZoO<5::5/3b+(]a
%Ep5G'*(rSWC\D]iNa[qX#rZm%2i,O0dK^)^D+4u)boCbq6.7g1e\7041n9<R&81#u,`HOg7XuMnX,[s`=$YTY3B_s9.i]d9P)hp0
%>)aM-lPnK)R!sf7XA),5LAA.p`.^\l%;'cEo>6*<LGpX>;@ZXP:5q%4"&*+`B--!B+n$&b9IEsf)I-C1%AErKl5$$8jD;c`NqnRt
%+RWe<3hOPP!%!GNo(cE-8=hSV$kASb#<Zs9EiWfQNAF'(01S2J(*A%3q!5\H)*!'<d@4bj2>BamgdA9?N[hOtaYC1^22F1,q>:[7
%.)Y`?:XhHDpPaXoAP[\%'QPsrQ2"O[Q';<MO7Qp:b#0i<%6E:@6:6hh\#UdtrNW)?H:Spg#Ku6T>+[g-D^rs?jsu(-6dH7kE[M8H
%qbu_9gk[B,D,0(99L2[7,$#HAb*_^#<fVrNOcPFCLL#Fqki'$73Do$1k0pb"-N3&Hg'"RL]eemE9"@l-F0o7k1crBES<9(UE(N*-
%a`,?h3b1Yo6u-%a<`d+4?`UN-@/OTJ7'86haCl$`P3'\f;*03U^>iba!gs):^),/!e)QSoY+$W@V0"16SL$X(+r/5#9I6)?/T=]h
%7RH?d!F'D[0$:4hVUT;#8i6RrYahdOhMU%OU\6iXkccQaRh;%+clbe?$lpP^_Vpcf,CHiQOHl3fjDJm-f%=8]>Z=2"`g)LkJ8k"0
%OH<+edLT#CWR-`l=GN\X3E^73Q*f"->Ob:WIXk_F(4=-k1e<]VYKZBZ[K8tm[Vhph!EN[2PFEe_#YKDWX-HTpWK"5%L>Mf6+%#%?
%,fEGXRf^7PX[tO8[5sY\h)Chic>K&Wik`#?JTt3!G6;ek@0jic$h'j:Qhl<8A<CES0M)IaE9unR$DJ:#S11Dq.SEX@'=OdfBZNdk
%FaNgT;rsn>P.#_94n%`dNC>b\N5-j(ME-8Gf:[\2'&GF1Fss*Pd,sJ$6+`@S.Yq-H))GrG,]Zc/pjp122&_(*eukOC1u1dXl(RcT
%>ol/LXO_Nc6%.VsZ"2M)`_7?LJh-On7TQ7^jEo6");$q8WE`7(X?,cn#*W:70-q&GfW8%c#ZmtL.]IH,E_5$adfZ,tEJ\ju81k3M
%+9H=Ed0Gu"6YsS*b'qHOVIurr+Y-F(Z+6l,Au;M)<(=77<Gf##gNl/-:KiuDpJa""_ARF4/6Q]"'t)L\m<baN0=''[ActR4s4u\?
%0+;J)M"s(rf[lGFmhAo]YgE+a/gMfcC0W8XAOL=pN#<U7gQIIeW_tK-)R:"75T5rPQ,[$*4+5Vm6QlV[JHjTUN1`Z6#_sJjSNX\!
%(<$_U!S5bDEc!-N!\s.2>u!\qZB`M9$CT$nQP2BP:fWnbaHg%p'BM\f3EnYqrpg^WlEhE#+h7[FeSPd=f]Zh$:*7.^T0,6$B#mRY
%X;koe8f#>_U(ik)X-#2Md#2+G.1/+]^=JB]1h<G+95[j,<dJ:FmIX9Q%YnbIF3D3/2^;.i)C=*gHHu&5'l['8k=H(J9>!IQ;C-rO
%lnBn=,?j,"FA*$bE]^lIL#jcb%BW)e328>^-S(1cU3?C3I7Jr9Lnk=KhXqctWdmk5CH)bXRe^FJ@hPh>`BHe@p(7`dal&C?N/Gc6
%f!l?hO+OLHAQju.m8jU_CGd$I)6I<n=`/U>C:fP\G6HlVGmr!1D(DN0"h*Dl$Mt'%AT#lh/[BG37X,Q]HK$rKS.(?<Y-F:U$DJ8U
%%hs[f_fmVO;8+d2a6_)d#hLKlW`!Q[X-0o<-p<@C\DVVdWqH2q<X'/-22TQl*N(]YO$ks,8]M9CM49?D4=BHsRoW>dqKs\-&8&ep
%VCX5(Q=R_2O=N.u-("M==XB=j]TfeZ5FZX?a0('>46_D;#3?tpCqc2?76Ot7PE;K?pkBa'dhYBc<>'R3!*/+tU:&Ya&PS`/90n]X
%&QZ:gY`^"U9sR0`-W\N9h[4A`i7H7%HOQ^eJgg4MM?bC2kFF^ENU(TNOJ0H^'^HadTd4Z!jf'^W,KU(J$L;8SP_.P[/60),TN"XS
%A;NpZXdndmficm`Dpb6G7%5)no7,=4j1.&(Y3(=F!$=^`=OM77BKsn2>YG@/0$^:14Cd#7R`f],*liW834pZFW\iF012V1`C:eQ,
%Y7M_-gKrKC_5(I1U^8qS^^/Bm&NIQYYVji/Ag(.#c&&/%a17QGFBM#Q(dG$TG$6V>dHFk9QN8VEQCpMiOZ'`aZdg]D8)P'aLGsI^
%l4b&Y.Ck.6.f<Q+?7@X7-t(:W?mQTF!7P@JKS-;,M_Q=gU7JPi.BO?6fc=Y)b5fha%5P"A=c:ttQZY7/V#YZ^*jiP6Gu7_\9$0)d
%&VlCs2\mX^!,VcB(,@F-W<mp0'iP+7MfTc5Xs0\Z7+H)=\eJPkKJb/*Z6j?A48lJFWO7@PRF]UgAA0q"#7D#'G*#0!4$=i(d8NN\
%;G5TMG2>hOj_q8;,o=0.lm2XC.>XV(O*,l*X>Fs/j6BUSfiHNrn$L\_s2QqeVJ"bE5e(AQ2AYh@b?<:6E*WJ3Nj\:8[!9GK<!m>g
%%($ID8HgNbmKt5u$*I:=,`Ekd)9rt/A0pt1\6W+?giP&]Vh[mWLg+E-$e0*2'\SF1%<02S^u2'ka]4i=)g,c7#Snr-5k8J5"51FL
%oMna'U,B*lR]0\(a4sQ*Z-dC2.hru>'jA4AZJ9URBtK/OF"7ciWYDl():VbE&q;]/]H"IMP1s^WG<hcBWKJR<6'@/+&?TrK+U\EH
%m$h-MC-.7\;CXLkLK`DC@+BELBt&l/gA+1XTdrIQAd#P_V[2h7*+*)-\HO_?7+/+]R?1)hbfOfa\kdHG"Y$`U!L#R6PbM';fOUgJ
%6[5A._b)\"HnK03O4nf,1fIpbG$!GJ(bH<ml/u9H\6F^2?fE]cPX!Lt`'iY,W&Y#&cc&r0Kk*Ga>3QF,N-,bPYUW-bd$'pj%j%S&
%QCPg\CP?U!WUOB`C6aE4D+:2T]4&u4W")g;'%j<`6]<,I$\15TGV.JHk+W3W2&]-=X+F;gS`c^i[]oS:gf%4k=>Fbr8S3t.7IB`p
%UlE;Ie?bA$VT-j+R4jq;BQ<-n'c5)"QbQNiA1-/q#gUD^9Y$Z%BP!^Y0YRB`b2FIR^/S]o/"81D.Z(7S<mGm79UXi3%=28"#K>SZ
%5d0<K=<heP#S0Raq%WA_E2+d*9O*a"93!_TB:Ff/Lt9Wb1Pj3g*-*8?298GY<K2m7(.&sPa\(TqW1?*jc_;[!([O/6jCSNaM/iiX
%QJ#_j_gi@A;QmU8(ntgSM[(OG/dSaEG:om<>2r5&G8)#VE(_Y%CJ^s-TckqCbq8<4a`?.DUn&PBDQPkLOB/Nj<`kMEFSqXe:-ao4
%^ir9C\V;6/*[E!<Iu*ut^9@,D6u#gq3#07@;Zngs9-Ng$7m+^pMZV%n8MbB2CM>D6]0@WN8^*5\'G$gRC5<sVQM;6^1FmCr6Q="_
%2AKUGC/o9?0<*IaW>&ln<2LR/nVb8$13ULA@W:.F-rnB]Wd9unBF8Nn/n1kWg/G`%d.YFgI8bdV@g@JJ5ZGsPPCPORioZ!kC+AU6
%1t(2>RB!s$Opl>qp:c&CU-4d9&=3u$^J^gMS5J%+;jI>a8NT)BT(gC,6<E&[0S';baeaOjaUJ(c%p[HJ`F&:uMO>\Y-,OrjA9a_K
%QG&S`!3K&O0-DhALfIJJMX&nt.Puf/[!%^Ff(;kiFq:_<;/T:9J"BS%;$J3"j0fe6oL,Z&aYc[M)!V#sA0mZLENC_5P3k[g.O.uh
%.KgFg4d%3M;GmSh_9&#o1k`JYmE3OCLU<kJ*h&@p[47lR(Y=?Jlm,g?gY8/B2+V[:=AbIf)7#FE_@ZlC10d+Z?!UDqZpr>S+MYDB
%/kS]Sd_kJ+;P>7G;WN"dACboSBr?_5HpAmp84)&baBe->KH(6+r'hdI_[B`q%eY57b.VLVpsaF!7m)DD?A*`EXf)TS)HH-%YSA=\
%'Epp^SbuB\+^Cd"X<buKcUD^FYoHqfblSCNFMuk3V'(Pk$@HTn`!RB4"/=gP#mg?k&O!nYB@rB`diMD..B4LoURkp%,';?XVjJ5W
%_!j522(G?`Qo6KCbDj!*G5>nDhT=jr0FR4KZ5J4<eVnc(]`c661(6:X?LB^`7&Q)5>\+J`,Dhjh;&,f_WjJd6-beP>;1i1A/i>,Q
%N1i-\-d.M$U3?EIo<-JJ3CI9(p\)UYK"/#B`Iu)(2^itH+Ym_a)S%f(#Z"gSX%Ob,P@nF,U,(//L;!]o$)<]BilM*>]2+pLa:Mnk
%\R?deBtP1gdmm=j2,YmiMJXa<]`Pm[\H7I\^dU'3U"GS:3EGtT-<j_X!(I'jA/8jn'U994OY^U2#\([4pJM]7/GW,oW/0`GZsf9%
%1u=,Dl(a*j)Php9.:2mX^fFo"j)j:iGki?eG0_PpNZW>a#`I%L@m&8_i)6a[^9jhtBT8P05R^MB#3V]l?\l0eY0dg+BFW/,EoV4<
%4+5Vmit?_Vj<<#Rn*3mq]6&oKTSnG-ZlL@'[Gag:_,J5_D@+(Aip1-77/sHJb)"Wi)%B:9Sn0>X[jq.Ya>Fm1H4FXk8S3r87;_cr
%qi3AQ*>fm)'l@^4pMq>_<sTAQ<"2^AM=\-uN1_?li%U20Opl=]30[c&aUkM71M/>^L%A1V?GGH?5M'QSB@M+d<2Df[dS:<i\$m8K
%O'd)dF`I[jeQT4NH4UMo/$8;W91hQ;Gj>eWLbL3oFkaVPWfd^`'llbGn_sOdcBP']Ih0e5Y##/M->TZ&)JaOLAuC",m7n]^7p&_#
%Lq=OU*9)]1d2\S_>ZMbF>O<^J91H;C*1X)UCGk$O/u\hSTCuI),V#$V&e%nK5#EddA0pMiBidllRr1[^o[$-6-Xl1W4cmeSAd%*b
%(?%p^FUsLt`s5SlB0J)f)S\`_F"PLC0>R^28HmK;PYMP+Y9>3;(Jm`0q\Z.r6W=XJm4-5Zl(t?G*nhqOG\FKtB5f33Rh5pg^iQ"e
%\FIHfjd7RW-aVRA+M?`R@?b-hb/nTuA>fhbJ6'_d$q(qR0I<P@VcrXhTcqKjc-!#+_fJC2rR63?14Ret`&LBNAd!.QB6dXCn%dr*
%UeBX`EUaB;`A<+#+;,k'=jP2.NTjZ).YuZs))F6cjJ?)q8#O@9aYaugN4E@C=`1ke[F7Y14#EX!,pZ$+_Kt"e+9I2%'#-qi[a9l_
%4tHJLSV(:'2In+P/NZ28.Tsg;K5FUf7]]'i/7=\T8l:Dkn)2ZZCG^][["aiV\OX3/m65:BfoHq.3>(5kqHcETlX6J]O*FQnhA8qe
%,kk,c(kS'X4#()icH-WA]c@iQ&Zq0OAe5b1q;hf2$G8NG.bA>>B=*ETA>Sfse4q*FJKNqo'6Zl5kFs["#4f_D]k#Fiqt]&E[X1H"
%5&L?n+Qd]^M',X9HUq147]\WcpCr9<%kkl`P5#(bmT\fL$rN-W>#gaImc:+N4(ucZ'W@'Ej`cmqLj0p[0MNdM7>VI'`lLI65qAZf
%99/7>,tmg%6Rf#X>,)F3$KB4+PA&TR'F'PhS'!U#A0lC!DHKJ2)K/(3oMPLG=Suu;7<JN(*^H^?#(^48o&KNp/WS>9>=q3Mok&ko
%6*TroO?lJ#2'?E^W;p,Z8fX!.9_,2o.;A!&oP:VV&2cXC]1TBaoN]mh&$>#c]O/b#5OKk77\Brj5eV3[*3'dG]RZriLcfO1G(F.Z
%P[qMWJ.B,gJnU.6nc*CkgKL`4NpGO*q@EHlO;P'@pUkTlo&LcN&GX%dLl(!4Te.7:QXjVQ62s,3`i*+F[7,[,ip:Z"eZA&-4YLpe
%n5.ZIA/1e!0qooB4gNst/;/4J+$.!Ph,\pSQJ\cJ?\6P6l_8Pu1YoNK%><>A\eCblr)D@/,_P"G>UldBCdbV()[PW]U)G%]7?[u%
%E&"(31hO=,8J]0)Wt-6L]mKM2DN0$M%hM<+9srU*%1AT!I;=^<hRl0FG89O/Atg>@+m[jCP>rebiaosM"CX-X](q-q_n"o,#'Ap(
%KV@H6ZB3m&I;%gcj/tp.R'Z%?H9FO#cI3dKEAjA1Z`OkHmK8JGN2`J@6>!oBJl)S-SBY4>G:V:-S5(*@b(++Eb#0dg9#7(ILOO,r
%5#o@X<U@=t=\H!b]#U*<6dMAR>tjTs\>^^[$?,50;oiqTSe"SIfRWm.J>YH.-S*d2a3ZQ8,Q+7WPuJoQE-g+iGICa9G"\kH&3$;:
%%6c\8>3.Mj&3Ei(6+F*#[]`gi$R`4gTB$ZA&*Gi>JPB/&P7n9EFLHVenJnfN9i;-tWoL0E'_J`UVFls:'S6MJ<Pa*mXT*A3oTc+!
%8$ap5B9&AF=#'G@eh"!O=9[\/RMF::e.pY:NE3,Wl"$0@<[0YGa_iTEJh/d"<ZaB6&c2.2,u)Clf)o9"$"QD&Sl6K;5[//.b\/-]
%I*gL,+HB;M7hVm1daG"[+@7!NpBN5$?5C3A(srq:5"Mn'$fQ`g]8jV8YP/.>I]us-cKbL77oFNnm-H-O9V5<^flH+5E[b<^rDJep
%[IAl\'o7io.59LA1`aJ%9ie17H^><Ri=A:0-VNEheVB1!WAi?\KlO\tVXEaN,1jQN>Vp0I6apOkTa7?d6/R2cEC?fK&k(R2"i2Pu
%)t)-l@c3sBI)-,s>$96"`X@G]\k//t.Cle]:s]os+TTcqC&gP/meFhrLh3/&2BW?Ae.;\OelX%Ra]>I!Q`L81+G.BQ"<][,N'If<
%@0@a;ObD6#jBX]Khq07VV<lN,)69qGG^i"m3ridjMIpZQ8p?q5)OtF+e.;m;6jP#$$PdEcUJFX*9#LqHA-+".@+Tp#bnr<?2:UsB
%L(!'?/0^o?A0uRUqU!R]p4,GnPWE)g#Bqi5MoLa4:IT47e(c_td1OOi3H7X!W]"HtjbStBah;+j=/h\IF@7Qh+4(W!cK,D=<6.%I
%BP<j0H,54ReG#PT=;kTK=!aUc(?B/0<FnUJ+<U/>nQ&.n=@.klI7oY4qUc1VK%Pl50I/X.C+!/0"C7$i!prmi,R`R`e[piUNE^VX
%haToL0ZFE/(Z);3Pi][d3;Fe(#F;UuEZ!`331(V:#WLhQ=$D2fBP*&VbY.^6,M6F<YE%Q]0ghIa9!V:5=hUm!D]IlPVp\K-Y'`CJ
%+g36HHu-$<1$b'0lGM'1#[a)>HO:VuaZ`f1@O(H!%e=q^)T'dW=--HQFG)l#_&Q/-S^jWuAqr_X!2<6@Jot)KH3)8uO/-q7H=EiB
%YRcXhBS"MSfG18\a>V"\'NTc)q9T25MfMp_eSNeV,=Zd.5BO_n/;+O7+$-tBEoQqmgh52^Im(T@,31.`IrGj3bo0i[779Z8W$AYT
%Sgpq2A>jjdpW=rt)j*@,&BWE`g(jiBpa;IC*[<^4_lX<4A1i86qU!W3a4:4m3MN-KU&FWan'_Fi:%G9XD)oJ<n'cfYC1lJ+,EQFi
%[:pC32YQF$<?a=FIi.+C2TNoHl+Tj=L_1X^Mm!7VZ4PkqIHY@U,>8_nl\Fm7]"gjg4Bp@LZ#@FImV"E`o6DKH.Ceuc.ZgBOJhD#H
%$Dh4MWd>!eA1>0tqU!W37iJPm_^W(dlN'b+T$[b?C!Lq'rf.t*c$;Z!$!J-Yc3G6<g0Ro.@O(H!%\htIAF@.;6LTsilA1JYLETc]
%L%)qD6V$CTU.l#f8O)4J(NASLX_8p(a312EpBt8fAoGMJ$U7n`AHgb9fF&-hM&c%$&nJ]Tqdh'(/E"a)M@glfLb;em\a[`+>t<@l
%8*MC!*icdNH@XRtn33Ngi:Pq/5!,%Hj`g-L5a$t5<jj$)D";UP=X@N%nqR_3+8(2::<Dcb_4L.fk(o&eTt+Q&k/%A(%itV^2lGHq
%,C)GVY$Q4k]T*S#;2l05-AF;2O:329m`I"<D4F0A]=V_`G,g4Enj,ta<#Eos*9$d<M1R:TG#n(CRE?nkHJC?#72!?VR"ZNTp=m.<
%Nj:I%E.stfJU$lIAO+Mao`u2;-#7:-P"=*l8F3Q#_W6@C%;>U/K/nN*L."Vq;?s7Hh/$Y<Q;ldj%UKZ^Z.!p'A-DUM8++TEWcO[4
%>\&r1NbU=8K[QL+nju6EnRmC^28;^PqlZ-,%d+*6F;HFJ;K-:AY+B?eSmU^,Lh!`7<@D6V!%p#cC%'!RO&7kbK1DDE+:r'L%9g[m
%-eX)ZPm=?TCde9L5ub\Y5qZ9AQGS_.3l2uM?pPRF#HJ@UI32hHR1d7Dh#i<8Nrl)mTlf0d.<oX(qjtB/$^:!E[f*d1dpV9nO(`IX
%^gR9LX48,0k(o&eLFu\jV+/bq6V!d9kfeYrgWc1=]H6!1;.902=duuQg//"+?unuZ-f?u96:Oc0=]m%[,BCpgQmWY^Ku3S?q99Kl
%iJ9*gP.C)(l<QnecdD*S.4a@:<:@POY\%g+$[SGiCck7+_Zk*#F%aFeFi>7H=]7:IZ:`&)Zut1io<]<7VfKu(LkaQnDLslO$Lb&[
%F>VecYco:R*(G;,4i#%jcEAVuf21=Mfp14!U(#gf?Vs05$-L^;IB@%9HgM>ENqeG.@=Y;[%"X&]MC'*8.RnN55BO_n/2_HK+$-:e
%b@#OMo%k&PQNd6f*\T.qS*So@[YH:"*VFLj)VTdZ[8;lo'hEW=$2Vh;<rPF,`:Db`0IKNPS^iLUVL+A*N(q<6:XE95XtAN-U5"u4
%m:,P?&4k7/]a%]QpL"_lNQ<1G\>s=3@>17h5"7A^57GAu/;8:K+$."$%(G"kCp,?PYCK"-8(PsF9c:@kaE6fOLY",?9+UE+Yc\*H
%lH8d+=X@N%RL0*.;T+_^_<Th:SB;EaiJ9*gP.C)(l<Qp/*D6sp5hJGI94TR2VOCF30Z2udVkb%VC+IN\=EO^s,VZ<0E@tdk(@Yk"
%LlKIt#)Ilb.'AZ5XRB4.d1ALK&Br6oG\?]CUZkNDQp%9GmY8ZA4:*)1HPG_P&!bIEEOjS7+&QTb7=:\5]9=i5L0Rjb@KYV6M/@!E
%R%07oH'[F]2[=DlS0Tot-?$J`auD*K?$iDn=:2LZ/[B9^X+V:I]%lc;hH%'Q.)h$<3JD5('e#37&o$e,.+jc&,T+p`<!Lh/S0'AG
%PD%0*j'=H>)#_'T$cZ<T(WfatE6pgH3G;N=4bVgffBBeJ[@KSXWYQlk"F++hS`#aJ)40$ld%k&bo.0X0kW/'n3Lh<6cD=,g'0J:g
%C$--KU%!kjAuELhBP%K/(!<kWef,P6U7sj;N3Pu<]GZ`+%`I`ZehtO9<H_>BM:dX^Tn<I0E-r8C#u*$THn5JDKG2;c8huah3IPT)
%90)!gG'cX><_<qb#2oqn=lp:75ENVgIh=/^/M,E?#T";12;rKoA.<D)>%JG)O2rCIGjdJf6kc*;XV:].*7,;#j=XMsKgNfD6URL0
%XL!B&A`aK1!`"$W0[hpCgFc8>]_d!W4oB$\U3,aUBNW!Co1@jGk>kthD'OW?gDc,-PQRF$/s(]7[.3rk/_BIA&t4'cHPHrYmurr_
%WZ4*jPmlE`oO9fj#<:f\Q&&59"_/92p:$)o*sSEu@6M^7G4WG4OW:U%>Oj&)X5SH_eFK.K;;RJ/q`!opZqYs;2/r8b@s/^]?tm+P
%E&Bf.:->KmO"gtd#CJA_h1[^d(CW4#o>'hE#BPFQJr>jmY)2[of?=puHEcS5\\aA\SEO_JY?.`_-!kL<I%QM[onoa[J%aiOIogb5
%1+@iGki!adD*snjE]&g%]3<YVf[Q1N.1oL]dDQr]Ph_$D2AACWMN1@J"I*bO-?/SIoU$n=f(@:ujPMj.IM<XI0CF6H\=a3a.\4LS
%%c"f+GoTJ.NQm5Z;AKjd35/cto<g'Q9hW\u#t*jW/R!gh]>(U[cOq`CP5K<G8to<<lXUYoO2W?KSL[BS3OK(Q:hQk/.?@mdZ+,0p
%F]i!hm@$T$)flrJ$guZEVL=gG;d"[lM1/d#\d/O[Tig)u%bqC'C0,6,^Ptkf2UmH-'Z]WQKkVCLAlrio(s;r=Ab#su#jbgQ[5)+`
%:krdZM::2Y"L]=#q?T"or!\r-)d8,.fg%(b!9ej<8e$etE:BHQ9`R?m*Ia#+lXA^fi9=]B(E^hO$OK9L:_8=!c$M[gl"0-4MAG1=
%4=nr*YYCg@gS#GtcI%9i9D-42J-N(O"PH9g6MON`C]^iGB\mh>]b)'jUn#]/QEWB8!H`(g5_c,V`o]Xl:mX=&&Ih^h2/ESAqm<,L
%X*\dtE'W]sPn2T*mSB#39<\_196C=UTs!$URl5CHQ31#d!]cPjO&5SMQdg_kKTunAo`fhE%-[d`9!d;#KM8Z$0haAN422Y`c`*o<
%9bORCR$2=fYd*\u^sLm5hJ%QNd_*+apfJ$a="]SE.C-5Sd-J!I_dB#D;LDS-C/l=/@u/]*YWB@Tg;^ZFL^$6fAbKUh!1so;nCpX<
%_8b5m9Dn0%iCAG.<>5io]/MJ8U%Zq"aQ3`&:r:k4BOt,Qlf,_^L=Tql0m/":K/@ZR=6%\^#!'<A3.T+.@Ck>(&P@#Gai+4>JafGM
%\eU5^/dRkFj(oYa!'DE]'2Y]:>X!88BoLVH%+A`o(TNo@]>&`e^W'@j[E34VJFB/?">9+GbIMPF#_h@6jH>#I8D6WDA,0@$OYAER
%U+W)nPQTQS>oq$a?t8f%Q(=[N(cp26Rqql$@/#oFg:s94YQn)BqPG1=pX-,iJ27ekbTZ%/LsQTFX)&dFZ1+g0ckICPCn2#qPOkB[
%0pVq:PmcYTWaT^-oWlBR4\tQ(Qr>\=+u6A7*D:?c*i]p5F<^A3h!i6&^jABin9lfTpHf:P9<rQQa3pBo0_BY@_*r2.`J/6T@k7jA
%OX*a7Kc88!>q]..Wb*qt"$&9CMCg<H0c"\G?n&P>eWA_J!#?&\Ce-u#U<T,Z31C%e/Gq!%i@.17#5K00)mcdhY_*kuE\'X;2BR6:
%h=Fsq&!aZu@raij0&l@#>IA9QeN7iKj)82H=63BdL,*^r:F>W+N.Yn2Vsa-$!^/5_Qa^E$D[b[#"HCT>4PmHM]>/%?5%$.#+lH?S
%,\<M?NeO8$IO^P:'d2Eo7mW19Y\"</oLL0*r?$_f!'Z_)+GA_Mr=r#QN>'ht@O)12h,Pk`A#TU!I->*Vdp]oXVg32PoW\OB=LoIJ
%=%XM:e)'CR;PS5M$fL$%``4`IjB/$i@2"0PV,bO>HVk[Zp^/pX>'[lL*6SAAjT5T_W8VRLolBrRH65Dte'_CT^`ME1&hbip.oVCh
%d>B^Zf\tP--?@4oFl/aN9"$0FUTb*D7PkL:5SOTfFk9bNiKb6e+41ZZbu:hh$fQ`gLQ67c7iCEb0jD@$`V^J_(/>"AXJimMl2C35
%:Kf[2d97_N)Js0E]N)9!fD@TNX9,X=c)tX9+]hRI\e!9!]QHV4bXaD'Jh2V"<ZaB"09KsTBX2g-cHUco"sO,\d0I\@0@iD/Gm99l
%VLA\Xk+d!#H6kr<jAIuA@,pd$%^(^^HmL.nEjM`V%-WMXi?VKdL$6A<6c6:Y/I5MuLl0u1e1.-!8:X'boaiYn(hPQ>'Ff`H[U&9N
%P74#DO_'Z6'!^uN9P<:sL?!06XI?Ofa:TFIk:=JCU(H)tIH]jk3f?d$B>o]4o;Wq).+6i.eOL.Z2O,-_"5;HW`JapDf\+9;YYKpl
%7s5j\7Y1>ZB!4#;[^BWL56\@UF$rMN"WK_.,RSCYd>*1RpSK&jI/V:fHTaVe&Yu+>EX"=VOJYE0I7HtY?1O0&>4X&86u5!bd)"88
%cH0hWeDDWDFG+s5X<7kdK@,I'=%)kiB@XdXc/s9PVZk)8-HCPJA:JgIi,(okhgQhk.EIjbn3Y^V.j[2%@KTpDneK4IK#kP0<jShP
%8ri,VV''-f'iZ?&E;Ir.1e/B;!au<dSG'r1f[Va/n],<@JS'H80,)U$3]^@JE[a':5\P)!+hIqQ16PW]2BmVfi$k"9Z8u%T!TbOe
%@a@`"-!:NBX?La=,-IJ&_"Y1IB8g$e(2uVS<],%>)?P?2/_/gE,_fQ]CMshFaAt/(.BETU&c'<EGBCqg^QR-Xi7"YM3cZ[P?%N5_
%$Lb&[F>Vff#W3??.gVOc,":%^oMCSZoM`,?WC*pMJaiZRaam^<(5:c_<fZs2Q_(X:9aS;Nl52")PTr6++1biGQ5Vca%inAgpu.NE
%4XdudA-).;['=U#=sDk9,<dV)I3CK6I[Fmp[*YNSe:VMT]6\E'jG^aX";.b`:gW18qQB^oj#P!6\QD-5U'IS,%Bn"6OW[pie#s!i
%[l,SUn,tW9VM?;J``(I4Ef^R,`ap9l&?Xg7X`-n.8*4sq=i0_,8kuJYp__>=bOTj&<fi%!cKR\`di@bFLu6P./+XR]WMD^&ff0*T
%o@BL4k=\<YJ_f9SW)Nk:KWT2cAELKsnF1fYj+O(QcQ#%E8UGmb'J%7&FQ`:iTkSt:3GgA<b--@>`Le5"8s(;i)P>L:#E3'eo14Bb
%!#MEl/6)MR[RS(^&0LAh'Jj],Z.<H>#^1[35+i"*?7o8V\Mhas>s5[`+"CV%S8QVR"^)&N.[2aNBqRB9$FeFbY9GOONa0_!?'%>i
%+E@aUFqq(knI[FN)B*:loAIPB5dLsaaJG\3ad$D1OE5a"cnsX+iX@,[<UeX(S9]2#LC/:"keChL#R!HGWAG-km[?5<5^Z!!0L0.q
%/.1f'eaXY5F[S_P<STF]SLcX=<ZaAkmYG)1$<CBqo`3CX!.j<hG=%&>34`;b+EG"cWLh@c=RQOWX+H9fOjG"/==%uWGG#(9,FEcS
%c3YeKB<)+q6FWN/Q"2MZF8F81rKMqs;g9a5rOaV7JkYMadhI@e",XRm']9P<V0\0qb+/l'#CeeoP_b=>+-)irpXO$Y8lhk_5`>^a
%\<QBp5/<7B(qlto7C<.3+lIRtjl._^F]=Q3XR"rg_lk%ikdU!$V0)\'J42]Di6=@8asrMkkO/Hna=pWo+L+7rnoE4l*P#-g5_::b
%#Tp/)FYqq%O)FN+!7"UZ0/21+Fqq>f@;d609WH#fX*$Bes&N47N[.fY;n2<'7&+%fBPlD+Jt^#:6>pEl""okeP=SH5;ELLph9;RJ
%ifT&2Ap81D5V-#9D;r:4lM-'6iV5-4/.A4qi)9*;j$_#/+DQe-:-OM.Qb?e24e=,],XsUSSn0_\n?W\JM,J*Oo<-g_m7UTBEV.I>
%/YFDLUAQh539#hA`)7AIVPHBH:JmC5_<Q_jZXK%t+IN\-i39$)A2PpC1e/ORJ!trm=U6+N5'4H3+PMED%+n/(M!Xd7X^>4$#QoC+
%N+Um\:om.\-V#es@62uG<AM(BccR^L)tC4C3s<0\CJ@jc3h>AgNmO-YJd#9_+07YJ1u2"DRh$K%*aJFB=/B0<SYh7_4qCJi0/ibK
%\Pt^gP;L?W?(*Ds==%E$nqR7?X7T6_/[7W>B.=W@3^S%T$^P<H]X.I]d<+8I*Sk.pZB[!r<)(;gKR.Edm]j3Ad6bCOAYFNipQ_kE
%1PQ109im+ea,uso6Xj=O;DRP64EIm$X$_^(7&c%7H.U;?4uSsMBcPrGBaaG0L^k+d58G8ca%?H4M@/2V_BTYKZ(mFDA5+i79")Sc
%!$CZ-KcpP4(7"&SSBur%STR1f0%DeA>X=\P33*Q!YO'"KoCONQnuI@uY_G4P!Gmt]O=*_pS(cho]iuVGqX:YgBTh>#"I!J;$Ga]o
%e:5NSB$Tc$KZNN?X91M(=oTMbQ"3CRgPsaqL8Oe2L3Y&eJFi(-m]t]D&Z^Z%\cj6=I$Kr7&P.KU+pAI^_a:qu<?a=F?_2oERRDLD
%ZGJ3pHZP52#Y0!QP0AVU<pr)\hn,q:'4ulD8JB%Ui&"L9lTS`(dfhd/n4]_;4WL<nGK0S,g&3sD4"@9rHpmrf5icF&,pQr-1er*6
%cOp(+`(I>^7uTY(1VIM.1J>1.FtMXHrl]6qaRkO8?^;Bqg*[>@N^+**&`6&$6Y0$Rjs@&r[]$Q:^gY%k_.qdX3[.%8KHn'98J]/J
%X*5RYpHHi;_p[PEkZbi&iDGt:FSB220S4&dbn'QU,F%7gS7[p--\:#hYY)i'j:;?_MR<dlG`7T`M@fs,%pcD+(;`/6%inAgR)o&Z
%i)oI:4i(hc$cQBGh4U2I?RXW>+6K#QpHCLsRMN1tq5B!I+@j0?!)_a20.U/@XM>Vj,<E[`\mRf>_?[+P*DL_lTYj:>HFNC!]H1Ie
%(_ZJ&6;g%+oeM>6:;*Vl+N_;*>Hi(.Xa9,`<?NOA1'P<$kbq:IXAI(MpUqQo&cU,\$aLK'=afMt\o1b[3brIfc1qJSda!cmU1//%
%9j4F^90>9?6:lnU+:D?$ns$3gYn?As)0heE#Oc!E$AI11;Fbg357GA[/;8:K+$07%GM7FPVdT2T.H"#g=Lpp][Fd)+^]D.'%!9G=
%3_e*HgJ46^_($$9dFL@0XE2!fXV359\_ZP,Nn@M__33#r:KHpFRdRC]E7!"-pJ:n<3pMg_RI4:4'JWDf?RVHcJT0`(jV(4k5.!9s
%X$h8U!\3-2W1RUSaB^81,<E^1h$$HW&DgQ<kicg<D@[ChaJT@H-AWod)Mufi)$XI!:>O,s\Sl=3EbUY@OU@Idj%q(MZ3nN?U^@,\
%'t?n;bo28sLb2hcV-lk1)?m0c*W:>oblsHRNe4L=#Ip^DfKeBt\?AcAG"32rHpi(,#%Cp]ZPAX>>.R&+9#O2p$3:W)")<N%/%-7_
%F[S_ZU'm8t+agM?f?rLQAfhq++5c70^%VM8^k<'qD94fG:g9>GZ?T<.>l%P>O]9Dj4nE'HLlH(Hf>)a-DF5(;XB$$[*EsE/&Y!JI
%/BC_6BD%s.mW$Eq.^o1qh%Ldn:<]h.c/Y8G#I3;G7"m_^Hea.R4iq(^R1E>LfSHuV&O]%YOMJjC+jEqXfnb4S*iE%\:?KD@Wt-6L
%>\BBko_rV3Z@#X`??d`ANc)=!KXT3Jf+iO=lA?gQ%`<&I).[TaA7;bN`(.2rg-Cn:>0jB_FeI(rY;e_?,?uL"YTsU9SCNCTIZHK/
%kF7Y&$*j]_j?:>$8&fN"4i)5!KNm!l\i\Sk\l-g'&K?l,QiL"+(CO3H@O/`d7s'D/cIC[k6MOs]Y+t6qZ<NL]h/uN_5+Y>R9H38W
%ccRm58m-0;Ot>J32T_EL4p@uTCde7V5Xau[$D/"_"EID>(srpZ1`%^a;KujITqgr1m9:FY5Q"NtDOnde"4HqhVRVC=3TBf$#Z[8c
%]dHslY<,hiiZn#L!T%jgfH>b\G3<A9,<A0I?*GGENL\OSNkWdL_m-ZFpR^=AZM9QVihV==?RS-L'W.*?L=jbf"ElP"`1p5H.M3WI
%2@'ER"cXU<YX7Y6I`O7<,IY0UYTsV8S^iLUdX@hu2!4s99hg$N'?&i:<TYVX,&h;U!&cq:5eG9+7j&,Ng>6#da>TO3c70DJOZs9D
%ITai;TBb[sOOo]A1`t,-$_k4?%Mk%_eYeH$hN+Xl@$Z),2Wk1\1&JaS71;1Of.7>ZRWFT#iWA(1"#62+<lbj&Ni;#L'o7oqkqlro
%(2'50S/%QhLcW]k*Pi7RYTsU9SCNCT^;hBpG,ejR"5@,mnG[7E=LmHGBT6$'n8n"im,[I<[jhda/S(oY4=.$nNejl3&-9DA8!C$#
%;f#Zuk_SW+&hM*jpgEcgA+&fe-ADSC%'4hV&='J[F63DH!h(N/4ai.3B#K^sq;k"tEK\/Y5_4Pf+?h!!(uV8<n&]<5'@KoOFN!ls
%$'o+qOgFo2dI2(^k_jCWFC\i>.C^P;kT$WlA7/^enC-]X'/?7V6[VuZ6cdDN)#<&IQs"6Y=c(X="'aqPlY)=2Z7;Q2bf(&eDn;@Z
%fII8<-a=Ua@,3c,l0L@dGa_96#kt7IKf'Fm3pC.E'!U=I)8V#8l[i1ip`S"-Rrp\\C`epA8`kU0V`4!jD&`<WkjX0Sj7NDA>m(Zg
%d`BG/]Ek5i*G/+j[R;hc29A\2P\j?N<?a>q?,$e1XMJ)E@Op9:Np$c#2A[pd6?m/9Tqgk4i%dEPcFR5WH\,NHD@Eq@egm+V2]2U;
%[[tQO%rIkA-+da+b=GZjfSH\^^f*7'aU4X!Z.0F,iF_;*"^)3$X?La=U@,'KKCN1;4s^JaF<=j?.`!gc(;GT.$,p!]MsSMr[9r"u
%FtsaZ@q`&e$Ga]o<;k@_%a.6:8kuIGGLcd8_%/o9,R]$jeVAn-I(PGnlm)sI)/o1oJ6e:?)d4H-?b'<>nb^PP#ff1_r,>Sap&OPU
%7_u:EWZZY1+>"]s/Kqta=M_APNB3dY*74p_Z4K3%^$B@C_bI\2GA+SU$!N/8#2eOY>Ca\(Tk*tID:fMQ,V)jP9ukB6GO<)L9#O3[
%%isGE>_0],lFs>W.MX0hJff_T8`mkpWt-5S#l&%=\$Fg`pB4P6)#98k'(ARDUsZDXe<.?":O&G*:bCPV0/t9+;Y:0jam5JB_c2N`
%*4[UhJmp$/M!gcs2"Y_"X-=(+qZE\i?55k`Qt&PcjV@;M8g_9e.Fhm.5:]5V'c0@Ra!BrM<0rOFnaZC\!"fQs//;ZJ#j-!Td2_+X
%i^*fOC?(7:oJ=/m]uV8NLT57+.Y`^J@5i>@`Zi*>.Wf#4R-/;d`.7*5Yu*djK-@!OS5B8Eg1;R?LDFQ(q+O!HV5*LcN97oe-#+l-
%;OQ1RkZp,seJ8;u_]<gq?4V!']l-%cTH(dLgI)+sBlW<efX_P/DGhJj^n.&/YlS]I(Uu&sEZ(B*F<XuUG`H$tP7fCf>kHtHTqQnk
%h0^CDm30^^Lbb90qU*QE!mC/?+sRDN,0ZU#jKd&;B_iHCpZ5jeqc5[&@KZ1F!MVn/.mY,PD-+W\*7#5p0#UAf&D]?pB]toBhd)jh
%b'*fo0$OJd3Q6QAmqr\jVgbSfbdLa)2^4SD>4r+#4%TW,aS'!VLlHX^rXcnmrAm_r;$g8WW#TFjd1QB)"\UTe5$>SbG\&IN[WTLD
%ioUlmg]cQ48sX$i`Jr0i7M[W3=I4ZO)fhpJq`1U%OJ0J1<`p_X,@4EtSKLPFTu(*@_Bn5+P*Zb$\Pu@/Jd#9_+07YJoRkApQ?N#;
%YXc_!!Q&3W:EC^WFGIVWhsI(&h$pX\8=/`KiW.N)WNdq/NHj^7f_g<E_2ZB9+_d@(3FYBH\.uS_8J]/^X%saQS_Gk.VE3d\oZ28W
%&:XD&;cW59?l6dfF0K16Ai5MqNc:D`iFf9'MnFOnPp8I:Ii)S6)?0P+<qeY_U@M?Fk_SUR&hM-kUL<btUMjq8MWiuQOLin_%hN0)
%)['2S&4KVU8^=o&XGKad'NJ>_6AD!FZij!%JbY'!@=T@iVWpl!<qoI(;NW1b_VN$39<upc=afMt\tc/Vp<R5ZSo0/)dVJ;k)dC(\
%Q@ZZcO,0H!7neP^qqWc*=096uPXq6`$@#[%D6Q(GN05EWBik\PJgs35:*1CCk-45KqlofpNqEH/$j21s)QJ]*<\7Km2/ZsTKd`%@
%`CG/!$LF@=PLXQ@;$&Z2`O[1Hh.N=#)dgkphs:6910>[Gg1;aE+h)If<:>^-hCNf#&*<"i)dC+<L(?n7?;QF^/QgUF[0.%c](MB1
%V:l*Q/KA:Ls/Kt>c70DFnPUq>"7M:kAM1U"_@mm3?:G@aZBF(GOHX2uI'@qKnZk,G.of)HN3s!&%(koD8qF!e#Q)fdDUE(pFoZ]^
%eSO<,YsS7hfHaj7>tCu7Cfmq^B7p)NC@9_V%U:P`."Qsu7!:KWHFYP/eRW>820BSE8KfI/+,a;B/l75[)RM(75\o##$g;qH*U?TV
%>S=97+Eq4K\h++*==Kq7N9(&aNKPZ&6=B!IY*I7I'VX<`.fBZLc0GBg*3\h]!0uEpiB8=:$)"82INY"h-pDjZB"=*[I&0nFM:dXZ
%@=iG4h@!Gk]%<mk/9O?N32-eHA0H?)HIpOS/uT)rel)iC5@o$h+>V0.<4dDL11[)Pg!0ILXiZtSQTE#e0=2kVXD_.D9#O3[%irTd
%]W:R-2!R-T'Jp#9"MY>TJh1GV:*1B\QD02*R9^7=/O67BMlInm^?`J!-jb;XX6ukYD$'3HU+SPYc8cJ/ahui)HkOh?r)mFF%GB#4
%`Oq4.7Pb$/$^$#hUinrj\s^_<WU?`jC:XbA-&<aa4-i'8N$m(NLLo0ol'_@=L-Q6G8#*k0OtB]:1Kc`t,P$Tj2G:Fc<k->UUQ4OD
%J*;J1=_JMNhK:[2EFVAYa@#\%6X]P?6`s!1Fl0$=j;:%%a%^T5<lf77AGsPV'hHk<5o2L_Ki0X7eNF%.ZI$ZqIHY@Uha?`l)^jOp
%QW;V'!oCOt=4MdYeV<CRG6X3`Q9%Wk)VjCjBnZuqd[.g"!?:K*,--9<O%<"W"ms'G5Y(1'8Zj<Hd=]u]L8Hu69:N=GR+?8VJ6aHA
%YrfA%9*;aIOYa\OI=`VED/_d#d"j^(E;FB&=V\kE]ThGpi+_(iYe$/MH:i6H7kWnN9/$U/nAa`l8(W1AmZ3MfOS2[?q"A-h`6YQ*
%JgHYT^C4m6#!s&J%gk!%D/K#e(06:eM#:\3joS7X,Q,#7U*H"2P6=Oad&=I"T/sROpBbjX]!K`is/P!>bZBiR!sFl3k(<S[G54G&
%9-Erbc\\DcP''4n"fk%=7!nA,U82PQHP\3PBX^$s,LkNQF0K=gX?Ld6/cEU"+0,C%dAD6k<u6*]5=;6`8h":lZ\l==:uT2Y"3XW+
%F`^rhX:jcsH\0^g%ot)L5i#p<8,1G9YTQTtS^iLUVE7`9@GHNOG-MNm$0!1u&pS:Tp@HmLUr2%=JNscOqH;i<aC$LMO3/o6Q5V#.
%mod3"h`+ctg,8T#N#7@61H42.<J^(54uCKKNkM/KU?V)Yj"$[OLq?l5%VOO1jL_"^I=ZNrh5LL]):'Y\Krh9$Fg*?ONHf0/)(8QY
%Eb_Zd?O(\k(-9S!@$+`b4uMtV^8ggY6GQ[U>SCAE!>GSo:Q&Ol_tRG:1]k3eh.7e^^Q<<t1K51p@cR!6!M[.@N0D'bkBch:M@gl6
%8[]G6#k!X8oWpK:Cd3:L#SeCt7,rIn@J&%eC\R>ZA$SDTWfJco93"RYD'g.+(\.G.VZ^hK9/T$=,0(*=kN%<m(bdu5J<!lLr@YXD
%bXE%C*uauYmQU;>'LcS]82Z/Si'7L,c3lakiDWU9CUB0`qjIf:(H<Z.Q-)-@'Ma5GOc#DHl;es3oea_rV(H*uc1)dYZ_PGGZ4K/Y
%I;%i2QB'%%75)qpRO8A:0B@fh(4i4D205A9l$e3mh$rFC?'TQMkp"5gmFj(k6u9e7ZV2Jo=04">8$#NRHL#]A7kW=lO^LHj_?[+P
%*R+`I+o`t?FBG0;!q%b`DbPUhp&I12T.F9[.Hr;nRRWBsE/[-'I"e?$9#O33PSP6%>oDIgXS-OLKc&4"9,Z+i/BM/lAG*+#l[GK.
%oZga3Q%!$S4CJ%R1Aa743Vr6I<p=92`m?t'jfu!^m`7K]fG?BT93-W=LmN/*%;`I""fi;+_m>Be#Y0!QOt8Es<pr)<mYHhQ1I5='
%WN>a-mU%nh[>:."CPU+4UtODW\cCHL<e'@'KK*n`@HWi17\fU,+i9mh?c`TL#co9;UD^kp>biJLWIrNdDGp<!J,,"0rPO-[Rm6o:
%2ue:(l(A"Fqk*o`kHFmklp'J/Ieeonleh[<YM]>??iK&7rULbSFoSdqrQW+6rsslHFsqIZBubXL5`jOt^Ysdnb0^_Bn]u-'`Z%?u
%q#)K#[%dTEI((AZH(Va;?M=Qdl2//2hZOH$@NuP-h@G:]!^H<kZ'+Ac4Omj#nT0GR[<L!Cr?9UMn)XB_g$ZS'K3o`@nK)<uXi0L(
%TUZt\DC0+tXS5op6Qh;69GA4DP^.L]Y"b-lKL$<,Z5(,8e2>H6Gt.c:863>@o]7_<jG5#V.$_Jk0aIn^;M=JkqH`'R+mb9Y1m!$5
%p%SH;Iq,;lYY*-7acQJL,X\Ws^jZt+(B]o%15lec:N0C`0a);SqB-n?@,7Mk="Uh?H<9J/is:m"U[e=i&fgW\DJgs/73)S5Sot7I
%Cl@Rb-TLN=DJ-c/4]OA?2X[HD^XQm?Qg+Z,Q86S/LiPgRFAJD'Um$OQZsZ&!RQnSTA-W#E3"Z5^R!,QlH%/!G+I?MqEc14=PqQR=
%2UYb/`;-/KlqcNPW]FGaoh7?R`q)&_pX?H8p`bB?30kl*5O9?"%tpis^N^11i2:n<p7hBj/ES^M0"j,B&8*D6+FJftCW($`1)))&
%NJ\_A"$ifOapo*s$.`$tcIqH/U@KP/>%9gDP68'kW,KMO%LWcaN4G!QLGV-]KAo9(Z.X.4ji!_R!c[EjkZLXQSZ`#XStE`BaPVAA
%aBW.$Xi]&dU<X"e:q?j;0Wg>5e%;<14WY=Gf*p5ah+&ZU;L*L79X=PG-[jW8fIESaL<+(0*^sQ4\bH(_R'";-jHE^j8@;`bieqGs
%,A1fC!F_oJ(u>d.5L>1*V=A('Jt'2$G7!-0@U#`H1g0,,]IrbMeZYR-ilYEF\kP*4!G1.#*"??7`0)maDC$p^jH:a^9?tD^(hl_=
%`GcCL^OZ?AqS3YYh02k\T[>HT97c"Am@oaPh2"q[N;OR&)9ArTD"aY<4Cg?B<g[.8U*B6RL5<r^nk2\.A\G(i"C9/p+Y;B0^s0Y]
%M%YK@?HH<o<:km'F(oFEA%fbf@D6G!l`(UPQ#`\Cr`&#dRVpsqZi5#85GpYR2-D173uN7_f)tC1OShqpqU2Y-ILi0DG!?,LcbBQ0
%NC<XW*)%)P)*</;O<hQ%V(X<E_X8_$i,Kl&#G(8ifjUjIW"oWI&2OIJUBffWc2c]S_bMtB2V[e,F;;5>6K9Jt@'JbG^->s3DQ;?'
%$JEF>U%qI9ATnWu'Lp>Pb,AhR0P8.3ScTP&GFkYj5r^W$?)[Qd#O@RBX<#Uthh1T=`Qu:&mo9]ip)i0dMmmELXDT.E*+gq?.X8/S
%'0S40Cch`l\&1[CkK<$%>frb.LmNLF`P`[BG,T/+N[=t9*8)!qncE3M=Vk*j4(PY<AI7Thn/abo06A]<B,"l-a\8KhKp+02l;R1A
%Fp2.$1uO/!fg,p\RD-!W#cAeG:be&)=\uQ43n^WtFN9Mdh1RU:6@1&$TI]VB/(;5:ZJ8tV8c\1#oE#GC:!B6_K&an?I!+=urfZ.c
%_>RXoI/tkR\uM6JJiM(.b%gB^N'&fqTeAA0]9G:s.V0+s;"Xu0$N/-80KYXIB]!ra?*,binO#psgGb(WP3;B5K[C-AC\8A/\6-t=
%+6U=&[":u:$,)S;AXFKl&C%D:_q\8RCTo8>4G9eV?9Q(;'l&1[5a5)2b2qi',FU\LMWE\(n_!W`Q^JYjf_CP,_"EF.h=*eAB<Xk]
%T8[Y@9Ik`o%3H"l-CheK*^WQm>7LN"OJOm#O0P]SiSuH*CYb>jP5,g=OCb$MWl+hbGE\pEM"s.mnT9fM]L$SF9kE_%U$CuZ$!NEZ
%!DCqn6'P;`9Ue8rBS5KR`d1"13c#%ArR0sKXeV%^5o-QMgV-h:"VfmAD"<\%2_Ej-';RfB/j&Y*SD1^prq*2^GNVon^P>t;lMM(.
%RI^5`$6Q@mY^c"4fG`oK[XDSLBQ[*<+UPSliG#!("h:2phD\)-FqEj/K6>%ngbA"c$3Sl4[c^WCd8=JXQ#,TAdW(E*&=Os/geTHq
%KB@-B*>]<8s$LL7F7$(L(O*6dBNg!`Qq`JUL/<>@k1hI)$Kc>6T&rm&86>B*V0$_[EG8uYVaH@2dPP#?0PRat"_*A<J5s\YjUQ-G
%Gc>'O),s_gZ?b@.nC)TbqeZ@GQ1=fuFpkD<V'k9oO85-XEbpP=ItQ:(Rq$GC3@qp(%qGs7j?:3sgJDFic$Hrg#;k8LrRckiauU*#
%@iJl42a4BbCs1_iZ0d(>U"-J+Muqd+lb#acC9IkY,[iKi/^J9?>5</UK12H(Xdn-BGQY'AbCac0T%a=Jc]p,uG5`el]W1o*[pV5*
%^!DMtKUM$a!loRD(esd'eEnh>7L9jr&4,(p*oOJoaj*UM'8KsJMZ0#><9\,g\T,i*_.cJq`:Gn8@MD'^(^275d7!'p=Vie$Ad=?D
%kE'EHb>u_#mBCI\Jp&\L=3X/6QXbH4Mro>8UPFinB,*O5F<:Itp9E`4-f9GWM\7GhU<iR52TL2&`EZA-ZPO4I=iSZS;^lqF_d%km
%YTZagbXHbSgHKr;JL7Bel?c*Dd6qj1m8sa!>BC^*F&;td>Z<sE(P*5_fjP0'J;bnUjs%mcSca[_Z0g3279&fQ74dgp3G[GW<$%?n
%7377hN'8?U2d>j+o+'T^l:iZm^BkK<BTq>,-HcOV:E#D%n'$)?^@R3H5Y.QKG92;$T_&`bo',nAft2R2jVN[>>J0sd&$]?ce:[+X
%HasC+q\5lP;XQgSb^0nNMpS$)c2\`PlP3R3MND&k0rpCQn1(Sd%t]\?)c5uh!-PC4HOu=Ek<15E]E\U@5M14#hh'bCK.oI.4J);?
%"RR6u]25-]*^n=C43L>,;U*2Y)H?iD4LX)g<urt2X"@$H@NX=U2=Ej+52315TSYjJe\[>Ta.d'=;K_<i(&+@hnfCaaqo1!MZ/GV;
%HP"8@hCA8m#O(oT!nodCqX!C2pE7Pt;M"K^"HBjdQjG/*;4R:tFRS0:*I!fr&9MgUI,9K@GDs5jK>;k'T8ib2`q1"HHpoa?ik1^j
%0a0CER4!7jqOBZjWQ4TipTn1ZpgUemq*c]sonuX4nfj<k?\IpK=CjX53-`$9P$9S+S6oLdPmj."]a.J]]#i)`LuJqOC[E<F'XF4T
%"7`G=LYgo?]Psk!2R$i$9*#PC_p.5GFIBU!b914fk2tq777BBVY7=;c&&2F1X$e`>,XF=j>@^n*M!1VC;ZeU`_K5oF`8uVeCm)?u
%.''eI?_8gj)iPA2IOj!*<s@pPJbotH@=/SLQC)lfDi<D"W$s#5#@0\$L@a?WAM.6=9s,Rm9At0=1K$.mFB)N$%*Wr+$bC?]2ZqZ[
%4l8L]nsUKYrWO?,r!BKSUH&(YEB_.bqo3SUcfIQ:RP'oN%"s1>1U6)T$.^JY$WLor?N>?t?MYW)bM%O>+tZTLk*^&EA@n_ZpHU6W
%GY*'3K3H07*Q$Ujq#Xc!=0Efu"8u!Ye\L>MUrt(K8"`6septYf.'RG#0DSi!B#EBBF?aW_^J?lEfi5Tf"gN;66YLQ\l:&RsS,;oR
%__j&U#kSJ>Y%rt+/lYcQ&`H`fp%q&;1@>?`\";ioJ"jC8<-]t*bO18'!4]#Qe4IO]@^d+TPu(BIA6Wh:/r@jm>*:%NDr3DtpU#N[
%QYTG69HXft/%YMq;aC3h2G$>8+d+Y`\Kn-O%7pbj+`,Ue-,M2N!,LiCiE@16a)W@PdQkA*@82,oDYCR2ds&!sg>`_[`+'o>$a6J[
%=M*Ji8U8=1o(L,2O!!0j(Y2](B(p7t,3!d$`BD9Zni4U'*phO(5:)aHD8;dX&`PkS)(JO'p$QKW\Z!YhK'9D@Y#QiFKhW!WM=<'@
%5Ac]gUs7ltkdeku8?3'F$#k=/fbD-'*9;tA!MZ,9XP>ee/ne=+:@f%84$=*3N30:TQ0q]>#7aLnR\=4*-[[2l-dp/&/4$YG_GLG]
%NTX@*m0Ojmr_oBE+]sm:,aqGV-Y$N6!)JVCGQeR-K+*j"XFi_e\A;3e^T\gQ*IJ7kgT#<IGpB-+>YGl3DeL8Wf2&1c%/'$e=N$2X
%eQ(rKOQHYt#bc?Uo.8)-M0&Z"QD7*\#o1&0+Pr/SP4q#G,A=/$ql_Rp-o"\N6dntS3Yu(;e1UY?nD<"l,5*egGucCs+EtNt0hoPO
%o>iA!Z74G:-6`cZYQppnKjH\l[O-SCVaYe(O2q1S=c3:k6O"DF'jeaP4_@qXECrN*USY)=<%ICAnCH&rl3Qk=S!p,gZ;'Ea_5]:<
%/.q_ELB#W9Tg&$4A3P`tN*<<#eO5u#ZWV^u_hq"ErCj;?bCntYlO033-\>m0DPt>S2[(7Te_^#rE?[;n!B9ZjB(\2)E0@<Grsj_(
%j?QgL&.?Eb-YC:cE216A1@/>^hD[qofQ8t*`49N7+`[oM#!R<'_&,1&aR/u.G)kKkpFB^UR',#E7jPAas1ftbKBW>g1sBLlo*Zca
%$]]!r[B_lAB^+j2rB:+*@h][5Zo]O,Us!8f*sQs3:-/qP\(2QCEj7#ecf;-Cf4<VD4R!tmYg4oTplSR4[jZ_NHEO"[dnejpl*o\*
%Jd5i]Qr/qP+S-!CV#>Aqp3e"ZiS^h@,NZ0fUI<j2Y_:)$/18&LiOf%(KEfWl+5?5X%Hd5o.FCq4T-AUZ<.!:$OVu4>\=:)[Sfl0q
%1:"5Mkki?V^TA"b-\]Z\Xm>s[A8Pu))ue2Mee.$Nl,6KUBi2BI_W6LnQbPf0]Hf"@P(c4i"`Q\+]ZTn-76YjCIm$%reF,<eBr/e#
%1aS.@1CTp181%[odJ[[$c78H/`?H!%[PJm*bd_9C]g22'#>PMA"1N`];a2AM&Mm4fi,+X2jQQCpH*i!$n;7PArsBWM&-I<-/RR92
%cYrhWi9RlPGRs]a9Dfb,hqoTKpft;B,?PctcgUN0"U\#c;IdS\J\(?##UE`j<r_L3#Sq"mZu.5B71HZOQIoGKM]<R^glKb*AdKM.
%a+k&MN`oLKe.#.,@Kk.<&Neb-kOeMVo*lZfp=3'6+5]XmUGUp24Y/'mS2sk@MJ]Vk?ah2$)E/M[Ei:_sOGtUZ"."qa>'V:a+.'-7
%A4n5aPMNYMIgD:pVZ(aA=1NTUXpV:4keMenE3Yd8)B*<=14aq&Vo<k2`Q1`G'D%kAipc:9=aqFh;*ju#EQg/!$0_s3[F>su?J1'.
%OgBqlJ;jR%1Jq=sDJK6=U.!\C-]$&[V_l=g+'V/FQ9E`G[XbE+F_Uo`b4S)R%N6'V1PcXQPS%l[Gnd:W<4>.1]DCfL#n2!3-`'W)
%;g0W34$\-*3m6-S[gs!_IY,-\iT6f+:VHs6`[4Y\"BBd/,lW0mFjA"mR8](K+"qXEWr`>*Y#Z\>qbfpIVVBS&gFZdoSh]jbh5:ib
%lX<XlaEOh[4*)IqX='+Q6H[>p<&-pN.TGu1fW??#RQ*T85OLPT!+Cd,]-ka]Ji']na=1YU]u$=0aWSKDE]k-]2K5aLIV2%_XCM)W
%[!B9^[n`@JM`_=-iS!tsds$lK]8m<0W\acol;@CUnFWti@)tB.G^/4S6d+l:Lf@u6T8DL5O$YtaKp&OLh9%L,$e")N]+bcjTS6FO
%B(;+dA>17u8rT<Hm]tpk<r;Zr1HmuW1]W7g$G_]MPK9UOfd3I(*"(!sX-4DFp-ISW8/]e9X(QBe2fl'VVG/rak@t@f2%TA.pt>E*
%=V._eVAT;/=>YZ4C%g;n*YohVV,D140!NNe#e<B;Uk*bRX;Jj"'c>d7JolQXfan0nh4Mi<0NQ9;6!`ls\mNEE1AU=,@d@(fcsp`=
%b`T+T'r3'+`h$7^G0+8G3*#Tn$nkXiq/s58-8UiG@_"SVE/IqF4k/e;fuur['DG;[biUhli/0q.<Ru$U[M0PdD&sI,$>88[IgJO6
%W<HDdcbBQ0lfc)l)t(g_+1O$n'ErSR`nd7:e/QK*:tV$F#sl!Ol68\.``*0Vfnn,1Ctg_:f)cSG^)S1pX'[&iJCTe7o^S=1NNB&r
%GcZrb!pTI@W)Q,:l$+A-5+e==DiVg5_'+5m#8%q,]!_CqVck-/+?`r`"Sd5C9DT+3!R%OdT77*_d!srVT<H52`7p5:.8BhS8G@F\
%:!j#0'fU>cP<0`c5\LK3$2@+&PnedDX2E692n+2d&cBo/r$R<H!p_B.'G2OD<g:c^F%*sZ;8FrsCpdk&Xs!!FX,8$jPC8!j]:&L$
%Fu[P;])]I%#sSRHn]2?`g&,lujGH4j/TN1)DMp0H::?^rpniBOj5@KEd$7uJ4>tCU`0+*2lsT7tc@;LcG9Z7a\&Ql4=AC^Km_/l'
%/\f=?_c;$JCp7&D`l)9,n*1D'QrZF%+Za_5B/sU1MN1u,,?=s2GjJ_6(-fb>SGlM93%[>9QTZ)nIt#58\op2sO9k&V'g(Pg#e?h_
%#\TfBc(YV4e3g\e#3a;KqI91'\.G!4<STYhd;WSj91MQm<Edb1#Ipb"*\5%LT4FEG_O.fTIG=H,(nl$ih]6^_gh\k#::1cBf/\2B
%;#GZ1m^mZ'%6[9CMbd=VkKW'Q5WHX?l#l]\"9rlQO^A`1[2IcX6no!q`.HnjFbNN'c_"rL^=?:!KcadV18K2s^$W>4l[A\.Dohue
%qEL_#la2<4EF;8QL2a;]m=W"OOp(2Wns[Xrd-JqC,)g8?W#L>')$c&b53G2ahXN(0LRcc_3-=C?Wtbc"(`T*eLW86I9Q9tJLYZmM
%d/pu7M@kDD(`n8(^+E&0e*rb$#^4neNb3])F=]R,Z<b8kVVh<:5m[9TV22sIFHgp4;7LI,V?lVR$7^.l,Nk37Lsqo3]1slC<+BSY
%O,1^%#J;"!*YG)!%?e4h1j$&u)%7[t`IdB,%%;BuX6&&sa?8MsYU=!idqo8*nlXJ-MpR@'JMRafC)o%:'oePjXFmY*Ma><IjLUeL
%6A'a`jupKVC_+\r-muI=l7RrneoCZmX;i&Ia5;I0]U"p,<#E?\m,]@EkR(M)l?VbNI1)J?cMY=u=QdK?Gn"c+MN9Cq[eOPVfFX.K
%pNhML4b^PoH&-sW\h!.::YQ)H',sQjo);ULCqQ@2HTAC**:__-qBQ+k8%&C>:DPYd^&97]]WD&,G@3S>^!DNoq_G/ad3Vi;7.:Sg
%)L++Q-!2]bn7!r?;OUuLA"B*Gi#:O*BV.;ZDd,53_,e.T?ct'0,ho[C<jrYe;J\`)1`I$Y9J$UkK76WGFaq,F8Ap+sKrTESPhClV
%OAVBGg5$#PAs@<Td:A]MNTnIt4PG-TlQ>%e7lg>))fQ`n6./6pq4\r#`;XY3NMqA>,9k![lS]s$59>U.7RYQ:*E[2+U75p=`VtK[
%WXktoM&8]WB0q]RT05Oage:\/1_V2!Ag4Ib`$Mbi@)QpOW/tU8#\GNK6+5HYlt.I;.`_NB':!iYAth&obns?M?^cg8TCfSn`TWSo
%5OUlA[!NAEW0MO;pE1SqN9<?[&M`&6>QEu"h>?db6pI(-_?kCtHhol2DEJ(=q6pS&hmkm6a6%(W6$&J:fWRS_?#uU%CJY'')?eFP
%<7l&BnK6LH.WWl(=V5\D*]b'Ih%Q.A)FVmd,G`I>#Z!bl$blm#BRiBbILRbt?@rll+)S[%Do(nG5m[$dd$1P8K*l5B+<lRe-JD4K
%PgJN;%mlZHf%qAuL^$"T59<lIJBEn$J?.kLff]U9[puE3+M-jLAUVQRM$g*VW)Th[?sJ<kP1Q?.g1Ln^=f:H?Y<e9"c<Y]).UZS8
%$>A$6+>d6?2$hK/XkMkT1c$B)5ks.FL5bmj#V$>\H-8@,OW+^U/b^C!rQi14K,>B=04eY:KZj:X7TZHi&B-3i&IXcrTT9CY(]8jJ
%JYPBr5n)i:c=cmE<7W]h"j*61!UVAT*.t(oKePU6F$?coLqZoe;ihGf5g5]/rZ6!4:;5!%Y"-,2'lE:a<04TrIHpaddYior/oip/
%>*\[\Y%l1<JJ;L6G\dr6EbKq["JXn,bl/_hm?Wm9!nj:LGl\e`UslDs*7-9:7cS+S91ScpDTcjZL%%gITq=AP(/oU1FF,n(]II$-
%O4c\.r]@?e0crO8@u=,"C=/s4(DU[9?rmR?,,<9IF"W3g-W7E7jIc*(o.kO\2@;AFfa[*NhKo`r:%#2c`NJ-$3.(HdEVsJ5:AI/C
%L:8Ng=e:BBb:0K2!8($t-6f\j\8[;Yg\_H;ZoZbK0\/'?N4&Hl'i^lFR-AFIn/4qr0+>/`X't_khNZe^f1+iOSef\+eRiL0>,PLr
%=f!\\5o!h#-2X7KW`-RiDaC!(n+Tc5)moL'B)S9gkY,qFaUK&g[PgR`W+d9#nG2gT#h6SL=buQ5.L'KuYJbQ[>6:g'=93,dEnYT4
%n&$f=m+e[=?s&?tCJbLNl*+$[q[+u4Nn?3a'/mu1\qUJLC`rsJXC&;gS.<DVL:4bb*#NP@FG!VKPp7WiU'-)7^nG]5((/g*MCb2\
%r*]V-G"r%Sc)[E#ECPUO.=XWJIIkl.6,flcA7E=:l25+c6@h(@3-k+n,6_Wd3notgaqP0#0%4VK;96>FF<Jl=_=@kGRRR-n`1OaW
%j#\451!SA.[kLH&el2[$aMt_:S/>"DDXIl#R`_#Vdl]1kftea3A_'/SnReUl!:nM+!&5.Aa&BhDL&-TV()QH4Chd_]Gl7p>AbpG1
%ST\g:k<--t%E.*[J*8#tQQiC0XL=C&`'/;UDo!l#B6X[tA-hAV@FBQA5\.QC6Wo`KLubjan4*X@9Rtt&qHN_1[+Fu<G/=%%\`WPh
%[YV*LEeNdD>0eAU^+#0#lN77M2ie\e3>djj3%J?@cHXfXar5pWBoR>3+L=D[i6T#I+p]S9]``+hqEc#j%9>7(,6AJF*`V@X/HPK#
%VpGb9@R:cV12sC!T3!<$1KK!*SRGGm$dEF'Z/\-dMLU+^:Lr^%C]&FuhaS?aEZm@G`9lEhIcqrMTcQ+01al6WGkW=]'Up+I,*tW=
%AMQrb?,t"JOa@+&KbRf"!u89!Nf$#H9Fek/ElVTu)&B'n!rJ:C]PP0_n2l3/&DBh/cbksOi-PR7W'+!C9PgY]3.T]*<s]Ji@uSIK
%90jes<+Lc0HonOm.q<k:V=-%SU9,4fEU!UG*,\;F[>%FPEp'c;UH$?6c30A`Boe:9>PBk)bc`1KCL/O<jE0SR!e_M#;$MYmZDiNY
%HWr<-j8>!2g3NlJ=hRaJ+A[ZQXM[Dm%IEf]Yn%);N@dV]6"]\nAjKBZkToa<?Efo8LL.)c6a64/.3mU%FFK9!DSFGi<hNW`'3)WR
%JNmZPZb:]e;-@'/:V68ZU,KX6?>/]/JL`dZW.c:^PO^es%V%TjL.'pN0%##>1#Cuk2p(4DY6lH`T4)5SX3;'2VqBep=s%qZ@/)!O
%XfNOF/W9sB/PXs^%Y#>RTcien)fhk1SOPLigrs=e`,#gn$m\T6$Gk@X`n.,G=,eYPM':,CDlBB7b5.*#(*+sp]X&aT5RB9%:n5L@
%^HmT"&*BqPGqg'k&;:(9f^pk:WqRh29NKj^:6bj=!=dss)]$U67%k)K*?OG$'tjO\@u@#inW3]t"+ToLa$9Lhn,Mpuc[YrM+922@
%Dr=^smH8uqh1,Ibci<nr^\d%EJ+6>7p@J=`h:Kufs8=&=o^e](pTO=@qYI*SrpJ\CoS5[1md&d0k9'[6&H!r*n>fppmGIl/?iK'b
%!d<ot^]~>
%AI9_PrivateDataEnd
